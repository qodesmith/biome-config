{
  "a11y": [
    {
      "name": "noAccessKey",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Enforce that the accessKey attribute is not used on any HTML element."
    },
    {
      "name": "noAriaHiddenOnFocusable",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Enforce that aria-hidden=\"true\" is not set on focusable elements."
    },
    {
      "name": "noAriaUnsupportedElements",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes."
    },
    {
      "name": "noAutofocus",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Enforce that autoFocus prop is not used on elements."
    },
    {
      "name": "noDistractingElements",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Enforces that no distracting elements are used."
    },
    {
      "name": "noHeaderScope",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "The scope prop should be used only on \\<th> elements."
    },
    {
      "name": "noInteractiveElementToNoninteractiveRole",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Enforce that non-interactive ARIA roles are not assigned to interactive HTML elements."
    },
    {
      "name": "noLabelWithoutControl",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforce that a label element or component has a text label and an associated input."
    },
    {
      "name": "noNoninteractiveElementToInteractiveRole",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Enforce that interactive ARIA roles are not assigned to non-interactive HTML elements."
    },
    {
      "name": "noNoninteractiveTabindex",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Enforce that tabIndex is not assigned to non-interactive HTML elements."
    },
    {
      "name": "noPositiveTabindex",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Prevent the usage of positive integers on tabIndex property"
    },
    {
      "name": "noRedundantAlt",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforce img alt prop does not contain the word \"image\", \"picture\", or \"photo\"."
    },
    {
      "name": "noRedundantRoles",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Enforce explicit role property is not the same as implicit/default role property on an element."
    },
    {
      "name": "noSvgWithoutTitle",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforces the usage of the title element for the svg element."
    },
    {
      "name": "useAltText",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforce that all elements that require alternative text have meaningful information to relay back to the end user."
    },
    {
      "name": "useAnchorContent",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Enforce that anchors have content and that the content is accessible to screen readers."
    },
    {
      "name": "useAriaActivedescendantWithTabindex",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Enforce that tabIndex is assigned to non-interactive HTML elements with aria-activedescendant."
    },
    {
      "name": "useAriaPropsForRole",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforce that elements with ARIA roles must have all required ARIA attributes for that role."
    },
    {
      "name": "useButtonType",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforces the usage of the attribute type for the element button"
    },
    {
      "name": "useFocusableInteractive",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Elements with an interactive role and interaction handlers must be focusable."
    },
    {
      "name": "useGenericFontNames",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow a missing generic family keyword within font families."
    },
    {
      "name": "useHeadingContent",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforce that heading elements (h1, h2, etc.) have content and that the content is accessible to screen readers. Accessible means that it is not hidden using the aria-hidden prop."
    },
    {
      "name": "useHtmlLang",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforce that html element has lang attribute."
    },
    {
      "name": "useIframeTitle",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforces the usage of the attribute title for the element iframe."
    },
    {
      "name": "useKeyWithClickEvents",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforce onClick is accompanied by at least one of the following: onKeyUp, onKeyDown, onKeyPress."
    },
    {
      "name": "useKeyWithMouseEvents",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforce onMouseOver / onMouseOut are accompanied by onFocus / onBlur."
    },
    {
      "name": "useMediaCaption",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforces that audio and video elements must have a track for captions."
    },
    {
      "name": "useSemanticElements",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "It detects the use of role attributes in JSX elements and suggests using semantic elements instead."
    },
    {
      "name": "useValidAnchor",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforce that all anchors are valid, and they are navigable elements."
    },
    {
      "name": "useValidAriaProps",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Ensures that ARIA properties aria-* are all valid."
    },
    {
      "name": "useValidAriaRole",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Elements with ARIA roles must use a valid, non-abstract ARIA role."
    },
    {
      "name": "useValidAriaValues",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforce that ARIA state and property values are valid."
    },
    {
      "name": "useValidLang",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Ensure that the attribute passed to the lang attribute is a correct ISO language and/or country."
    }
  ],
  "complexity": [
    {
      "name": "noAdjacentSpacesInRegex",
      "recommended": true,
      "fix": "safe",
      "severity": "error",
      "description": "Disallow unclear usage of consecutive space characters in regular expression literals"
    },
    {
      "name": "noBannedTypes",
      "recommended": true,
      "fix": "safe",
      "severity": "error",
      "description": "Disallow primitive type aliases and misleading types."
    },
    {
      "name": "noEmptyTypeParameters",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow empty type parameters in type aliases and interfaces."
    },
    {
      "name": "noExcessiveCognitiveComplexity",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow functions that exceed a given Cognitive Complexity score."
    },
    {
      "name": "noExcessiveNestedTestSuites",
      "recommended": false,
      "fix": "none",
      "severity": "error",
      "description": "This rule enforces a maximum depth to nested describe() in test files."
    },
    {
      "name": "noExtraBooleanCast",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Disallow unnecessary boolean casts"
    },
    {
      "name": "noForEach",
      "recommended": false,
      "fix": "none",
      "severity": "warn",
      "description": "Prefer for...of statement instead of Array.forEach."
    },
    {
      "name": "noStaticOnlyClass",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "This rule reports when a class has no non-static members, such as for a class used exclusively as a static namespace."
    },
    {
      "name": "noThisInStatic",
      "recommended": true,
      "fix": "unsafe",
      "severity": "warn",
      "description": "Disallow this and super in static contexts."
    },
    {
      "name": "noUselessCatch",
      "recommended": true,
      "fix": "unsafe",
      "severity": "info",
      "description": "Disallow unnecessary catch clauses."
    },
    {
      "name": "noUselessConstructor",
      "recommended": true,
      "fix": "unsafe",
      "severity": "info",
      "description": "Disallow unnecessary constructors."
    },
    {
      "name": "noUselessEmptyExport",
      "recommended": true,
      "fix": "safe",
      "severity": "info",
      "description": "Disallow empty exports that don't change anything in a module file."
    },
    {
      "name": "noUselessFragments",
      "recommended": true,
      "fix": "unsafe",
      "severity": "info",
      "description": "Disallow unnecessary fragments"
    },
    {
      "name": "noUselessLabel",
      "recommended": true,
      "fix": "safe",
      "severity": "info",
      "description": "Disallow unnecessary labels."
    },
    {
      "name": "noUselessLoneBlockStatements",
      "recommended": true,
      "fix": "safe",
      "severity": "info",
      "description": "Disallow unnecessary nested block statements."
    },
    {
      "name": "noUselessRename",
      "recommended": true,
      "fix": "safe",
      "severity": "error",
      "description": "Disallow renaming import, export, and destructured assignments to the same name."
    },
    {
      "name": "noUselessStringConcat",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Disallow unnecessary concatenation of string or template literals."
    },
    {
      "name": "noUselessSwitchCase",
      "recommended": true,
      "fix": "unsafe",
      "severity": "info",
      "description": "Disallow useless case in switch statements."
    },
    {
      "name": "noUselessTernary",
      "recommended": true,
      "fix": "unsafe",
      "severity": "info",
      "description": "Disallow ternary operators when simpler alternatives exist."
    },
    {
      "name": "noUselessThisAlias",
      "recommended": true,
      "fix": "safe",
      "severity": "info",
      "description": "Disallow useless this aliasing."
    },
    {
      "name": "noUselessTypeConstraint",
      "recommended": true,
      "fix": "safe",
      "severity": "info",
      "description": "Disallow using any or unknown as type constraint."
    },
    {
      "name": "noUselessUndefinedInitialization",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Disallow initializing variables to undefined."
    },
    {
      "name": "noVoid",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow the use of void operators, which is not a familiar operator."
    },
    {
      "name": "noWith",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow with statements in non-strict contexts."
    },
    {
      "name": "useArrowFunction",
      "recommended": true,
      "fix": "safe",
      "severity": "warn",
      "description": "Use arrow functions over function expressions."
    },
    {
      "name": "useDateNow",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Use Date.now() to get the number of milliseconds since the Unix Epoch."
    },
    {
      "name": "useFlatMap",
      "recommended": true,
      "fix": "safe",
      "severity": "error",
      "description": "Promotes the use of .flatMap() when map().flat() are used together."
    },
    {
      "name": "useLiteralKeys",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Enforce the usage of a literal access to properties over computed property access."
    },
    {
      "name": "useOptionalChain",
      "recommended": true,
      "fix": "unsafe",
      "severity": "warn",
      "description": "Enforce using concise optional chain instead of chained logical expressions."
    },
    {
      "name": "useRegexLiterals",
      "recommended": true,
      "fix": "safe",
      "severity": "error",
      "description": "Enforce the use of the regular expression literals instead of the RegExp constructor if possible."
    },
    {
      "name": "useSimpleNumberKeys",
      "recommended": true,
      "fix": "safe",
      "severity": "error",
      "description": "Disallow number literal object member names which are not base10 or uses underscore as separator"
    },
    {
      "name": "useSimplifiedLogicExpression",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Discard redundant terms from logical expressions."
    },
    {
      "name": "useWhile",
      "recommended": false,
      "fix": "safe",
      "severity": "warn",
      "description": "Enforce the use of while loops instead of for loops when the initializer and update expressions are not needed."
    }
  ],
  "correctness": [
    {
      "name": "noChildrenProp",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Prevent passing of children as props."
    },
    {
      "name": "noConstAssign",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Prevents from having const variables being re-assigned."
    },
    {
      "name": "noConstantCondition",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow constant expressions in conditions"
    },
    {
      "name": "noConstantMathMinMaxClamp",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Disallow the use of Math.min and Math.max to clamp a value where the result itself is constant."
    },
    {
      "name": "noConstructorReturn",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow returning a value from a constructor."
    },
    {
      "name": "noEmptyCharacterClassInRegex",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow empty character classes in regular expression literals."
    },
    {
      "name": "noEmptyPattern",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallows empty destructuring patterns."
    },
    {
      "name": "noFlatMapIdentity",
      "recommended": true,
      "fix": "safe",
      "severity": "info",
      "description": "Disallow to use unnecessary callback on flatMap."
    },
    {
      "name": "noGlobalObjectCalls",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow calling global object properties as functions"
    },
    {
      "name": "noInnerDeclarations",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow function and var declarations that are accessible outside their block."
    },
    {
      "name": "noInvalidBuiltinInstantiation",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Ensure that builtins are correctly instantiated."
    },
    {
      "name": "noInvalidConstructorSuper",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Prevents the incorrect use of super() inside classes. It also checks whether a call super() is missing from classes that extends other constructors."
    },
    {
      "name": "noInvalidDirectionInLinearGradient",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow non-standard direction values for linear gradient functions."
    },
    {
      "name": "noInvalidGridAreas",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallows invalid named grid areas in CSS Grid Layouts."
    },
    {
      "name": "noInvalidNewBuiltin",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Disallow new operators with global non-constructor functions."
    },
    {
      "name": "noInvalidPositionAtImportRule",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow the use of @import at-rules in invalid positions."
    },
    {
      "name": "noInvalidUseBeforeDeclaration",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow the use of variables and function parameters before their declaration"
    },
    {
      "name": "noNewSymbol",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Disallow new operators with the Symbol object."
    },
    {
      "name": "noNodejsModules",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Forbid the use of Node.js builtin modules."
    },
    {
      "name": "noNonoctalDecimalEscape",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Disallow \\8 and \\9 escape sequences in string literals."
    },
    {
      "name": "noPrecisionLoss",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow literal numbers that lose precision"
    },
    {
      "name": "noPrivateImports",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Restrict imports of private exports."
    },
    {
      "name": "noRenderReturnValue",
      "recommended": false,
      "fix": "none",
      "severity": "error",
      "description": "Prevent the usage of the return value of React.render."
    },
    {
      "name": "noSelfAssign",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow assignments where both sides are exactly the same."
    },
    {
      "name": "noSetterReturn",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow returning a value from a setter"
    },
    {
      "name": "noStringCaseMismatch",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Disallow comparison of expressions modifying the string case with non-compliant value."
    },
    {
      "name": "noSwitchDeclarations",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Disallow lexical declarations in switch clauses."
    },
    {
      "name": "noUndeclaredDependencies",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow the use of dependencies that aren't specified in the package.json."
    },
    {
      "name": "noUndeclaredVariables",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Prevents the usage of variables that haven't been declared inside the document."
    },
    {
      "name": "noUnknownFunction",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow unknown CSS value functions."
    },
    {
      "name": "noUnknownMediaFeatureName",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow unknown media feature names."
    },
    {
      "name": "noUnknownProperty",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow unknown properties."
    },
    {
      "name": "noUnknownUnit",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow unknown CSS units."
    },
    {
      "name": "noUnmatchableAnbSelector",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow unmatchable An+B selectors."
    },
    {
      "name": "noUnreachable",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow unreachable code"
    },
    {
      "name": "noUnreachableSuper",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Ensures the super() constructor is called exactly once on every code  path in a class constructor before this is accessed if the class has a superclass"
    },
    {
      "name": "noUnsafeFinally",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow control flow statements in finally blocks."
    },
    {
      "name": "noUnsafeOptionalChaining",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow the use of optional chaining in contexts where the undefined value is not allowed."
    },
    {
      "name": "noUnusedFunctionParameters",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Disallow unused function parameters."
    },
    {
      "name": "noUnusedImports",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Disallow unused imports."
    },
    {
      "name": "noUnusedLabels",
      "recommended": true,
      "fix": "safe",
      "severity": "warn",
      "description": "Disallow unused labels."
    },
    {
      "name": "noUnusedPrivateClassMembers",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Disallow unused private class members"
    },
    {
      "name": "noUnusedVariables",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Disallow unused variables."
    },
    {
      "name": "noUselessContinue",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Avoid using unnecessary continue."
    },
    {
      "name": "noVoidElementsWithChildren",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "This rules prevents void elements (AKA self-closing elements) from having children."
    },
    {
      "name": "noVoidTypeReturn",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow returning a value from a function with the return type 'void'"
    },
    {
      "name": "useArrayLiterals",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Disallow Array constructors."
    },
    {
      "name": "useExhaustiveDependencies",
      "recommended": false,
      "fix": "unsafe",
      "severity": "error",
      "description": "Enforce all dependencies are correctly specified in a React hook."
    },
    {
      "name": "useHookAtTopLevel",
      "recommended": false,
      "fix": "none",
      "severity": "error",
      "description": "Enforce that all React hooks are being called from the Top Level component functions."
    },
    {
      "name": "useImportExtensions",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Enforce file extensions for relative imports."
    },
    {
      "name": "useIsNan",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Require calls to isNaN() when checking for NaN."
    },
    {
      "name": "useJsxKeyInIterable",
      "recommended": false,
      "fix": "none",
      "severity": "error",
      "description": "Disallow missing key props in iterators/collection literals."
    },
    {
      "name": "useValidForDirection",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforce \"for\" loop update clause moving the counter in the right direction."
    },
    {
      "name": "useYield",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Require generator functions to contain yield."
    }
  ],
  "nursery": [
    {
      "name": "noAwaitInLoop",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow await inside loops."
    },
    {
      "name": "noBitwiseOperators",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow bitwise operators."
    },
    {
      "name": "noCommonJs",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow use of CommonJs module system in favor of ESM style imports."
    },
    {
      "name": "noConstantBinaryExpression",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow expressions where the operation doesn't affect the value"
    },
    {
      "name": "noDescendingSpecificity",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow a lower specificity selector from coming after a higher specificity selector."
    },
    {
      "name": "noDestructuredProps",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow destructuring props inside JSX components in Solid projects."
    },
    {
      "name": "noDocumentCookie",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow direct assignments to document.cookie."
    },
    {
      "name": "noDocumentImportInPage",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Prevents importing next/document outside of pages/_document.jsx in Next.js projects."
    },
    {
      "name": "noDuplicateCustomProperties",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow duplicate custom properties within declaration blocks."
    },
    {
      "name": "noDuplicateElseIf",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow duplicate conditions in if-else-if chains"
    },
    {
      "name": "noDuplicateFields",
      "recommended": true,
      "fix": "none",
      "severity": "info",
      "description": "No duplicated fields in GraphQL operations."
    },
    {
      "name": "noDuplicateProperties",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow duplicate properties within declaration blocks."
    },
    {
      "name": "noDynamicNamespaceImportAccess",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow accessing namespace imports dynamically."
    },
    {
      "name": "noEnum",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow TypeScript enum."
    },
    {
      "name": "noExportedImports",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow exporting an imported variable."
    },
    {
      "name": "noFloatingPromises",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Require Promise-like statements to be handled appropriately."
    },
    {
      "name": "noGlobalDirnameFilename",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Disallow the use of __dirname and __filename in the global scope."
    },
    {
      "name": "noHeadElement",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Prevent usage of \\<head> element in a Next.js project."
    },
    {
      "name": "noHeadImportInDocument",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Prevent using the next/head module in pages/_document.js on Next.js projects."
    },
    {
      "name": "noImgElement",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Prevent usage of \\<img> element in a Next.js project."
    },
    {
      "name": "noImportCycles",
      "recommended": false,
      "fix": "none",
      "severity": "warn",
      "description": "Prevent import cycles."
    },
    {
      "name": "noImportantStyles",
      "recommended": true,
      "fix": "unsafe",
      "severity": "warn",
      "description": "Disallow the use of the !important style."
    },
    {
      "name": "noIrregularWhitespace",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallows the use of irregular whitespace characters."
    },
    {
      "name": "noMissingVarFunction",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow missing var function for css variables."
    },
    {
      "name": "noNestedTernary",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow nested ternary expressions."
    },
    {
      "name": "noNoninteractiveElementInteractions",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow use event handlers on non-interactive elements."
    },
    {
      "name": "noOctalEscape",
      "recommended": true,
      "fix": "safe",
      "severity": "warn",
      "description": "Disallow octal escape sequences in string literals"
    },
    {
      "name": "noProcessEnv",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow the use of process.env."
    },
    {
      "name": "noProcessGlobal",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Disallow the use of process global."
    },
    {
      "name": "noRestrictedElements",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow the use of configured elements."
    },
    {
      "name": "noRestrictedImports",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow specified modules when loaded by import or require."
    },
    {
      "name": "noRestrictedTypes",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Disallow user defined types."
    },
    {
      "name": "noSecrets",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow usage of sensitive data such as API keys and tokens."
    },
    {
      "name": "noStaticElementInteractions",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Enforce that static, visible elements (such as \\<div>) that have click handlers use the valid role attribute."
    },
    {
      "name": "noSubstr",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Enforce the use of String.slice() over String.substr() and String.substring()."
    },
    {
      "name": "noTemplateCurlyInString",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow template literal placeholder syntax in regular strings."
    },
    {
      "name": "noTsIgnore",
      "recommended": true,
      "fix": "safe",
      "severity": "warn",
      "description": "Prevents the use of the TypeScript directive @ts-ignore."
    },
    {
      "name": "noUnknownAtRule",
      "recommended": true,
      "fix": "none",
      "severity": "info",
      "description": "Disallow unknown at-rules."
    },
    {
      "name": "noUnknownPseudoClass",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow unknown pseudo-class selectors."
    },
    {
      "name": "noUnknownPseudoElement",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow unknown pseudo-element selectors."
    },
    {
      "name": "noUnknownTypeSelector",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow unknown type selectors."
    },
    {
      "name": "noUnresolvedImports",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Warn when importing non-existing exports."
    },
    {
      "name": "noUnwantedPolyfillio",
      "recommended": false,
      "fix": "none",
      "severity": "warn",
      "description": "Prevent duplicate polyfills from Polyfill.io."
    },
    {
      "name": "noUselessEscapeInRegex",
      "recommended": true,
      "fix": "safe",
      "severity": "warn",
      "description": "Disallow unnecessary escape sequence in regular expression literals."
    },
    {
      "name": "noUselessEscapeInString",
      "recommended": true,
      "fix": "safe",
      "severity": "warn",
      "description": "Disallow unnecessary escapes in string literals."
    },
    {
      "name": "noUselessStringRaw",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow unnecessary String.raw function in template string literals without any escape sequence."
    },
    {
      "name": "noUselessUndefined",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Disallow the use of useless undefined."
    },
    {
      "name": "noValueAtRule",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow use of @value rule in css modules."
    },
    {
      "name": "useAdjacentOverloadSignatures",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow the use of overload signatures that are not next to each other."
    },
    {
      "name": "useAriaPropsSupportedByRole",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforce that ARIA properties are valid for the roles that are supported by the element."
    },
    {
      "name": "useAtIndex",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Use at() instead of integer index access."
    },
    {
      "name": "useCollapsedIf",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Enforce using single if instead of nested if clauses."
    },
    {
      "name": "useComponentExportOnlyModules",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Enforce declaring components only within modules that export React Components exclusively."
    },
    {
      "name": "useConsistentCurlyBraces",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "This rule enforces consistent use of curly braces inside JSX attributes and JSX children."
    },
    {
      "name": "useConsistentMemberAccessibility",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Require consistent accessibility modifiers on class properties and methods."
    },
    {
      "name": "useConsistentObjectDefinition",
      "recommended": false,
      "fix": "safe",
      "severity": "error",
      "description": "Require the consistent declaration of object literals. Defaults to explicit definitions."
    },
    {
      "name": "useDeprecatedReason",
      "recommended": true,
      "fix": "none",
      "severity": "info",
      "description": "Require specifying the reason argument when using @deprecated directive"
    },
    {
      "name": "useExplicitType",
      "recommended": false,
      "fix": "none",
      "severity": "error",
      "description": "Enforce types in functions, methods, variables, and parameters."
    },
    {
      "name": "useExportsLast",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Require that all exports are declared after all non-export statements."
    },
    {
      "name": "useForComponent",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Enforce using Solid's \\<For /> component for mapping an array to JSX elements."
    },
    {
      "name": "useGoogleFontDisplay",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Enforces the use of a recommended display strategy with Google Fonts."
    },
    {
      "name": "useGoogleFontPreconnect",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Ensure the preconnect attribute is used when using Google Fonts."
    },
    {
      "name": "useGuardForIn",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Require for-in loops to include an if statement."
    },
    {
      "name": "useIterableCallbackReturn",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforce consistent return values in iterable callbacks."
    },
    {
      "name": "useNamedOperation",
      "recommended": true,
      "fix": "unsafe",
      "severity": "info",
      "description": "Enforce specifying the name of GraphQL operations."
    },
    {
      "name": "useNamingConvention",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Validates that all enum values are capitalized."
    },
    {
      "name": "useNumericSeparators",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Enforce the use of numeric separators in numeric literals."
    },
    {
      "name": "useParseIntRadix",
      "recommended": true,
      "fix": "unsafe",
      "severity": "info",
      "description": "Enforce the consistent use of the radix argument when using parseInt()."
    },
    {
      "name": "useSortedClasses",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Enforce the sorting of CSS utility classes."
    },
    {
      "name": "useStrictMode",
      "recommended": true,
      "fix": "safe",
      "severity": "error",
      "description": "Enforce the use of the directive \"use strict\" in script files."
    },
    {
      "name": "useSymbolDescription",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Require a description parameter for the Symbol()."
    },
    {
      "name": "useTrimStartEnd",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Enforce the use of String.trimStart() and String.trimEnd() over String.trimLeft() and String.trimRight()."
    },
    {
      "name": "useValidAutocomplete",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Use valid values for the autocomplete attribute on input elements."
    }
  ],
  "performance": [
    {
      "name": "noAccumulatingSpread",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow the use of spread (...) syntax on accumulators."
    },
    {
      "name": "noBarrelFile",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow the use of barrel file."
    },
    {
      "name": "noDelete",
      "recommended": false,
      "fix": "unsafe",
      "severity": "warn",
      "description": "Disallow the use of the delete operator."
    },
    {
      "name": "noReExportAll",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Avoid re-export all."
    },
    {
      "name": "useTopLevelRegex",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Require regex literals to be declared at the top level."
    }
  ],
  "security": [
    {
      "name": "noBlankTarget",
      "recommended": true,
      "fix": "safe",
      "severity": "error",
      "description": "Disallow target=\"_blank\" attribute without rel=\"noopener\"."
    },
    {
      "name": "noDangerouslySetInnerHtml",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Prevent the usage of dangerous JSX props"
    },
    {
      "name": "noDangerouslySetInnerHtmlWithChildren",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Report when a DOM element or a component uses both children and dangerouslySetInnerHTML prop."
    },
    {
      "name": "noGlobalEval",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow the use of global eval()."
    }
  ],
  "style": [
    {
      "name": "noArguments",
      "recommended": false,
      "fix": "none",
      "severity": "warn",
      "description": "Disallow the use of arguments."
    },
    {
      "name": "noCommaOperator",
      "recommended": false,
      "fix": "none",
      "severity": "warn",
      "description": "Disallow comma operator."
    },
    {
      "name": "noDefaultExport",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow default exports."
    },
    {
      "name": "noDoneCallback",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow using a callback in asynchronous tests and hooks."
    },
    {
      "name": "noImplicitBoolean",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Disallow implicit true values on JSX boolean attributes"
    },
    {
      "name": "noInferrableTypes",
      "recommended": false,
      "fix": "safe",
      "severity": "warn",
      "description": "Disallow type annotations for variables, parameters, and class properties initialized with a literal expression."
    },
    {
      "name": "noNamespace",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow the use of TypeScript's namespaces."
    },
    {
      "name": "noNamespaceImport",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow the use of namespace imports."
    },
    {
      "name": "noNegationElse",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Disallow negation in the condition of an if statement if it has an else clause."
    },
    {
      "name": "noNonNullAssertion",
      "recommended": false,
      "fix": "unsafe",
      "severity": "warn",
      "description": "Disallow non-null assertions using the ! postfix operator."
    },
    {
      "name": "noParameterAssign",
      "recommended": false,
      "fix": "none",
      "severity": "warn",
      "description": "Disallow reassigning function parameters."
    },
    {
      "name": "noParameterProperties",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow the use of parameter properties in class constructors."
    },
    {
      "name": "noRestrictedGlobals",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "This rule allows you to specify global variable names that you don’t want to use in your application."
    },
    {
      "name": "noShoutyConstants",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Disallow the use of constants which its value is the upper-case version of its name."
    },
    {
      "name": "noUnusedTemplateLiteral",
      "recommended": false,
      "fix": "unsafe",
      "severity": "warn",
      "description": "Disallow template literals if interpolation and special-character handling are not needed"
    },
    {
      "name": "noUselessElse",
      "recommended": false,
      "fix": "unsafe",
      "severity": "warn",
      "description": "Disallow else block when the if block breaks early."
    },
    {
      "name": "noYodaExpression",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Disallow the use of yoda expressions."
    },
    {
      "name": "useAsConstAssertion",
      "recommended": false,
      "fix": "safe",
      "severity": "warn",
      "description": "Enforce the use of as const over literal type and type annotation."
    },
    {
      "name": "useBlockStatements",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Requires following curly brace conventions."
    },
    {
      "name": "useCollapsedElseIf",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Enforce using else if instead of nested if in else clauses."
    },
    {
      "name": "useConsistentArrayType",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Require consistently using either T\\[] or Array\\<T>"
    },
    {
      "name": "useConsistentBuiltinInstantiation",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Enforce the use of new for all builtins, except String, Number and Boolean."
    },
    {
      "name": "useConst",
      "recommended": false,
      "fix": "safe",
      "severity": "warn",
      "description": "Require const declarations for variables that are only assigned once."
    },
    {
      "name": "useDefaultParameterLast",
      "recommended": false,
      "fix": "unsafe",
      "severity": "warn",
      "description": "Enforce default function parameters and optional function parameters to be last."
    },
    {
      "name": "useDefaultSwitchClause",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Require the default clause in switch statements."
    },
    {
      "name": "useEnumInitializers",
      "recommended": false,
      "fix": "safe",
      "severity": "warn",
      "description": "Require that each enum member value be explicitly initialized."
    },
    {
      "name": "useExplicitLengthCheck",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Enforce explicitly comparing the length, size, byteLength or byteOffset property of a value."
    },
    {
      "name": "useExponentiationOperator",
      "recommended": false,
      "fix": "unsafe",
      "severity": "warn",
      "description": "Disallow the use of Math.pow in favor of the ** operator."
    },
    {
      "name": "useExportType",
      "recommended": false,
      "fix": "safe",
      "severity": "warn",
      "description": "Promotes the use of export type for types."
    },
    {
      "name": "useFilenamingConvention",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Enforce naming conventions for JavaScript and TypeScript filenames."
    },
    {
      "name": "useForOf",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "This rule recommends a for-of loop when in a for loop, the index used to extract an item from the iterated array."
    },
    {
      "name": "useFragmentSyntax",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "This rule enforces the use of \\<>...\\</> over \\<Fragment>...\\</Fragment>."
    },
    {
      "name": "useImportType",
      "recommended": false,
      "fix": "safe",
      "severity": "warn",
      "description": "Promotes the use of import type for types."
    },
    {
      "name": "useLiteralEnumMembers",
      "recommended": false,
      "fix": "none",
      "severity": "warn",
      "description": "Require all enum members to be literal values."
    },
    {
      "name": "useNamingConvention",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Enforce naming conventions for everything across a codebase."
    },
    {
      "name": "useNodeAssertStrict",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Promotes the usage of node:assert/strict over node:assert."
    },
    {
      "name": "useNodejsImportProtocol",
      "recommended": false,
      "fix": "unsafe",
      "severity": "warn",
      "description": "Enforces using the node: protocol for Node.js builtin modules."
    },
    {
      "name": "useNumberNamespace",
      "recommended": false,
      "fix": "safe",
      "severity": "warn",
      "description": "Use the Number properties instead of global ones."
    },
    {
      "name": "useNumericLiterals",
      "recommended": false,
      "fix": "unsafe",
      "severity": "warn",
      "description": "Disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals"
    },
    {
      "name": "useSelfClosingElements",
      "recommended": false,
      "fix": "safe",
      "severity": "warn",
      "description": "Prevent extra closing tags for components without children"
    },
    {
      "name": "useShorthandArrayType",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "When expressing array types, this rule promotes the usage of T\\[] shorthand instead of Array\\<T>."
    },
    {
      "name": "useShorthandAssign",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Require assignment operator shorthand where possible."
    },
    {
      "name": "useShorthandFunctionType",
      "recommended": false,
      "fix": "safe",
      "severity": "warn",
      "description": "Enforce using function types instead of object type with call signatures."
    },
    {
      "name": "useSingleCaseStatement",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Enforces switch clauses have a single statement, emits a quick fix wrapping the statements in a block."
    },
    {
      "name": "useSingleVarDeclarator",
      "recommended": false,
      "fix": "unsafe",
      "severity": "warn",
      "description": "Disallow multiple variable declarations in the same variable statement"
    },
    {
      "name": "useTemplate",
      "recommended": false,
      "fix": "unsafe",
      "severity": "warn",
      "description": "Prefer template literals over string concatenation."
    },
    {
      "name": "useThrowNewError",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Require new when throwing an error."
    },
    {
      "name": "useThrowOnlyError",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow throwing non-Error values."
    }
  ],
  "suspicious": [
    {
      "name": "noApproximativeNumericConstant",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Use standard constants instead of approximated literals."
    },
    {
      "name": "noArrayIndexKey",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Discourage the usage of Array index in keys."
    },
    {
      "name": "noAssignInExpressions",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow assignments in expressions."
    },
    {
      "name": "noAsyncPromiseExecutor",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallows using an async function as a Promise executor."
    },
    {
      "name": "noCatchAssign",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow reassigning exceptions in catch clauses."
    },
    {
      "name": "noClassAssign",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow reassigning class members."
    },
    {
      "name": "noCommentText",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Prevent comments from being inserted as text nodes"
    },
    {
      "name": "noCompareNegZero",
      "recommended": true,
      "fix": "safe",
      "severity": "error",
      "description": "Disallow comparing against -0"
    },
    {
      "name": "noConfusingLabels",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow labeled statements that are not loops."
    },
    {
      "name": "noConfusingVoidType",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Disallow void type outside of generic or return types."
    },
    {
      "name": "noConsole",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Disallow the use of console."
    },
    {
      "name": "noConstEnum",
      "recommended": true,
      "fix": "safe",
      "severity": "error",
      "description": "Disallow TypeScript const enum"
    },
    {
      "name": "noControlCharactersInRegex",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Prevents from having control characters and some escape sequences that match control characters in regular expression literals."
    },
    {
      "name": "noDebugger",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Disallow the use of debugger"
    },
    {
      "name": "noDoubleEquals",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Require the use of === and !==."
    },
    {
      "name": "noDuplicateAtImportRules",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow duplicate @import rules."
    },
    {
      "name": "noDuplicateCase",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow duplicate case labels."
    },
    {
      "name": "noDuplicateClassMembers",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow duplicate class members."
    },
    {
      "name": "noDuplicateFontNames",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow duplicate names within font families."
    },
    {
      "name": "noDuplicateJsxProps",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Prevents JSX properties to be assigned multiple times."
    },
    {
      "name": "noDuplicateObjectKeys",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Disallow two keys with the same name inside objects."
    },
    {
      "name": "noDuplicateParameters",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow duplicate function parameter name."
    },
    {
      "name": "noDuplicateSelectorsKeyframeBlock",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow duplicate selectors within keyframe blocks."
    },
    {
      "name": "noDuplicateTestHooks",
      "recommended": false,
      "fix": "none",
      "severity": "error",
      "description": "A describe block should not contain duplicate hooks."
    },
    {
      "name": "noEmptyBlock",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow CSS empty blocks."
    },
    {
      "name": "noEmptyBlockStatements",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow empty block statements and static blocks."
    },
    {
      "name": "noEmptyInterface",
      "recommended": true,
      "fix": "safe",
      "severity": "error",
      "description": "Disallow the declaration of empty interfaces."
    },
    {
      "name": "noEvolvingTypes",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Disallow variables from evolving into any type through reassignments."
    },
    {
      "name": "noExplicitAny",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow the any type usage."
    },
    {
      "name": "noExportsInTest",
      "recommended": false,
      "fix": "none",
      "severity": "error",
      "description": "Disallow using export or module.exports in files containing tests"
    },
    {
      "name": "noExtraNonNullAssertion",
      "recommended": true,
      "fix": "safe",
      "severity": "error",
      "description": "Prevents the wrong usage of the non-null assertion operator (!) in TypeScript files."
    },
    {
      "name": "noFallthroughSwitchClause",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow fallthrough of switch clauses."
    },
    {
      "name": "noFocusedTests",
      "recommended": false,
      "fix": "unsafe",
      "severity": "error",
      "description": "Disallow focused tests."
    },
    {
      "name": "noFunctionAssign",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow reassigning function declarations."
    },
    {
      "name": "noGlobalAssign",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow assignments to native objects and read-only global variables."
    },
    {
      "name": "noGlobalIsFinite",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Use Number.isFinite instead of global isFinite."
    },
    {
      "name": "noGlobalIsNan",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Use Number.isNaN instead of global isNaN."
    },
    {
      "name": "noImplicitAnyLet",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow use of implicit any type on variable declarations."
    },
    {
      "name": "noImportAssign",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow assigning to imported bindings"
    },
    {
      "name": "noImportantInKeyframe",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow invalid !important within keyframe declarations"
    },
    {
      "name": "noLabelVar",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow labels that share a name with a variable"
    },
    {
      "name": "noMisleadingCharacterClass",
      "recommended": true,
      "fix": "safe",
      "severity": "error",
      "description": "Disallow characters made with multiple code points in character class syntax."
    },
    {
      "name": "noMisleadingInstantiator",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforce proper usage of new and constructor."
    },
    {
      "name": "noMisplacedAssertion",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Checks that the assertion function, for example expect, is placed inside an it() function call."
    },
    {
      "name": "noMisrefactoredShorthandAssign",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Disallow shorthand assign when variable appears on both sides."
    },
    {
      "name": "noPrototypeBuiltins",
      "recommended": true,
      "fix": "safe",
      "severity": "error",
      "description": "Disallow direct use of Object.prototype builtins."
    },
    {
      "name": "noReactSpecificProps",
      "recommended": false,
      "fix": "safe",
      "severity": "info",
      "description": "Prevents React-specific JSX properties from being used."
    },
    {
      "name": "noRedeclare",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow variable, function, class, and type redeclarations in the same scope."
    },
    {
      "name": "noRedundantUseStrict",
      "recommended": true,
      "fix": "safe",
      "severity": "error",
      "description": "Prevents from having redundant \"use strict\"."
    },
    {
      "name": "noSelfCompare",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow comparisons where both sides are exactly the same."
    },
    {
      "name": "noShadowRestrictedNames",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow identifiers from shadowing restricted names."
    },
    {
      "name": "noShorthandPropertyOverrides",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow shorthand properties that override related longhand properties."
    },
    {
      "name": "noSkippedTests",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Disallow disabled tests."
    },
    {
      "name": "noSparseArray",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Prevents the use of sparse arrays (arrays with holes)."
    },
    {
      "name": "noSuspiciousSemicolonInJsx",
      "recommended": true,
      "fix": "none",
      "severity": "warn",
      "description": "It detects possible \"wrong\" semicolons inside JSX elements."
    },
    {
      "name": "noThenProperty",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow then property."
    },
    {
      "name": "noUnsafeDeclarationMerging",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Disallow unsafe declaration merging between interfaces and classes."
    },
    {
      "name": "noUnsafeNegation",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Disallow using unsafe negation."
    },
    {
      "name": "noVar",
      "recommended": false,
      "fix": "unsafe",
      "severity": "warn",
      "description": "Disallow the use of var"
    },
    {
      "name": "useAwait",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Ensure async functions utilize await."
    },
    {
      "name": "useDefaultSwitchClauseLast",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforce default clauses in switch statements to be last"
    },
    {
      "name": "useErrorMessage",
      "recommended": false,
      "fix": "none",
      "severity": "info",
      "description": "Enforce passing a message value when creating a built-in error."
    },
    {
      "name": "useGetterReturn",
      "recommended": true,
      "fix": "none",
      "severity": "error",
      "description": "Enforce get methods to always return a value."
    },
    {
      "name": "useIsArray",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "Use Array.isArray() instead of instanceof Array."
    },
    {
      "name": "useNamespaceKeyword",
      "recommended": true,
      "fix": "safe",
      "severity": "error",
      "description": "Require using the namespace keyword over the module keyword to declare TypeScript namespaces."
    },
    {
      "name": "useNumberToFixedDigitsArgument",
      "recommended": false,
      "fix": "unsafe",
      "severity": "info",
      "description": "Enforce using the digits argument with Number#toFixed()."
    },
    {
      "name": "useValidTypeof",
      "recommended": true,
      "fix": "unsafe",
      "severity": "error",
      "description": "This rule checks that the result of a typeof expression is compared to a valid value."
    }
  ]
}
