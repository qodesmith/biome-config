/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Schema = string
export type RuleAssistConfigurationFor_OrganizeImportsOptions =
  | RuleAssistPlainConfiguration
  | RuleAssistWithOptionsFor_OrganizeImportsOptions
export type RuleAssistPlainConfiguration = 'off' | 'on'
export type ImportGroup = null | GroupMatcher | GroupMatcher[]
export type GroupMatcher = ImportMatcher | SourceMatcher
export type SourcesMatcher = SourceMatcher | SourceMatcher[]
export type SourceMatcher = NegatablePredefinedSourceMatcher | ImportSourceGlob
export type NegatablePredefinedSourceMatcher =
  | ':ALIAS:'
  | ':BUN:'
  | ':NODE:'
  | ':PACKAGE:'
  | ':PACKAGE_WITH_PROTOCOL:'
  | ':PATH:'
  | ':URL:'
  | '!:ALIAS:'
  | '!:BUN:'
  | '!:NODE:'
  | '!:PACKAGE:'
  | '!:PACKAGE_WITH_PROTOCOL:'
  | '!:PATH:'
  | '!:URL:'
/**
 * Glob to match against import sources.
 */
export type ImportSourceGlob = Glob
export type Glob = string
export type ImportGroups = ImportGroup[]
export type SortOrder = 'natural' | 'lexicographic'
export type RuleAssistConfigurationFor_UseSortedAttributesOptions =
  | RuleAssistPlainConfiguration
  | RuleAssistWithOptionsFor_UseSortedAttributesOptions
export type RuleAssistConfigurationFor_UseSortedKeysOptions =
  | RuleAssistPlainConfiguration
  | RuleAssistWithOptionsFor_UseSortedKeysOptions
export type RuleAssistConfigurationFor_UseSortedPropertiesOptions =
  | RuleAssistPlainConfiguration
  | RuleAssistWithOptionsFor_UseSortedPropertiesOptions
export type Bool = boolean
/**
 * Normalized Biome glob pattern that strips `./` from the pattern.
 */
export type NormalizedGlob = Glob
export type IndentStyle = 'tab' | 'space'
export type IndentWidth = number
export type LineEnding = 'lf' | 'crlf' | 'cr'
/**
 * Validated value for the `line_width` formatter options
 *
 * The allowed range of values is 1..=320
 */
export type LineWidth = number
export type QuoteStyle = 'double' | 'single'
export type Extends = string[] | string
export type MaxSize = number
export type AttributePosition = 'auto' | 'multiline'
/**
 * Put the `>` of a multi-line HTML or JSX element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
 */
export type BracketSameLine = boolean
export type BracketSpacing = boolean
export type Expand = 'auto' | 'always' | 'never'
/**
 * Whether to indent the content of `<script>` and `<style>` tags for HTML-ish templating languages (Vue, Svelte, etc.).
 *
 * When true, the content of `<script>` and `<style>` tags will be indented one level.
 */
export type IndentScriptAndStyle = boolean
/**
 * Controls whether void-elements should be self closed
 */
export type SelfCloseVoidElements = 'never' | 'always'
/**
 * Whitespace sensitivity for HTML formatting.
 *
 * The following two cases won't produce the same output:
 *
 * |                |      html      |    output    | | -------------- | :------------: | :----------: | | with spaces    | `1<b> 2 </b>3` | 1<b> 2 </b>3 | | without spaces |  `1<b>2</b>3`  |  1<b>2</b>3  |
 *
 * This happens because whitespace is significant in inline elements.
 *
 * As a consequence of this, the formatter must format blocks that look like this (assume a small line width, <20): ```html <span>really long content</span> ``` as this, where the content hugs the tags: ```html <span >really long content</span > ```
 *
 * Note that this is only necessary for inline elements. Block elements do not have this restriction.
 */
export type WhitespaceSensitivity = 'css' | 'strict' | 'ignore'
export type ArrowParentheses = 'always' | 'asNeeded'
export type OperatorLinebreak = 'after' | 'before'
export type QuoteProperties = 'asNeeded' | 'preserve'
export type Semicolons = 'always' | 'asNeeded'
/**
 * Print trailing commas wherever possible in multi-line comma-separated syntactic structures.
 */
export type TrailingCommas = 'all' | 'es5' | 'none'
/**
 * Indicates the type of runtime or transformation used for interpreting JSX.
 */
export type JsxRuntime = 'transparent' | 'reactClassic'
export type TrailingCommas2 = 'none' | 'all'
export type RuleDomainValue = 'all' | 'none' | 'recommended'
export type SeverityOrGroupFor_A11Y = GroupPlainConfiguration | A11Y
export type GroupPlainConfiguration = 'off' | 'on' | 'info' | 'warn' | 'error'
export type NoAccessKeyConfiguration = RulePlainConfiguration | RuleWithNoAccessKeyOptions
export type RulePlainConfiguration = 'off' | 'on' | 'info' | 'warn' | 'error'
/**
 * Used to identify the kind of code action emitted by a rule
 */
export type FixKind = 'none' | 'safe' | 'unsafe'
export type NoAriaHiddenOnFocusableConfiguration = RulePlainConfiguration | RuleWithNoAriaHiddenOnFocusableOptions
export type NoAriaUnsupportedElementsConfiguration = RulePlainConfiguration | RuleWithNoAriaUnsupportedElementsOptions
export type NoAutofocusConfiguration = RulePlainConfiguration | RuleWithNoAutofocusOptions
export type NoDistractingElementsConfiguration = RulePlainConfiguration | RuleWithNoDistractingElementsOptions
export type NoHeaderScopeConfiguration = RulePlainConfiguration | RuleWithNoHeaderScopeOptions
export type NoInteractiveElementToNoninteractiveRoleConfiguration =
  | RulePlainConfiguration
  | RuleWithNoInteractiveElementToNoninteractiveRoleOptions
export type NoLabelWithoutControlConfiguration = RulePlainConfiguration | RuleWithNoLabelWithoutControlOptions
export type NoNoninteractiveElementInteractionsConfiguration =
  | RulePlainConfiguration
  | RuleWithNoNoninteractiveElementInteractionsOptions
export type NoNoninteractiveElementToInteractiveRoleConfiguration =
  | RulePlainConfiguration
  | RuleWithNoNoninteractiveElementToInteractiveRoleOptions
export type NoNoninteractiveTabindexConfiguration = RulePlainConfiguration | RuleWithNoNoninteractiveTabindexOptions
export type NoPositiveTabindexConfiguration = RulePlainConfiguration | RuleWithNoPositiveTabindexOptions
export type NoRedundantAltConfiguration = RulePlainConfiguration | RuleWithNoRedundantAltOptions
export type NoRedundantRolesConfiguration = RulePlainConfiguration | RuleWithNoRedundantRolesOptions
export type NoStaticElementInteractionsConfiguration =
  | RulePlainConfiguration
  | RuleWithNoStaticElementInteractionsOptions
export type NoSvgWithoutTitleConfiguration = RulePlainConfiguration | RuleWithNoSvgWithoutTitleOptions
export type UseAltTextConfiguration = RulePlainConfiguration | RuleWithUseAltTextOptions
export type UseAnchorContentConfiguration = RulePlainConfiguration | RuleWithUseAnchorContentOptions
export type UseAriaActivedescendantWithTabindexConfiguration =
  | RulePlainConfiguration
  | RuleWithUseAriaActivedescendantWithTabindexOptions
export type UseAriaPropsForRoleConfiguration = RulePlainConfiguration | RuleWithUseAriaPropsForRoleOptions
export type UseAriaPropsSupportedByRoleConfiguration =
  | RulePlainConfiguration
  | RuleWithUseAriaPropsSupportedByRoleOptions
export type UseButtonTypeConfiguration = RulePlainConfiguration | RuleWithUseButtonTypeOptions
export type UseFocusableInteractiveConfiguration = RulePlainConfiguration | RuleWithUseFocusableInteractiveOptions
export type UseGenericFontNamesConfiguration = RulePlainConfiguration | RuleWithUseGenericFontNamesOptions
export type UseHeadingContentConfiguration = RulePlainConfiguration | RuleWithUseHeadingContentOptions
export type UseHtmlLangConfiguration = RulePlainConfiguration | RuleWithUseHtmlLangOptions
export type UseIframeTitleConfiguration = RulePlainConfiguration | RuleWithUseIframeTitleOptions
export type UseKeyWithClickEventsConfiguration = RulePlainConfiguration | RuleWithUseKeyWithClickEventsOptions
export type UseKeyWithMouseEventsConfiguration = RulePlainConfiguration | RuleWithUseKeyWithMouseEventsOptions
export type UseMediaCaptionConfiguration = RulePlainConfiguration | RuleWithUseMediaCaptionOptions
export type UseSemanticElementsConfiguration = RulePlainConfiguration | RuleWithUseSemanticElementsOptions
export type UseValidAnchorConfiguration = RulePlainConfiguration | RuleWithUseValidAnchorOptions
export type UseValidAriaPropsConfiguration = RulePlainConfiguration | RuleWithUseValidAriaPropsOptions
export type UseValidAriaRoleConfiguration = RulePlainConfiguration | RuleWithUseValidAriaRoleOptions
export type UseValidAriaValuesConfiguration = RulePlainConfiguration | RuleWithUseValidAriaValuesOptions
export type UseValidAutocompleteConfiguration = RulePlainConfiguration | RuleWithUseValidAutocompleteOptions
export type UseValidLangConfiguration = RulePlainConfiguration | RuleWithUseValidLangOptions
export type SeverityOrGroupFor_Complexity = GroupPlainConfiguration | Complexity
export type NoAdjacentSpacesInRegexConfiguration = RulePlainConfiguration | RuleWithNoAdjacentSpacesInRegexOptions
export type NoArgumentsConfiguration = RulePlainConfiguration | RuleWithNoArgumentsOptions
export type NoBannedTypesConfiguration = RulePlainConfiguration | RuleWithNoBannedTypesOptions
export type NoCommaOperatorConfiguration = RulePlainConfiguration | RuleWithNoCommaOperatorOptions
export type NoEmptyTypeParametersConfiguration = RulePlainConfiguration | RuleWithNoEmptyTypeParametersOptions
export type NoExcessiveCognitiveComplexityConfiguration =
  | RulePlainConfiguration
  | RuleWithNoExcessiveCognitiveComplexityOptions
export type NoExcessiveLinesPerFunctionConfiguration =
  | RulePlainConfiguration
  | RuleWithNoExcessiveLinesPerFunctionOptions
export type NoExcessiveNestedTestSuitesConfiguration =
  | RulePlainConfiguration
  | RuleWithNoExcessiveNestedTestSuitesOptions
export type NoExtraBooleanCastConfiguration = RulePlainConfiguration | RuleWithNoExtraBooleanCastOptions
export type NoFlatMapIdentityConfiguration = RulePlainConfiguration | RuleWithNoFlatMapIdentityOptions
export type NoForEachConfiguration = RulePlainConfiguration | RuleWithNoForEachOptions
export type NoImplicitCoercionsConfiguration = RulePlainConfiguration | RuleWithNoImplicitCoercionsOptions
export type NoImportantStylesConfiguration = RulePlainConfiguration | RuleWithNoImportantStylesOptions
export type NoStaticOnlyClassConfiguration = RulePlainConfiguration | RuleWithNoStaticOnlyClassOptions
export type NoThisInStaticConfiguration = RulePlainConfiguration | RuleWithNoThisInStaticOptions
export type NoUselessCatchConfiguration = RulePlainConfiguration | RuleWithNoUselessCatchOptions
export type NoUselessConstructorConfiguration = RulePlainConfiguration | RuleWithNoUselessConstructorOptions
export type NoUselessContinueConfiguration = RulePlainConfiguration | RuleWithNoUselessContinueOptions
export type NoUselessEmptyExportConfiguration = RulePlainConfiguration | RuleWithNoUselessEmptyExportOptions
export type NoUselessEscapeInRegexConfiguration = RulePlainConfiguration | RuleWithNoUselessEscapeInRegexOptions
export type NoUselessFragmentsConfiguration = RulePlainConfiguration | RuleWithNoUselessFragmentsOptions
export type NoUselessLabelConfiguration = RulePlainConfiguration | RuleWithNoUselessLabelOptions
export type NoUselessLoneBlockStatementsConfiguration =
  | RulePlainConfiguration
  | RuleWithNoUselessLoneBlockStatementsOptions
export type NoUselessRenameConfiguration = RulePlainConfiguration | RuleWithNoUselessRenameOptions
export type NoUselessStringConcatConfiguration = RulePlainConfiguration | RuleWithNoUselessStringConcatOptions
export type NoUselessStringRawConfiguration = RulePlainConfiguration | RuleWithNoUselessStringRawOptions
export type NoUselessSwitchCaseConfiguration = RulePlainConfiguration | RuleWithNoUselessSwitchCaseOptions
export type NoUselessTernaryConfiguration = RulePlainConfiguration | RuleWithNoUselessTernaryOptions
export type NoUselessThisAliasConfiguration = RulePlainConfiguration | RuleWithNoUselessThisAliasOptions
export type NoUselessTypeConstraintConfiguration = RulePlainConfiguration | RuleWithNoUselessTypeConstraintOptions
export type NoUselessUndefinedInitializationConfiguration =
  | RulePlainConfiguration
  | RuleWithNoUselessUndefinedInitializationOptions
export type NoVoidConfiguration = RulePlainConfiguration | RuleWithNoVoidOptions
export type UseArrowFunctionConfiguration = RulePlainConfiguration | RuleWithUseArrowFunctionOptions
export type UseDateNowConfiguration = RulePlainConfiguration | RuleWithUseDateNowOptions
export type UseFlatMapConfiguration = RulePlainConfiguration | RuleWithUseFlatMapOptions
export type UseIndexOfConfiguration = RulePlainConfiguration | RuleWithUseIndexOfOptions
export type UseLiteralKeysConfiguration = RulePlainConfiguration | RuleWithUseLiteralKeysOptions
export type UseNumericLiteralsConfiguration = RulePlainConfiguration | RuleWithUseNumericLiteralsOptions
export type UseOptionalChainConfiguration = RulePlainConfiguration | RuleWithUseOptionalChainOptions
export type UseRegexLiteralsConfiguration = RulePlainConfiguration | RuleWithUseRegexLiteralsOptions
export type UseSimpleNumberKeysConfiguration = RulePlainConfiguration | RuleWithUseSimpleNumberKeysOptions
export type UseSimplifiedLogicExpressionConfiguration =
  | RulePlainConfiguration
  | RuleWithUseSimplifiedLogicExpressionOptions
export type UseWhileConfiguration = RulePlainConfiguration | RuleWithUseWhileOptions
export type SeverityOrGroupFor_Correctness = GroupPlainConfiguration | Correctness
export type NoChildrenPropConfiguration = RulePlainConfiguration | RuleWithNoChildrenPropOptions
export type NoConstAssignConfiguration = RulePlainConfiguration | RuleWithNoConstAssignOptions
export type NoConstantConditionConfiguration = RulePlainConfiguration | RuleWithNoConstantConditionOptions
export type NoConstantMathMinMaxClampConfiguration = RulePlainConfiguration | RuleWithNoConstantMathMinMaxClampOptions
export type NoConstructorReturnConfiguration = RulePlainConfiguration | RuleWithNoConstructorReturnOptions
export type NoEmptyCharacterClassInRegexConfiguration =
  | RulePlainConfiguration
  | RuleWithNoEmptyCharacterClassInRegexOptions
export type NoEmptyPatternConfiguration = RulePlainConfiguration | RuleWithNoEmptyPatternOptions
export type NoGlobalDirnameFilenameConfiguration = RulePlainConfiguration | RuleWithNoGlobalDirnameFilenameOptions
export type NoGlobalObjectCallsConfiguration = RulePlainConfiguration | RuleWithNoGlobalObjectCallsOptions
export type NoInnerDeclarationsConfiguration = RulePlainConfiguration | RuleWithNoInnerDeclarationsOptions
export type NoInvalidBuiltinInstantiationConfiguration =
  | RulePlainConfiguration
  | RuleWithNoInvalidBuiltinInstantiationOptions
export type NoInvalidConstructorSuperConfiguration = RulePlainConfiguration | RuleWithNoInvalidConstructorSuperOptions
export type NoInvalidDirectionInLinearGradientConfiguration =
  | RulePlainConfiguration
  | RuleWithNoInvalidDirectionInLinearGradientOptions
export type NoInvalidGridAreasConfiguration = RulePlainConfiguration | RuleWithNoInvalidGridAreasOptions
export type NoInvalidPositionAtImportRuleConfiguration =
  | RulePlainConfiguration
  | RuleWithNoInvalidPositionAtImportRuleOptions
export type NoInvalidUseBeforeDeclarationConfiguration =
  | RulePlainConfiguration
  | RuleWithNoInvalidUseBeforeDeclarationOptions
export type NoMissingVarFunctionConfiguration = RulePlainConfiguration | RuleWithNoMissingVarFunctionOptions
export type NoNestedComponentDefinitionsConfiguration =
  | RulePlainConfiguration
  | RuleWithNoNestedComponentDefinitionsOptions
export type NoNodejsModulesConfiguration = RulePlainConfiguration | RuleWithNoNodejsModulesOptions
export type NoNonoctalDecimalEscapeConfiguration = RulePlainConfiguration | RuleWithNoNonoctalDecimalEscapeOptions
export type NoPrecisionLossConfiguration = RulePlainConfiguration | RuleWithNoPrecisionLossOptions
export type NoPrivateImportsConfiguration = RulePlainConfiguration | RuleWithNoPrivateImportsOptions
export type Visibility = 'public' | 'package' | 'private'
export type NoProcessGlobalConfiguration = RulePlainConfiguration | RuleWithNoProcessGlobalOptions
export type NoReactPropAssignmentsConfiguration = RulePlainConfiguration | RuleWithNoReactPropAssignmentsOptions
export type NoRenderReturnValueConfiguration = RulePlainConfiguration | RuleWithNoRenderReturnValueOptions
export type NoRestrictedElementsConfiguration = RulePlainConfiguration | RuleWithNoRestrictedElementsOptions
export type NoSelfAssignConfiguration = RulePlainConfiguration | RuleWithNoSelfAssignOptions
export type NoSetterReturnConfiguration = RulePlainConfiguration | RuleWithNoSetterReturnOptions
export type NoSolidDestructuredPropsConfiguration = RulePlainConfiguration | RuleWithNoSolidDestructuredPropsOptions
export type NoStringCaseMismatchConfiguration = RulePlainConfiguration | RuleWithNoStringCaseMismatchOptions
export type NoSwitchDeclarationsConfiguration = RulePlainConfiguration | RuleWithNoSwitchDeclarationsOptions
export type NoUndeclaredDependenciesConfiguration = RulePlainConfiguration | RuleWithNoUndeclaredDependenciesOptions
export type DependencyAvailability = boolean | string[]
export type NoUndeclaredVariablesConfiguration = RulePlainConfiguration | RuleWithNoUndeclaredVariablesOptions
export type NoUnknownFunctionConfiguration = RulePlainConfiguration | RuleWithNoUnknownFunctionOptions
export type NoUnknownMediaFeatureNameConfiguration = RulePlainConfiguration | RuleWithNoUnknownMediaFeatureNameOptions
export type NoUnknownPropertyConfiguration = RulePlainConfiguration | RuleWithNoUnknownPropertyOptions
export type NoUnknownPseudoClassConfiguration = RulePlainConfiguration | RuleWithNoUnknownPseudoClassOptions
export type NoUnknownPseudoElementConfiguration = RulePlainConfiguration | RuleWithNoUnknownPseudoElementOptions
export type NoUnknownTypeSelectorConfiguration = RulePlainConfiguration | RuleWithNoUnknownTypeSelectorOptions
export type NoUnknownUnitConfiguration = RulePlainConfiguration | RuleWithNoUnknownUnitOptions
export type NoUnmatchableAnbSelectorConfiguration = RulePlainConfiguration | RuleWithNoUnmatchableAnbSelectorOptions
export type NoUnreachableConfiguration = RulePlainConfiguration | RuleWithNoUnreachableOptions
export type NoUnreachableSuperConfiguration = RulePlainConfiguration | RuleWithNoUnreachableSuperOptions
export type NoUnsafeFinallyConfiguration = RulePlainConfiguration | RuleWithNoUnsafeFinallyOptions
export type NoUnsafeOptionalChainingConfiguration = RulePlainConfiguration | RuleWithNoUnsafeOptionalChainingOptions
export type NoUnusedFunctionParametersConfiguration = RulePlainConfiguration | RuleWithNoUnusedFunctionParametersOptions
export type NoUnusedImportsConfiguration = RulePlainConfiguration | RuleWithNoUnusedImportsOptions
export type NoUnusedLabelsConfiguration = RulePlainConfiguration | RuleWithNoUnusedLabelsOptions
export type NoUnusedPrivateClassMembersConfiguration =
  | RulePlainConfiguration
  | RuleWithNoUnusedPrivateClassMembersOptions
export type NoUnusedVariablesConfiguration = RulePlainConfiguration | RuleWithNoUnusedVariablesOptions
export type NoVoidElementsWithChildrenConfiguration = RulePlainConfiguration | RuleWithNoVoidElementsWithChildrenOptions
export type NoVoidTypeReturnConfiguration = RulePlainConfiguration | RuleWithNoVoidTypeReturnOptions
export type UseExhaustiveDependenciesConfiguration = RulePlainConfiguration | RuleWithUseExhaustiveDependenciesOptions
export type StableHookResult = boolean | number[] | string[]
export type UseGraphqlNamedOperationsConfiguration = RulePlainConfiguration | RuleWithUseGraphqlNamedOperationsOptions
export type UseHookAtTopLevelConfiguration = RulePlainConfiguration | RuleWithUseHookAtTopLevelOptions
export type UseImportExtensionsConfiguration = RulePlainConfiguration | RuleWithUseImportExtensionsOptions
export type UseIsNanConfiguration = RulePlainConfiguration | RuleWithUseIsNanOptions
export type UseJsonImportAttributesConfiguration = RulePlainConfiguration | RuleWithUseJsonImportAttributesOptions
export type UseJsxKeyInIterableConfiguration = RulePlainConfiguration | RuleWithUseJsxKeyInIterableOptions
export type UseParseIntRadixConfiguration = RulePlainConfiguration | RuleWithUseParseIntRadixOptions
export type UseSingleJsDocAsteriskConfiguration = RulePlainConfiguration | RuleWithUseSingleJsDocAsteriskOptions
export type UseUniqueElementIdsConfiguration = RulePlainConfiguration | RuleWithUseUniqueElementIdsOptions
export type UseValidForDirectionConfiguration = RulePlainConfiguration | RuleWithUseValidForDirectionOptions
export type UseValidTypeofConfiguration = RulePlainConfiguration | RuleWithUseValidTypeofOptions
export type UseYieldConfiguration = RulePlainConfiguration | RuleWithUseYieldOptions
export type SeverityOrGroupFor_Nursery = GroupPlainConfiguration | Nursery
export type NoFloatingPromisesConfiguration = RulePlainConfiguration | RuleWithNoFloatingPromisesOptions
export type NoImportCyclesConfiguration = RulePlainConfiguration | RuleWithNoImportCyclesOptions
export type NoMisusedPromisesConfiguration = RulePlainConfiguration | RuleWithNoMisusedPromisesOptions
export type NoNextAsyncClientComponentConfiguration = RulePlainConfiguration | RuleWithNoNextAsyncClientComponentOptions
export type NoNonNullAssertedOptionalChainConfiguration =
  | RulePlainConfiguration
  | RuleWithNoNonNullAssertedOptionalChainOptions
export type NoQwikUseVisibleTaskConfiguration = RulePlainConfiguration | RuleWithNoQwikUseVisibleTaskOptions
export type NoSecretsConfiguration = RulePlainConfiguration | RuleWithNoSecretsOptions
export type NoShadowConfiguration = RulePlainConfiguration | RuleWithNoShadowOptions
export type NoUnnecessaryConditionsConfiguration = RulePlainConfiguration | RuleWithNoUnnecessaryConditionsOptions
export type NoUnresolvedImportsConfiguration = RulePlainConfiguration | RuleWithNoUnresolvedImportsOptions
export type NoUselessUndefinedConfiguration = RulePlainConfiguration | RuleWithNoUselessUndefinedOptions
export type NoVueDataObjectDeclarationConfiguration = RulePlainConfiguration | RuleWithNoVueDataObjectDeclarationOptions
export type NoVueReservedKeysConfiguration = RulePlainConfiguration | RuleWithNoVueReservedKeysOptions
export type NoVueReservedPropsConfiguration = RulePlainConfiguration | RuleWithNoVueReservedPropsOptions
export type UseAnchorHrefConfiguration = RulePlainConfiguration | RuleWithUseAnchorHrefOptions
export type UseAnchorHrefOptions = null
export type UseConsistentTypeDefinitionsConfiguration =
  | RulePlainConfiguration
  | RuleWithUseConsistentTypeDefinitionsOptions
export type ConsistentTypeDefinition = 'interface' | 'type'
export type UseExhaustiveSwitchCasesConfiguration = RulePlainConfiguration | RuleWithUseExhaustiveSwitchCasesOptions
export type UseExplicitTypeConfiguration = RulePlainConfiguration | RuleWithUseExplicitTypeOptions
export type UseImageSizeConfiguration = RulePlainConfiguration | RuleWithUseImageSizeOptions
export type UseImageSizeOptions = null
export type UseMaxParamsConfiguration = RulePlainConfiguration | RuleWithUseMaxParamsOptions
export type UseQwikClasslistConfiguration = RulePlainConfiguration | RuleWithUseQwikClasslistOptions
export type UseReactFunctionComponentsConfiguration = RulePlainConfiguration | RuleWithUseReactFunctionComponentsOptions
export type UseSortedClassesConfiguration = RulePlainConfiguration | RuleWithUseSortedClassesOptions
export type SeverityOrGroupFor_Performance = GroupPlainConfiguration | Performance
export type NoAccumulatingSpreadConfiguration = RulePlainConfiguration | RuleWithNoAccumulatingSpreadOptions
export type NoAwaitInLoopsConfiguration = RulePlainConfiguration | RuleWithNoAwaitInLoopsOptions
export type NoBarrelFileConfiguration = RulePlainConfiguration | RuleWithNoBarrelFileOptions
export type NoDeleteConfiguration = RulePlainConfiguration | RuleWithNoDeleteOptions
export type NoDynamicNamespaceImportAccessConfiguration =
  | RulePlainConfiguration
  | RuleWithNoDynamicNamespaceImportAccessOptions
export type NoImgElementConfiguration = RulePlainConfiguration | RuleWithNoImgElementOptions
export type NoNamespaceImportConfiguration = RulePlainConfiguration | RuleWithNoNamespaceImportOptions
export type NoReExportAllConfiguration = RulePlainConfiguration | RuleWithNoReExportAllOptions
export type NoUnwantedPolyfillioConfiguration = RulePlainConfiguration | RuleWithNoUnwantedPolyfillioOptions
export type UseGoogleFontPreconnectConfiguration = RulePlainConfiguration | RuleWithUseGoogleFontPreconnectOptions
export type UseSolidForComponentConfiguration = RulePlainConfiguration | RuleWithUseSolidForComponentOptions
export type UseTopLevelRegexConfiguration = RulePlainConfiguration | RuleWithUseTopLevelRegexOptions
export type SeverityOrGroupFor_Security = GroupPlainConfiguration | Security
export type NoBlankTargetConfiguration = RulePlainConfiguration | RuleWithNoBlankTargetOptions
export type NoDangerouslySetInnerHtmlConfiguration = RulePlainConfiguration | RuleWithNoDangerouslySetInnerHtmlOptions
export type NoDangerouslySetInnerHtmlWithChildrenConfiguration =
  | RulePlainConfiguration
  | RuleWithNoDangerouslySetInnerHtmlWithChildrenOptions
export type NoGlobalEvalConfiguration = RulePlainConfiguration | RuleWithNoGlobalEvalOptions
export type SeverityOrGroupFor_Style = GroupPlainConfiguration | Style
export type NoCommonJsConfiguration = RulePlainConfiguration | RuleWithNoCommonJsOptions
export type NoDefaultExportConfiguration = RulePlainConfiguration | RuleWithNoDefaultExportOptions
export type NoDescendingSpecificityConfiguration = RulePlainConfiguration | RuleWithNoDescendingSpecificityOptions
export type NoDoneCallbackConfiguration = RulePlainConfiguration | RuleWithNoDoneCallbackOptions
export type NoEnumConfiguration = RulePlainConfiguration | RuleWithNoEnumOptions
export type NoExportedImportsConfiguration = RulePlainConfiguration | RuleWithNoExportedImportsOptions
export type NoHeadElementConfiguration = RulePlainConfiguration | RuleWithNoHeadElementOptions
export type NoImplicitBooleanConfiguration = RulePlainConfiguration | RuleWithNoImplicitBooleanOptions
export type NoInferrableTypesConfiguration = RulePlainConfiguration | RuleWithNoInferrableTypesOptions
export type NoMagicNumbersConfiguration = RulePlainConfiguration | RuleWithNoMagicNumbersOptions
export type NoNamespaceConfiguration = RulePlainConfiguration | RuleWithNoNamespaceOptions
export type NoNegationElseConfiguration = RulePlainConfiguration | RuleWithNoNegationElseOptions
export type NoNestedTernaryConfiguration = RulePlainConfiguration | RuleWithNoNestedTernaryOptions
export type NoNonNullAssertionConfiguration = RulePlainConfiguration | RuleWithNoNonNullAssertionOptions
export type NoParameterAssignConfiguration = RulePlainConfiguration | RuleWithNoParameterAssignOptions
/**
 * Specifies whether property assignments on function parameters are allowed or denied.
 */
export type PropertyAssignmentMode = 'allow' | 'deny'
export type NoParameterPropertiesConfiguration = RulePlainConfiguration | RuleWithNoParameterPropertiesOptions
export type NoProcessEnvConfiguration = RulePlainConfiguration | RuleWithNoProcessEnvOptions
export type NoRestrictedGlobalsConfiguration = RulePlainConfiguration | RuleWithNoRestrictedGlobalsOptions
export type NoRestrictedImportsConfiguration = RulePlainConfiguration | RuleWithNoRestrictedImportsOptions
export type Paths = string | PathOptions
export type Patterns = PatternOptions
export type Regex = string
export type NoRestrictedTypesConfiguration = RulePlainConfiguration | RuleWithNoRestrictedTypesOptions
export type CustomRestrictedType = string | CustomRestrictedTypeOptions
export type NoShoutyConstantsConfiguration = RulePlainConfiguration | RuleWithNoShoutyConstantsOptions
export type NoSubstrConfiguration = RulePlainConfiguration | RuleWithNoSubstrOptions
export type NoUnusedTemplateLiteralConfiguration = RulePlainConfiguration | RuleWithNoUnusedTemplateLiteralOptions
export type NoUselessElseConfiguration = RulePlainConfiguration | RuleWithNoUselessElseOptions
export type NoValueAtRuleConfiguration = RulePlainConfiguration | RuleWithNoValueAtRuleOptions
export type NoYodaExpressionConfiguration = RulePlainConfiguration | RuleWithNoYodaExpressionOptions
export type UseArrayLiteralsConfiguration = RulePlainConfiguration | RuleWithUseArrayLiteralsOptions
export type UseAsConstAssertionConfiguration = RulePlainConfiguration | RuleWithUseAsConstAssertionOptions
export type UseAtIndexConfiguration = RulePlainConfiguration | RuleWithUseAtIndexOptions
export type UseBlockStatementsConfiguration = RulePlainConfiguration | RuleWithUseBlockStatementsOptions
export type UseCollapsedElseIfConfiguration = RulePlainConfiguration | RuleWithUseCollapsedElseIfOptions
export type UseCollapsedIfConfiguration = RulePlainConfiguration | RuleWithUseCollapsedIfOptions
export type UseComponentExportOnlyModulesConfiguration =
  | RulePlainConfiguration
  | RuleWithUseComponentExportOnlyModulesOptions
export type UseConsistentArrayTypeConfiguration = RulePlainConfiguration | RuleWithUseConsistentArrayTypeOptions
export type ConsistentArrayType = 'shorthand' | 'generic'
export type UseConsistentBuiltinInstantiationConfiguration =
  | RulePlainConfiguration
  | RuleWithUseConsistentBuiltinInstantiationOptions
export type UseConsistentCurlyBracesConfiguration = RulePlainConfiguration | RuleWithUseConsistentCurlyBracesOptions
export type UseConsistentMemberAccessibilityConfiguration =
  | RulePlainConfiguration
  | RuleWithUseConsistentMemberAccessibilityOptions
export type Accessibility = 'noPublic' | 'explicit' | 'none'
export type UseConsistentObjectDefinitionsConfiguration =
  | RulePlainConfiguration
  | RuleWithUseConsistentObjectDefinitionsOptions
export type ObjectPropertySyntax = 'explicit' | 'shorthand'
export type UseConstConfiguration = RulePlainConfiguration | RuleWithUseConstOptions
export type UseDefaultParameterLastConfiguration = RulePlainConfiguration | RuleWithUseDefaultParameterLastOptions
export type UseDefaultSwitchClauseConfiguration = RulePlainConfiguration | RuleWithUseDefaultSwitchClauseOptions
export type UseDeprecatedReasonConfiguration = RulePlainConfiguration | RuleWithUseDeprecatedReasonOptions
export type UseEnumInitializersConfiguration = RulePlainConfiguration | RuleWithUseEnumInitializersOptions
export type UseExplicitLengthCheckConfiguration = RulePlainConfiguration | RuleWithUseExplicitLengthCheckOptions
export type UseExponentiationOperatorConfiguration = RulePlainConfiguration | RuleWithUseExponentiationOperatorOptions
export type UseExportTypeConfiguration = RulePlainConfiguration | RuleWithUseExportTypeOptions
export type UseExportsLastConfiguration = RulePlainConfiguration | RuleWithUseExportsLastOptions
export type UseFilenamingConventionConfiguration = RulePlainConfiguration | RuleWithUseFilenamingConventionOptions
/**
 * Supported cases for file names.
 */
export type FilenameCase = 'camelCase' | 'export' | 'kebab-case' | 'PascalCase' | 'snake_case'
export type FilenameCases = FilenameCase[]
export type UseForOfConfiguration = RulePlainConfiguration | RuleWithUseForOfOptions
export type UseFragmentSyntaxConfiguration = RulePlainConfiguration | RuleWithUseFragmentSyntaxOptions
export type UseGraphqlNamingConventionConfiguration = RulePlainConfiguration | RuleWithUseGraphqlNamingConventionOptions
export type UseGroupedAccessorPairsConfiguration = RulePlainConfiguration | RuleWithUseGroupedAccessorPairsOptions
export type UseImportTypeConfiguration = RulePlainConfiguration | RuleWithUseImportTypeOptions
/**
 * Rule's options.
 */
export type Style2 = 'auto' | 'inlineType' | 'separatedType'
export type UseLiteralEnumMembersConfiguration = RulePlainConfiguration | RuleWithUseLiteralEnumMembersOptions
export type UseNamingConventionConfiguration = RulePlainConfiguration | RuleWithUseNamingConventionOptions
/**
 * Supported cases.
 */
export type Format = 'camelCase' | 'CONSTANT_CASE' | 'PascalCase' | 'snake_case'
export type Formats = Format[]
export type Kind =
  | (
      | 'class'
      | 'enum'
      | 'interface'
      | 'enumMember'
      | 'importNamespace'
      | 'exportNamespace'
      | 'variable'
      | 'const'
      | 'let'
      | 'using'
      | 'var'
      | 'catchParameter'
      | 'indexParameter'
      | 'exportAlias'
      | 'importAlias'
      | 'classGetter'
      | 'classSetter'
      | 'classMethod'
      | 'objectLiteralProperty'
      | 'objectLiteralGetter'
      | 'objectLiteralSetter'
      | 'objectLiteralMethod'
      | 'typeAlias'
    )
  | 'any'
  | 'typeLike'
  | 'function'
  | 'namespaceLike'
  | 'namespace'
  | 'functionParameter'
  | 'typeParameter'
  | 'classMember'
  | 'classProperty'
  | 'objectLiteralMember'
  | 'typeMember'
  | 'typeGetter'
  | 'typeProperty'
  | 'typeSetter'
  | 'typeMethod'
export type RestrictedModifier = 'abstract' | 'private' | 'protected' | 'readonly' | 'static'
export type Modifiers = RestrictedModifier[]
export type Scope = 'any' | 'global'
export type UseNodeAssertStrictConfiguration = RulePlainConfiguration | RuleWithUseNodeAssertStrictOptions
export type UseNodejsImportProtocolConfiguration = RulePlainConfiguration | RuleWithUseNodejsImportProtocolOptions
export type UseNumberNamespaceConfiguration = RulePlainConfiguration | RuleWithUseNumberNamespaceOptions
export type UseNumericSeparatorsConfiguration = RulePlainConfiguration | RuleWithUseNumericSeparatorsOptions
export type UseObjectSpreadConfiguration = RulePlainConfiguration | RuleWithUseObjectSpreadOptions
export type UseReadonlyClassPropertiesConfiguration = RulePlainConfiguration | RuleWithUseReadonlyClassPropertiesOptions
export type UseSelfClosingElementsConfiguration = RulePlainConfiguration | RuleWithUseSelfClosingElementsOptions
export type UseShorthandAssignConfiguration = RulePlainConfiguration | RuleWithUseShorthandAssignOptions
export type UseShorthandFunctionTypeConfiguration = RulePlainConfiguration | RuleWithUseShorthandFunctionTypeOptions
export type UseSingleVarDeclaratorConfiguration = RulePlainConfiguration | RuleWithUseSingleVarDeclaratorOptions
export type UseSymbolDescriptionConfiguration = RulePlainConfiguration | RuleWithUseSymbolDescriptionOptions
export type UseTemplateConfiguration = RulePlainConfiguration | RuleWithUseTemplateOptions
export type UseThrowNewErrorConfiguration = RulePlainConfiguration | RuleWithUseThrowNewErrorOptions
export type UseThrowOnlyErrorConfiguration = RulePlainConfiguration | RuleWithUseThrowOnlyErrorOptions
export type UseTrimStartEndConfiguration = RulePlainConfiguration | RuleWithUseTrimStartEndOptions
export type UseUnifiedTypeSignaturesConfiguration = RulePlainConfiguration | RuleWithUseUnifiedTypeSignaturesOptions
export type SeverityOrGroupFor_Suspicious = GroupPlainConfiguration | Suspicious
export type NoAlertConfiguration = RulePlainConfiguration | RuleWithNoAlertOptions
export type NoApproximativeNumericConstantConfiguration =
  | RulePlainConfiguration
  | RuleWithNoApproximativeNumericConstantOptions
export type NoArrayIndexKeyConfiguration = RulePlainConfiguration | RuleWithNoArrayIndexKeyOptions
export type NoAssignInExpressionsConfiguration = RulePlainConfiguration | RuleWithNoAssignInExpressionsOptions
export type NoAsyncPromiseExecutorConfiguration = RulePlainConfiguration | RuleWithNoAsyncPromiseExecutorOptions
export type NoBiomeFirstExceptionConfiguration = RulePlainConfiguration | RuleWithNoBiomeFirstExceptionOptions
export type NoBitwiseOperatorsConfiguration = RulePlainConfiguration | RuleWithNoBitwiseOperatorsOptions
export type NoCatchAssignConfiguration = RulePlainConfiguration | RuleWithNoCatchAssignOptions
export type NoClassAssignConfiguration = RulePlainConfiguration | RuleWithNoClassAssignOptions
export type NoCommentTextConfiguration = RulePlainConfiguration | RuleWithNoCommentTextOptions
export type NoCompareNegZeroConfiguration = RulePlainConfiguration | RuleWithNoCompareNegZeroOptions
export type NoConfusingLabelsConfiguration = RulePlainConfiguration | RuleWithNoConfusingLabelsOptions
export type NoConfusingVoidTypeConfiguration = RulePlainConfiguration | RuleWithNoConfusingVoidTypeOptions
export type NoConsoleConfiguration = RulePlainConfiguration | RuleWithNoConsoleOptions
export type NoConstEnumConfiguration = RulePlainConfiguration | RuleWithNoConstEnumOptions
export type NoConstantBinaryExpressionsConfiguration =
  | RulePlainConfiguration
  | RuleWithNoConstantBinaryExpressionsOptions
export type NoControlCharactersInRegexConfiguration = RulePlainConfiguration | RuleWithNoControlCharactersInRegexOptions
export type NoDebuggerConfiguration = RulePlainConfiguration | RuleWithNoDebuggerOptions
export type NoDocumentCookieConfiguration = RulePlainConfiguration | RuleWithNoDocumentCookieOptions
export type NoDocumentImportInPageConfiguration = RulePlainConfiguration | RuleWithNoDocumentImportInPageOptions
export type NoDoubleEqualsConfiguration = RulePlainConfiguration | RuleWithNoDoubleEqualsOptions
export type NoDuplicateAtImportRulesConfiguration = RulePlainConfiguration | RuleWithNoDuplicateAtImportRulesOptions
export type NoDuplicateCaseConfiguration = RulePlainConfiguration | RuleWithNoDuplicateCaseOptions
export type NoDuplicateClassMembersConfiguration = RulePlainConfiguration | RuleWithNoDuplicateClassMembersOptions
export type NoDuplicateCustomPropertiesConfiguration =
  | RulePlainConfiguration
  | RuleWithNoDuplicateCustomPropertiesOptions
export type NoDuplicateElseIfConfiguration = RulePlainConfiguration | RuleWithNoDuplicateElseIfOptions
export type NoDuplicateFieldsConfiguration = RulePlainConfiguration | RuleWithNoDuplicateFieldsOptions
export type NoDuplicateFontNamesConfiguration = RulePlainConfiguration | RuleWithNoDuplicateFontNamesOptions
export type NoDuplicateJsxPropsConfiguration = RulePlainConfiguration | RuleWithNoDuplicateJsxPropsOptions
export type NoDuplicateObjectKeysConfiguration = RulePlainConfiguration | RuleWithNoDuplicateObjectKeysOptions
export type NoDuplicateParametersConfiguration = RulePlainConfiguration | RuleWithNoDuplicateParametersOptions
export type NoDuplicatePropertiesConfiguration = RulePlainConfiguration | RuleWithNoDuplicatePropertiesOptions
export type NoDuplicateSelectorsKeyframeBlockConfiguration =
  | RulePlainConfiguration
  | RuleWithNoDuplicateSelectorsKeyframeBlockOptions
export type NoDuplicateTestHooksConfiguration = RulePlainConfiguration | RuleWithNoDuplicateTestHooksOptions
export type NoEmptyBlockConfiguration = RulePlainConfiguration | RuleWithNoEmptyBlockOptions
export type NoEmptyBlockStatementsConfiguration = RulePlainConfiguration | RuleWithNoEmptyBlockStatementsOptions
export type NoEmptyInterfaceConfiguration = RulePlainConfiguration | RuleWithNoEmptyInterfaceOptions
export type NoEvolvingTypesConfiguration = RulePlainConfiguration | RuleWithNoEvolvingTypesOptions
export type NoExplicitAnyConfiguration = RulePlainConfiguration | RuleWithNoExplicitAnyOptions
export type NoExportsInTestConfiguration = RulePlainConfiguration | RuleWithNoExportsInTestOptions
export type NoExtraNonNullAssertionConfiguration = RulePlainConfiguration | RuleWithNoExtraNonNullAssertionOptions
export type NoFallthroughSwitchClauseConfiguration = RulePlainConfiguration | RuleWithNoFallthroughSwitchClauseOptions
export type NoFocusedTestsConfiguration = RulePlainConfiguration | RuleWithNoFocusedTestsOptions
export type NoFunctionAssignConfiguration = RulePlainConfiguration | RuleWithNoFunctionAssignOptions
export type NoGlobalAssignConfiguration = RulePlainConfiguration | RuleWithNoGlobalAssignOptions
export type NoGlobalIsFiniteConfiguration = RulePlainConfiguration | RuleWithNoGlobalIsFiniteOptions
export type NoGlobalIsNanConfiguration = RulePlainConfiguration | RuleWithNoGlobalIsNanOptions
export type NoHeadImportInDocumentConfiguration = RulePlainConfiguration | RuleWithNoHeadImportInDocumentOptions
export type NoImplicitAnyLetConfiguration = RulePlainConfiguration | RuleWithNoImplicitAnyLetOptions
export type NoImportAssignConfiguration = RulePlainConfiguration | RuleWithNoImportAssignOptions
export type NoImportantInKeyframeConfiguration = RulePlainConfiguration | RuleWithNoImportantInKeyframeOptions
export type NoIrregularWhitespaceConfiguration = RulePlainConfiguration | RuleWithNoIrregularWhitespaceOptions
export type NoLabelVarConfiguration = RulePlainConfiguration | RuleWithNoLabelVarOptions
export type NoMisleadingCharacterClassConfiguration = RulePlainConfiguration | RuleWithNoMisleadingCharacterClassOptions
export type NoMisleadingInstantiatorConfiguration = RulePlainConfiguration | RuleWithNoMisleadingInstantiatorOptions
export type NoMisplacedAssertionConfiguration = RulePlainConfiguration | RuleWithNoMisplacedAssertionOptions
export type NoMisrefactoredShorthandAssignConfiguration =
  | RulePlainConfiguration
  | RuleWithNoMisrefactoredShorthandAssignOptions
export type NoOctalEscapeConfiguration = RulePlainConfiguration | RuleWithNoOctalEscapeOptions
export type NoPrototypeBuiltinsConfiguration = RulePlainConfiguration | RuleWithNoPrototypeBuiltinsOptions
export type NoQuickfixBiomeConfiguration = RulePlainConfiguration | RuleWithNoQuickfixBiomeOptions
export type NoReactSpecificPropsConfiguration = RulePlainConfiguration | RuleWithNoReactSpecificPropsOptions
export type NoRedeclareConfiguration = RulePlainConfiguration | RuleWithNoRedeclareOptions
export type NoRedundantUseStrictConfiguration = RulePlainConfiguration | RuleWithNoRedundantUseStrictOptions
export type NoSelfCompareConfiguration = RulePlainConfiguration | RuleWithNoSelfCompareOptions
export type NoShadowRestrictedNamesConfiguration = RulePlainConfiguration | RuleWithNoShadowRestrictedNamesOptions
export type NoShorthandPropertyOverridesConfiguration =
  | RulePlainConfiguration
  | RuleWithNoShorthandPropertyOverridesOptions
export type NoSkippedTestsConfiguration = RulePlainConfiguration | RuleWithNoSkippedTestsOptions
export type NoSparseArrayConfiguration = RulePlainConfiguration | RuleWithNoSparseArrayOptions
export type NoSuspiciousSemicolonInJsxConfiguration = RulePlainConfiguration | RuleWithNoSuspiciousSemicolonInJsxOptions
export type NoTemplateCurlyInStringConfiguration = RulePlainConfiguration | RuleWithNoTemplateCurlyInStringOptions
export type NoThenPropertyConfiguration = RulePlainConfiguration | RuleWithNoThenPropertyOptions
export type NoTsIgnoreConfiguration = RulePlainConfiguration | RuleWithNoTsIgnoreOptions
export type NoUnassignedVariablesConfiguration = RulePlainConfiguration | RuleWithNoUnassignedVariablesOptions
export type NoUnknownAtRulesConfiguration = RulePlainConfiguration | RuleWithNoUnknownAtRulesOptions
export type NoUnsafeDeclarationMergingConfiguration = RulePlainConfiguration | RuleWithNoUnsafeDeclarationMergingOptions
export type NoUnsafeNegationConfiguration = RulePlainConfiguration | RuleWithNoUnsafeNegationOptions
export type NoUselessEscapeInStringConfiguration = RulePlainConfiguration | RuleWithNoUselessEscapeInStringOptions
export type NoUselessRegexBackrefsConfiguration = RulePlainConfiguration | RuleWithNoUselessRegexBackrefsOptions
export type NoVarConfiguration = RulePlainConfiguration | RuleWithNoVarOptions
export type NoWithConfiguration = RulePlainConfiguration | RuleWithNoWithOptions
export type UseAdjacentOverloadSignaturesConfiguration =
  | RulePlainConfiguration
  | RuleWithUseAdjacentOverloadSignaturesOptions
export type UseAwaitConfiguration = RulePlainConfiguration | RuleWithUseAwaitOptions
export type UseBiomeIgnoreFolderConfiguration = RulePlainConfiguration | RuleWithUseBiomeIgnoreFolderOptions
export type UseDefaultSwitchClauseLastConfiguration = RulePlainConfiguration | RuleWithUseDefaultSwitchClauseLastOptions
export type UseErrorMessageConfiguration = RulePlainConfiguration | RuleWithUseErrorMessageOptions
export type UseGetterReturnConfiguration = RulePlainConfiguration | RuleWithUseGetterReturnOptions
export type UseGoogleFontDisplayConfiguration = RulePlainConfiguration | RuleWithUseGoogleFontDisplayOptions
export type UseGuardForInConfiguration = RulePlainConfiguration | RuleWithUseGuardForInOptions
export type UseIsArrayConfiguration = RulePlainConfiguration | RuleWithUseIsArrayOptions
export type UseIterableCallbackReturnConfiguration = RulePlainConfiguration | RuleWithUseIterableCallbackReturnOptions
export type UseNamespaceKeywordConfiguration = RulePlainConfiguration | RuleWithUseNamespaceKeywordOptions
export type UseNumberToFixedDigitsArgumentConfiguration =
  | RulePlainConfiguration
  | RuleWithUseNumberToFixedDigitsArgumentOptions
export type UseStaticResponseMethodsConfiguration = RulePlainConfiguration | RuleWithUseStaticResponseMethodsOptions
export type UseStrictModeConfiguration = RulePlainConfiguration | RuleWithUseStrictModeOptions
export type OverrideGlobs = Glob[]
export type PluginConfiguration = string
export type Plugins = PluginConfiguration[]
export type Overrides = OverridePattern[]
export type VcsClientKind = 'git'

/**
 * The configuration that is contained inside the file `biome.json`
 */
export interface Configuration {
  /**
   * A field for the [JSON schema](https://json-schema.org/) specification
   */
  $schema?: Schema | null
  /**
   * Specific configuration for assists
   */
  assist?: AssistConfiguration | null
  /**
   * Specific configuration for the Css language
   */
  css?: CssConfiguration | null
  /**
   * A list of paths to other JSON files, used to extends the current configuration.
   */
  extends?: Extends | null
  /**
   * The configuration of the filesystem
   */
  files?: FilesConfiguration | null
  /**
   * The configuration of the formatter
   */
  formatter?: FormatterConfiguration | null
  /**
   * Specific configuration for the GraphQL language
   */
  graphql?: GraphqlConfiguration | null
  /**
   * Specific configuration for the GraphQL language
   */
  grit?: GritConfiguration | null
  /**
   * Specific configuration for the HTML language
   */
  html?: HtmlConfiguration | null
  /**
   * Specific configuration for the JavaScript language
   */
  javascript?: JsConfiguration | null
  /**
   * Specific configuration for the Json language
   */
  json?: JsonConfiguration | null
  /**
   * The configuration for the linter
   */
  linter?: LinterConfiguration | null
  /**
   * A list of granular patterns that should be applied only to a sub set of files
   */
  overrides?: Overrides | null
  /**
   * List of plugins to load.
   */
  plugins?: Plugins | null
  /**
   * Indicates whether this configuration file is at the root of a Biome project. By default, this is `true`.
   */
  root?: Bool | null
  /**
   * The configuration of the VCS integration
   */
  vcs?: VcsConfiguration | null
}
export interface AssistConfiguration {
  /**
   * Whether Biome should fail in CLI if the assist were not applied to the code.
   */
  actions?: Actions | null
  /**
   * Whether Biome should enable assist via LSP and CLI.
   */
  enabled?: Bool | null
  /**
   * A list of glob patterns. Biome will include files/folders that will match these patterns.
   */
  includes?: NormalizedGlob[] | null
}
export interface Actions {
  /**
   * It enables the assist actions recommended by Biome. `true` by default.
   */
  recommended?: boolean | null
  source?: Source | null
}
/**
 * A list of rules that belong to this group
 */
export interface Source {
  /**
   * Provides a code action to sort the imports and exports in the file using a built-in or custom order.
   */
  organizeImports?: RuleAssistConfigurationFor_OrganizeImportsOptions | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
  /**
   * Enforce attribute sorting in JSX elements.
   */
  useSortedAttributes?: RuleAssistConfigurationFor_UseSortedAttributesOptions | null
  /**
   * Sorts the keys of a JSON object in natural order
   */
  useSortedKeys?: RuleAssistConfigurationFor_UseSortedKeysOptions | null
  /**
   * Enforce ordering of CSS properties and nested rules.
   */
  useSortedProperties?: RuleAssistConfigurationFor_UseSortedPropertiesOptions | null
}
export interface RuleAssistWithOptionsFor_OrganizeImportsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RuleAssistPlainConfiguration
  /**
   * Rule's options
   */
  options: OrganizeImportsOptions
}
export interface OrganizeImportsOptions {
  groups?: ImportGroups
  identifierOrder?: SortOrder & string
}
export interface ImportMatcher {
  source?: SourcesMatcher | null
  type?: boolean | null
  [k: string]: unknown
}
export interface RuleAssistWithOptionsFor_UseSortedAttributesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RuleAssistPlainConfiguration
  /**
   * Rule's options
   */
  options: UseSortedAttributesOptions
}
export interface UseSortedAttributesOptions {
  sortOrder?: SortOrder & string
}
export interface RuleAssistWithOptionsFor_UseSortedKeysOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RuleAssistPlainConfiguration
  /**
   * Rule's options
   */
  options: UseSortedKeysOptions
}
export interface UseSortedKeysOptions {
  sortOrder?: SortOrder & string
}
export interface RuleAssistWithOptionsFor_UseSortedPropertiesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RuleAssistPlainConfiguration
  /**
   * Rule's options
   */
  options: UseSortedPropertiesOptions
}
export interface UseSortedPropertiesOptions {}
/**
 * Options applied to CSS files
 */
export interface CssConfiguration {
  /**
   * CSS assist options
   */
  assist?: CssAssistConfiguration | null
  /**
   * CSS formatter options
   */
  formatter?: CssFormatterConfiguration | null
  /**
   * CSS globals
   */
  globals?: string[] | null
  /**
   * CSS linter options
   */
  linter?: CssLinterConfiguration | null
  /**
   * CSS parsing options
   */
  parser?: CssParserConfiguration | null
}
/**
 * Options that changes how the CSS assist behaves
 */
export interface CssAssistConfiguration {
  /**
   * Control the assist for CSS files.
   */
  enabled?: Bool | null
}
/**
 * Options that changes how the CSS formatter behaves
 */
export interface CssFormatterConfiguration {
  /**
   * Control the formatter for CSS (and its super languages) files.
   */
  enabled?: Bool | null
  /**
   * The indent style applied to CSS (and its super languages) files.
   */
  indentStyle?: IndentStyle | null
  /**
   * The size of the indentation applied to CSS (and its super languages) files. Default to 2.
   */
  indentWidth?: IndentWidth | null
  /**
   * The type of line ending applied to CSS (and its super languages) files.
   */
  lineEnding?: LineEnding | null
  /**
   * What's the max width of a line applied to CSS (and its super languages) files. Defaults to 80.
   */
  lineWidth?: LineWidth | null
  /**
   * The type of quotes used in CSS code. Defaults to double.
   */
  quoteStyle?: QuoteStyle | null
}
/**
 * Options that changes how the CSS linter behaves
 */
export interface CssLinterConfiguration {
  /**
   * Control the linter for CSS files.
   */
  enabled?: Bool | null
}
/**
 * Options that changes how the CSS parser behaves
 */
export interface CssParserConfiguration {
  /**
   * Allow comments to appear on incorrect lines in `.css` files
   */
  allowWrongLineComments?: Bool | null
  /**
   * Enables parsing of CSS Modules specific features.
   */
  cssModules?: Bool | null
}
/**
 * The configuration of the filesystem
 */
export interface FilesConfiguration {
  /**
   * Set of file and folder names that should be unconditionally ignored by Biome's scanner.
   *
   * Biome maintains an internal list of default ignore entries, which is based on user feedback and which may change in any release. This setting allows overriding this internal list completely.
   *
   * This is considered an advanced feature that users _should_ not need to tweak themselves, but they can as a last resort. This setting can only be configured in root configurations, and is ignored in nested configs.
   *
   * Entries must be file or folder *names*. Specific paths and globs are not supported.
   *
   * Examples where this may be useful:
   *
   * ```jsonc { "files": { "experimentalScannerIgnores": [ // You almost certainly don't want to scan your `.git` // folder, which is why it's already ignored by default: ".git",
   *
   * // But the scanner does scan `node_modules` by default. If // you *really* don't want this, you can ignore it like // this: "node_modules",
   *
   * // But it's probably better to ignore a specific dependency. // For instance, one that happens to be particularly slow to // scan: "RedisCommander.d.ts", ], } } ```
   *
   * Please be aware that rules relying on the module graph or type inference information may be negatively affected if dependencies of your project aren't (fully) scanned.
   */
  experimentalScannerIgnores?: string[] | null
  /**
   * Tells Biome to not emit diagnostics when handling files that doesn't know
   */
  ignoreUnknown?: Bool | null
  /**
   * A list of glob patterns. Biome will handle only those files/folders that will match these patterns.
   */
  includes?: NormalizedGlob[] | null
  /**
   * The maximum allowed size for source code files in bytes. Files above this limit will be ignored for performance reasons. Defaults to 1 MiB
   */
  maxSize?: MaxSize | null
}
/**
 * Generic options applied to all files
 */
export interface FormatterConfiguration {
  /**
   * The attribute position style in HTML-ish languages. Defaults to auto.
   */
  attributePosition?: AttributePosition | null
  /**
   * Put the `>` of a multi-line HTML or JSX element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
   */
  bracketSameLine?: BracketSameLine | null
  /**
   * Whether to insert spaces around brackets in object literals. Defaults to true.
   */
  bracketSpacing?: BracketSpacing | null
  enabled?: Bool | null
  /**
   * Whether to expand arrays and objects on multiple lines. When set to `auto`, object literals are formatted on multiple lines if the first property has a newline, and array literals are formatted on a single line if it fits in the line. When set to `always`, these literals are formatted on multiple lines, regardless of length of the list. When set to `never`, these literals are formatted on a single line if it fits in the line. When formatting `package.json`, Biome will use `always` unless configured otherwise. Defaults to "auto".
   */
  expand?: Expand | null
  /**
   * Stores whether formatting should be allowed to proceed if a given file has syntax errors
   */
  formatWithErrors?: Bool | null
  /**
   * A list of glob patterns. The formatter will include files/folders that will match these patterns.
   */
  includes?: NormalizedGlob[] | null
  /**
   * The indent style.
   */
  indentStyle?: IndentStyle | null
  /**
   * The size of the indentation, 2 by default
   */
  indentWidth?: IndentWidth | null
  /**
   * The type of line ending.
   */
  lineEnding?: LineEnding | null
  /**
   * What's the max width of a line. Defaults to 80.
   */
  lineWidth?: LineWidth | null
  /**
   * Use any `.editorconfig` files to configure the formatter. Configuration in `biome.json` will override `.editorconfig` configuration.
   *
   * Default: `true`.
   */
  useEditorconfig?: Bool | null
}
/**
 * Options applied to GraphQL files
 */
export interface GraphqlConfiguration {
  /**
   * Assist options
   */
  assist?: GraphqlAssistConfiguration | null
  /**
   * GraphQL formatter options
   */
  formatter?: GraphqlFormatterConfiguration | null
  linter?: GraphqlLinterConfiguration | null
}
/**
 * Options that changes how the GraphQL linter behaves
 */
export interface GraphqlAssistConfiguration {
  /**
   * Control the formatter for GraphQL files.
   */
  enabled?: Bool | null
}
/**
 * Options that changes how the GraphQL formatter behaves
 */
export interface GraphqlFormatterConfiguration {
  /**
   * Whether to insert spaces around brackets in object literals. Defaults to true.
   */
  bracketSpacing?: BracketSpacing | null
  /**
   * Control the formatter for GraphQL files.
   */
  enabled?: Bool | null
  /**
   * The indent style applied to GraphQL files.
   */
  indentStyle?: IndentStyle | null
  /**
   * The size of the indentation applied to GraphQL files. Default to 2.
   */
  indentWidth?: IndentWidth | null
  /**
   * The type of line ending applied to GraphQL files.
   */
  lineEnding?: LineEnding | null
  /**
   * What's the max width of a line applied to GraphQL files. Defaults to 80.
   */
  lineWidth?: LineWidth | null
  /**
   * The type of quotes used in GraphQL code. Defaults to double.
   */
  quoteStyle?: QuoteStyle | null
}
/**
 * Options that change how the GraphQL linter behaves.
 */
export interface GraphqlLinterConfiguration {
  /**
   * Control the formatter for GraphQL files.
   */
  enabled?: Bool | null
}
/**
 * Options applied to GritQL files
 */
export interface GritConfiguration {
  /**
   * Assist options
   */
  assist?: GritAssistConfiguration | null
  /**
   * Formatting options
   */
  formatter?: GritFormatterConfiguration | null
  /**
   * Formatting options
   */
  linter?: GritLinterConfiguration | null
}
export interface GritAssistConfiguration {
  /**
   * Control the assist functionality for Grit files.
   */
  enabled?: Bool | null
}
export interface GritFormatterConfiguration {
  /**
   * Control the formatter for Grit files.
   */
  enabled?: Bool | null
  /**
   * The indent style applied to Grit files.
   */
  indentStyle?: IndentStyle | null
  /**
   * The size of the indentation applied to Grit files. Default to 2.
   */
  indentWidth?: IndentWidth | null
  /**
   * The type of line ending applied to Grit files.
   */
  lineEnding?: LineEnding | null
  /**
   * What's the max width of a line applied to Grit files. Defaults to 80.
   */
  lineWidth?: LineWidth | null
}
export interface GritLinterConfiguration {
  /**
   * Control the linter for Grit files.
   */
  enabled?: Bool | null
}
/**
 * Options applied to HTML files
 */
export interface HtmlConfiguration {
  /**
   * HTML formatter options
   */
  formatter?: HtmlFormatterConfiguration | null
  /**
   * HTML parsing options
   */
  parser?: HtmlParserConfiguration | null
}
/**
 * Options that changes how the HTML formatter behaves
 */
export interface HtmlFormatterConfiguration {
  /**
   * The attribute position style in HTML elements. Defaults to auto.
   */
  attributePosition?: AttributePosition | null
  /**
   * Whether to hug the closing bracket of multiline HTML tags to the end of the last line, rather than being alone on the following line. Defaults to false.
   */
  bracketSameLine?: BracketSameLine | null
  /**
   * Control the formatter for HTML (and its super languages) files.
   */
  enabled?: Bool | null
  /**
   * Whether to indent the `<script>` and `<style>` tags for HTML (and its super languages). Defaults to false.
   */
  indentScriptAndStyle?: IndentScriptAndStyle | null
  /**
   * The indent style applied to HTML (and its super languages) files.
   */
  indentStyle?: IndentStyle | null
  /**
   * The size of the indentation applied to HTML (and its super languages) files. Default to 2.
   */
  indentWidth?: IndentWidth | null
  /**
   * The type of line ending applied to HTML (and its super languages) files.
   */
  lineEnding?: LineEnding | null
  /**
   * What's the max width of a line applied to HTML (and its super languages) files. Defaults to 80.
   */
  lineWidth?: LineWidth | null
  /**
   * Whether void elements should be self-closed. Defaults to never.
   */
  selfCloseVoidElements?: SelfCloseVoidElements | null
  /**
   * Whether to account for whitespace sensitivity when formatting HTML (and its super languages). Defaults to "css".
   */
  whitespaceSensitivity?: WhitespaceSensitivity | null
}
/**
 * Options that changes how the HTML parser behaves
 */
export interface HtmlParserConfiguration {
  /**
   * Enables the parsing of double text expressions such as `{{ expression }}` inside `.html` files
   */
  interpolation?: Bool | null
}
/**
 * A set of options applied to the JavaScript files
 */
export interface JsConfiguration {
  /**
   * Assist options
   */
  assist?: JsAssistConfiguration | null
  /**
   * Formatting options
   */
  formatter?: JsFormatterConfiguration | null
  /**
   * A list of global bindings that should be ignored by the analyzers
   *
   * If defined here, they should not emit diagnostics.
   */
  globals?: string[] | null
  /**
   * Indicates the type of runtime or transformation used for interpreting JSX.
   */
  jsxRuntime?: JsxRuntime | null
  /**
   * Linter options
   */
  linter?: JsLinterConfiguration | null
  /**
   * Parsing options
   */
  parser?: JsParserConfiguration | null
}
/**
 * Assist options specific to the JavaScript assist
 */
export interface JsAssistConfiguration {
  /**
   * Control the assist for JavaScript (and its super languages) files.
   */
  enabled?: Bool | null
}
/**
 * Formatting options specific to the JavaScript files
 */
export interface JsFormatterConfiguration {
  /**
   * Whether to add non-necessary parentheses to arrow functions. Defaults to "always".
   */
  arrowParentheses?: ArrowParentheses | null
  /**
   * The attribute position style in JSX elements. Defaults to auto.
   */
  attributePosition?: AttributePosition | null
  /**
   * Whether to hug the closing bracket of multiline HTML/JSX tags to the end of the last line, rather than being alone on the following line. Defaults to false.
   */
  bracketSameLine?: BracketSameLine | null
  /**
   * Whether to insert spaces around brackets in object literals. Defaults to true.
   */
  bracketSpacing?: BracketSpacing | null
  /**
   * Control the formatter for JavaScript (and its super languages) files.
   */
  enabled?: Bool | null
  /**
   * Whether to expand arrays and objects on multiple lines. When set to `auto`, object literals are formatted on multiple lines if the first property has a newline, and array literals are formatted on a single line if it fits in the line. When set to `always`, these literals are formatted on multiple lines, regardless of length of the list. When set to `never`, these literals are formatted on a single line if it fits in the line. When formatting `package.json`, Biome will use `always` unless configured otherwise. Defaults to "auto".
   */
  expand?: Expand | null
  /**
   * The indent style applied to JavaScript (and its super languages) files.
   */
  indentStyle?: IndentStyle | null
  /**
   * The size of the indentation applied to JavaScript (and its super languages) files. Default to 2.
   */
  indentWidth?: IndentWidth | null
  /**
   * The type of quotes used in JSX. Defaults to double.
   */
  jsxQuoteStyle?: QuoteStyle | null
  /**
   * The type of line ending applied to JavaScript (and its super languages) files.
   */
  lineEnding?: LineEnding | null
  /**
   * What's the max width of a line applied to JavaScript (and its super languages) files. Defaults to 80.
   */
  lineWidth?: LineWidth | null
  /**
   * When breaking binary expressions into multiple lines, whether to break them before or after the binary operator. Defaults to "after".
   */
  operatorLinebreak?: OperatorLinebreak | null
  /**
   * When properties in objects are quoted. Defaults to asNeeded.
   */
  quoteProperties?: QuoteProperties | null
  /**
   * The type of quotes used in JavaScript code. Defaults to double.
   */
  quoteStyle?: QuoteStyle | null
  /**
   * Whether the formatter prints semicolons for all statements or only in for statements where it is necessary because of ASI.
   */
  semicolons?: Semicolons | null
  /**
   * Print trailing commas wherever possible in multi-line comma-separated syntactic structures. Defaults to "all".
   */
  trailingCommas?: TrailingCommas | null
}
/**
 * Linter options specific to the JavaScript linter
 */
export interface JsLinterConfiguration {
  /**
   * Control the linter for JavaScript (and its super languages) files.
   */
  enabled?: Bool | null
}
/**
 * Options that changes how the JavaScript parser behaves
 */
export interface JsParserConfiguration {
  /**
   * Enables parsing of Grit metavariables. Defaults to `false`.
   */
  gritMetavariables?: Bool | null
  /**
   * When enabled, files like `.js`/`.mjs`/`.cjs` may contain JSX syntax.
   *
   * Defaults to `true`.
   */
  jsxEverywhere?: Bool | null
  /**
   * It enables the experimental and unsafe parsing of parameter decorators
   *
   * These decorators belong to an old proposal, and they are subject to change.
   */
  unsafeParameterDecoratorsEnabled?: Bool | null
}
/**
 * Options applied to JSON files
 */
export interface JsonConfiguration {
  /**
   * Assist options
   */
  assist?: JsonAssistConfiguration | null
  /**
   * Formatting options
   */
  formatter?: JsonFormatterConfiguration | null
  /**
   * Linting options
   */
  linter?: JsonLinterConfiguration | null
  /**
   * Parsing options
   */
  parser?: JsonParserConfiguration | null
}
/**
 * Linter options specific to the JSON linter
 */
export interface JsonAssistConfiguration {
  /**
   * Control the assist for JSON (and its super languages) files.
   */
  enabled?: Bool | null
}
export interface JsonFormatterConfiguration {
  /**
   * Whether to insert spaces around brackets in object literals. Defaults to true.
   */
  bracketSpacing?: BracketSpacing | null
  /**
   * Control the formatter for JSON (and its super languages) files.
   */
  enabled?: Bool | null
  /**
   * Whether to expand arrays and objects on multiple lines. When set to `auto`, object literals are formatted on multiple lines if the first property has a newline, and array literals are formatted on a single line if it fits in the line. When set to `always`, these literals are formatted on multiple lines, regardless of length of the list. When set to `never`, these literals are formatted on a single line if it fits in the line. When formatting `package.json`, Biome will use `always` unless configured otherwise. Defaults to "auto".
   */
  expand?: Expand | null
  /**
   * The indent style applied to JSON (and its super languages) files.
   */
  indentStyle?: IndentStyle | null
  /**
   * The size of the indentation applied to JSON (and its super languages) files. Default to 2.
   */
  indentWidth?: IndentWidth | null
  /**
   * The type of line ending applied to JSON (and its super languages) files.
   */
  lineEnding?: LineEnding | null
  /**
   * What's the max width of a line applied to JSON (and its super languages) files. Defaults to 80.
   */
  lineWidth?: LineWidth | null
  /**
   * Print trailing commas wherever possible in multi-line comma-separated syntactic structures. Defaults to "none".
   */
  trailingCommas?: TrailingCommas2 | null
}
/**
 * Linter options specific to the JSON linter
 */
export interface JsonLinterConfiguration {
  /**
   * Control the linter for JSON (and its super languages) files.
   */
  enabled?: Bool | null
}
/**
 * Options that changes how the JSON parser behaves
 */
export interface JsonParserConfiguration {
  /**
   * Allow parsing comments in `.json` files
   */
  allowComments?: Bool | null
  /**
   * Allow parsing trailing commas in `.json` files
   */
  allowTrailingCommas?: Bool | null
}
export interface LinterConfiguration {
  /**
   * An object where the keys are the names of the domains, and the values are `all`, `recommended`, or `none`.
   */
  domains?: RuleDomains | null
  /**
   * if `false`, it disables the feature and the linter won't be executed. `true` by default
   */
  enabled?: Bool | null
  /**
   * A list of glob patterns. The analyzer will handle only those files/folders that will match these patterns.
   */
  includes?: NormalizedGlob[] | null
  /**
   * List of rules
   */
  rules?: Rules | null
}
export interface RuleDomains {
  [k: string]: RuleDomainValue
}
export interface Rules {
  a11y?: SeverityOrGroupFor_A11Y | null
  complexity?: SeverityOrGroupFor_Complexity | null
  correctness?: SeverityOrGroupFor_Correctness | null
  nursery?: SeverityOrGroupFor_Nursery | null
  performance?: SeverityOrGroupFor_Performance | null
  /**
   * It enables the lint rules recommended by Biome. `true` by default.
   */
  recommended?: boolean | null
  security?: SeverityOrGroupFor_Security | null
  style?: SeverityOrGroupFor_Style | null
  suspicious?: SeverityOrGroupFor_Suspicious | null
}
/**
 * A list of rules that belong to this group
 */
export interface A11Y {
  /**
   * Enforce that the accessKey attribute is not used on any HTML element.
   */
  noAccessKey?: NoAccessKeyConfiguration | null
  /**
   * Enforce that aria-hidden="true" is not set on focusable elements.
   */
  noAriaHiddenOnFocusable?: NoAriaHiddenOnFocusableConfiguration | null
  /**
   * Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.
   */
  noAriaUnsupportedElements?: NoAriaUnsupportedElementsConfiguration | null
  /**
   * Enforce that autoFocus prop is not used on elements.
   */
  noAutofocus?: NoAutofocusConfiguration | null
  /**
   * Enforces that no distracting elements are used.
   */
  noDistractingElements?: NoDistractingElementsConfiguration | null
  /**
   * The scope prop should be used only on \<th> elements.
   */
  noHeaderScope?: NoHeaderScopeConfiguration | null
  /**
   * Enforce that non-interactive ARIA roles are not assigned to interactive HTML elements.
   */
  noInteractiveElementToNoninteractiveRole?: NoInteractiveElementToNoninteractiveRoleConfiguration | null
  /**
   * Enforce that a label element or component has a text label and an associated input.
   */
  noLabelWithoutControl?: NoLabelWithoutControlConfiguration | null
  /**
   * Disallow use event handlers on non-interactive elements.
   */
  noNoninteractiveElementInteractions?: NoNoninteractiveElementInteractionsConfiguration | null
  /**
   * Enforce that interactive ARIA roles are not assigned to non-interactive HTML elements.
   */
  noNoninteractiveElementToInteractiveRole?: NoNoninteractiveElementToInteractiveRoleConfiguration | null
  /**
   * Enforce that tabIndex is not assigned to non-interactive HTML elements.
   */
  noNoninteractiveTabindex?: NoNoninteractiveTabindexConfiguration | null
  /**
   * Prevent the usage of positive integers on tabIndex property
   */
  noPositiveTabindex?: NoPositiveTabindexConfiguration | null
  /**
   * Enforce img alt prop does not contain the word "image", "picture", or "photo".
   */
  noRedundantAlt?: NoRedundantAltConfiguration | null
  /**
   * Enforce explicit role property is not the same as implicit/default role property on an element.
   */
  noRedundantRoles?: NoRedundantRolesConfiguration | null
  /**
   * Enforce that static, visible elements (such as \<div>) that have click handlers use the valid role attribute.
   */
  noStaticElementInteractions?: NoStaticElementInteractionsConfiguration | null
  /**
   * Enforces the usage of the title element for the svg element.
   */
  noSvgWithoutTitle?: NoSvgWithoutTitleConfiguration | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
  /**
   * Enforce that all elements that require alternative text have meaningful information to relay back to the end user.
   */
  useAltText?: UseAltTextConfiguration | null
  /**
   * Enforce that anchors have content and that the content is accessible to screen readers.
   */
  useAnchorContent?: UseAnchorContentConfiguration | null
  /**
   * Enforce that tabIndex is assigned to non-interactive HTML elements with aria-activedescendant.
   */
  useAriaActivedescendantWithTabindex?: UseAriaActivedescendantWithTabindexConfiguration | null
  /**
   * Enforce that elements with ARIA roles must have all required ARIA attributes for that role.
   */
  useAriaPropsForRole?: UseAriaPropsForRoleConfiguration | null
  /**
   * Enforce that ARIA properties are valid for the roles that are supported by the element.
   */
  useAriaPropsSupportedByRole?: UseAriaPropsSupportedByRoleConfiguration | null
  /**
   * Enforces the usage of the attribute type for the element button
   */
  useButtonType?: UseButtonTypeConfiguration | null
  /**
   * Elements with an interactive role and interaction handlers must be focusable.
   */
  useFocusableInteractive?: UseFocusableInteractiveConfiguration | null
  /**
   * Disallow a missing generic family keyword within font families.
   */
  useGenericFontNames?: UseGenericFontNamesConfiguration | null
  /**
   * Enforce that heading elements (h1, h2, etc.) have content and that the content is accessible to screen readers. Accessible means that it is not hidden using the aria-hidden prop.
   */
  useHeadingContent?: UseHeadingContentConfiguration | null
  /**
   * Enforce that html element has lang attribute.
   */
  useHtmlLang?: UseHtmlLangConfiguration | null
  /**
   * Enforces the usage of the attribute title for the element iframe.
   */
  useIframeTitle?: UseIframeTitleConfiguration | null
  /**
   * Enforce onClick is accompanied by at least one of the following: onKeyUp, onKeyDown, onKeyPress.
   */
  useKeyWithClickEvents?: UseKeyWithClickEventsConfiguration | null
  /**
   * Enforce onMouseOver / onMouseOut are accompanied by onFocus / onBlur.
   */
  useKeyWithMouseEvents?: UseKeyWithMouseEventsConfiguration | null
  /**
   * Enforces that audio and video elements must have a track for captions.
   */
  useMediaCaption?: UseMediaCaptionConfiguration | null
  /**
   * It detects the use of role attributes in JSX elements and suggests using semantic elements instead.
   */
  useSemanticElements?: UseSemanticElementsConfiguration | null
  /**
   * Enforce that all anchors are valid, and they are navigable elements.
   */
  useValidAnchor?: UseValidAnchorConfiguration | null
  /**
   * Ensures that ARIA properties aria-* are all valid.
   */
  useValidAriaProps?: UseValidAriaPropsConfiguration | null
  /**
   * Elements with ARIA roles must use a valid, non-abstract ARIA role.
   */
  useValidAriaRole?: UseValidAriaRoleConfiguration | null
  /**
   * Enforce that ARIA state and property values are valid.
   */
  useValidAriaValues?: UseValidAriaValuesConfiguration | null
  /**
   * Use valid values for the autocomplete attribute on input elements.
   */
  useValidAutocomplete?: UseValidAutocompleteConfiguration | null
  /**
   * Ensure that the attribute passed to the lang attribute is a correct ISO language and/or country.
   */
  useValidLang?: UseValidLangConfiguration | null
}
export interface RuleWithNoAccessKeyOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoAccessKeyOptions
}
export interface NoAccessKeyOptions {}
export interface RuleWithNoAriaHiddenOnFocusableOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoAriaHiddenOnFocusableOptions
}
export interface NoAriaHiddenOnFocusableOptions {}
export interface RuleWithNoAriaUnsupportedElementsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoAriaUnsupportedElementsOptions
}
export interface NoAriaUnsupportedElementsOptions {}
export interface RuleWithNoAutofocusOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoAutofocusOptions
}
export interface NoAutofocusOptions {}
export interface RuleWithNoDistractingElementsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDistractingElementsOptions
}
export interface NoDistractingElementsOptions {}
export interface RuleWithNoHeaderScopeOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoHeaderScopeOptions
}
export interface NoHeaderScopeOptions {}
export interface RuleWithNoInteractiveElementToNoninteractiveRoleOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoInteractiveElementToNoninteractiveRoleOptions
}
export interface NoInteractiveElementToNoninteractiveRoleOptions {}
export interface RuleWithNoLabelWithoutControlOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoLabelWithoutControlOptions
}
export interface NoLabelWithoutControlOptions {
  /**
   * Array of component names that should be considered the same as an `input` element.
   */
  inputComponents?: string[]
  /**
   * Array of attributes that should be treated as the `label` accessible text content.
   */
  labelAttributes?: string[]
  /**
   * Array of component names that should be considered the same as a `label` element.
   */
  labelComponents?: string[]
}
export interface RuleWithNoNoninteractiveElementInteractionsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoNoninteractiveElementInteractionsOptions
}
export interface NoNoninteractiveElementInteractionsOptions {}
export interface RuleWithNoNoninteractiveElementToInteractiveRoleOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoNoninteractiveElementToInteractiveRoleOptions
}
export interface NoNoninteractiveElementToInteractiveRoleOptions {}
export interface RuleWithNoNoninteractiveTabindexOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoNoninteractiveTabindexOptions
}
export interface NoNoninteractiveTabindexOptions {}
export interface RuleWithNoPositiveTabindexOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoPositiveTabindexOptions
}
export interface NoPositiveTabindexOptions {}
export interface RuleWithNoRedundantAltOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoRedundantAltOptions
}
export interface NoRedundantAltOptions {}
export interface RuleWithNoRedundantRolesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoRedundantRolesOptions
}
export interface NoRedundantRolesOptions {}
export interface RuleWithNoStaticElementInteractionsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoStaticElementInteractionsOptions
}
export interface NoStaticElementInteractionsOptions {}
export interface RuleWithNoSvgWithoutTitleOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoSvgWithoutTitleOptions
}
export interface NoSvgWithoutTitleOptions {}
export interface RuleWithUseAltTextOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseAltTextOptions
}
export interface UseAltTextOptions {}
export interface RuleWithUseAnchorContentOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseAnchorContentOptions
}
export interface UseAnchorContentOptions {}
export interface RuleWithUseAriaActivedescendantWithTabindexOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseAriaActivedescendantWithTabindexOptions
}
export interface UseAriaActivedescendantWithTabindexOptions {}
export interface RuleWithUseAriaPropsForRoleOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseAriaPropsForRoleOptions
}
export interface UseAriaPropsForRoleOptions {}
export interface RuleWithUseAriaPropsSupportedByRoleOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseAriaPropsSupportedByRoleOptions
}
export interface UseAriaPropsSupportedByRoleOptions {}
export interface RuleWithUseButtonTypeOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseButtonTypeOptions
}
export interface UseButtonTypeOptions {}
export interface RuleWithUseFocusableInteractiveOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseFocusableInteractiveOptions
}
export interface UseFocusableInteractiveOptions {}
export interface RuleWithUseGenericFontNamesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseGenericFontNamesOptions
}
export interface UseGenericFontNamesOptions {}
export interface RuleWithUseHeadingContentOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseHeadingContentOptions
}
export interface UseHeadingContentOptions {}
export interface RuleWithUseHtmlLangOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseHtmlLangOptions
}
export interface UseHtmlLangOptions {}
export interface RuleWithUseIframeTitleOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseIframeTitleOptions
}
export interface UseIframeTitleOptions {}
export interface RuleWithUseKeyWithClickEventsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseKeyWithClickEventsOptions
}
export interface UseKeyWithClickEventsOptions {}
export interface RuleWithUseKeyWithMouseEventsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseKeyWithMouseEventsOptions
}
export interface UseKeyWithMouseEventsOptions {}
export interface RuleWithUseMediaCaptionOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseMediaCaptionOptions
}
export interface UseMediaCaptionOptions {}
export interface RuleWithUseSemanticElementsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseSemanticElementsOptions
}
export interface UseSemanticElementsOptions {}
export interface RuleWithUseValidAnchorOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseValidAnchorOptions
}
export interface UseValidAnchorOptions {}
export interface RuleWithUseValidAriaPropsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseValidAriaPropsOptions
}
export interface UseValidAriaPropsOptions {}
export interface RuleWithUseValidAriaRoleOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseValidAriaRoleOptions
}
export interface UseValidAriaRoleOptions {
  /**
   * It allows specifying a list of roles that might be invalid otherwise
   */
  allowInvalidRoles?: string[]
  /**
   * Use this option to ignore non-DOM elements, such as custom components
   */
  ignoreNonDom?: boolean
}
export interface RuleWithUseValidAriaValuesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseValidAriaValuesOptions
}
export interface UseValidAriaValuesOptions {}
export interface RuleWithUseValidAutocompleteOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseValidAutocompleteOptions
}
export interface UseValidAutocompleteOptions {
  /**
   * `input` like custom components that should be checked.
   */
  inputComponents?: string[]
}
export interface RuleWithUseValidLangOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseValidLangOptions
}
export interface UseValidLangOptions {}
/**
 * A list of rules that belong to this group
 */
export interface Complexity {
  /**
   * Disallow unclear usage of consecutive space characters in regular expression literals
   */
  noAdjacentSpacesInRegex?: NoAdjacentSpacesInRegexConfiguration | null
  /**
   * Disallow the use of arguments.
   */
  noArguments?: NoArgumentsConfiguration | null
  /**
   * Disallow primitive type aliases and misleading types.
   */
  noBannedTypes?: NoBannedTypesConfiguration | null
  /**
   * Disallow comma operator.
   */
  noCommaOperator?: NoCommaOperatorConfiguration | null
  /**
   * Disallow empty type parameters in type aliases and interfaces.
   */
  noEmptyTypeParameters?: NoEmptyTypeParametersConfiguration | null
  /**
   * Disallow functions that exceed a given Cognitive Complexity score.
   */
  noExcessiveCognitiveComplexity?: NoExcessiveCognitiveComplexityConfiguration | null
  /**
   * Restrict the number of lines of code in a function.
   */
  noExcessiveLinesPerFunction?: NoExcessiveLinesPerFunctionConfiguration | null
  /**
   * This rule enforces a maximum depth to nested describe() in test files.
   */
  noExcessiveNestedTestSuites?: NoExcessiveNestedTestSuitesConfiguration | null
  /**
   * Disallow unnecessary boolean casts
   */
  noExtraBooleanCast?: NoExtraBooleanCastConfiguration | null
  /**
   * Disallow to use unnecessary callback on flatMap.
   */
  noFlatMapIdentity?: NoFlatMapIdentityConfiguration | null
  /**
   * Prefer for...of statement instead of Array.forEach.
   */
  noForEach?: NoForEachConfiguration | null
  /**
   * Disallow shorthand type conversions.
   */
  noImplicitCoercions?: NoImplicitCoercionsConfiguration | null
  /**
   * Disallow the use of the !important style.
   */
  noImportantStyles?: NoImportantStylesConfiguration | null
  /**
   * This rule reports when a class has no non-static members, such as for a class used exclusively as a static namespace.
   */
  noStaticOnlyClass?: NoStaticOnlyClassConfiguration | null
  /**
   * Disallow this and super in static contexts.
   */
  noThisInStatic?: NoThisInStaticConfiguration | null
  /**
   * Disallow unnecessary catch clauses.
   */
  noUselessCatch?: NoUselessCatchConfiguration | null
  /**
   * Disallow unnecessary constructors.
   */
  noUselessConstructor?: NoUselessConstructorConfiguration | null
  /**
   * Avoid using unnecessary continue.
   */
  noUselessContinue?: NoUselessContinueConfiguration | null
  /**
   * Disallow empty exports that don't change anything in a module file.
   */
  noUselessEmptyExport?: NoUselessEmptyExportConfiguration | null
  /**
   * Disallow unnecessary escape sequence in regular expression literals.
   */
  noUselessEscapeInRegex?: NoUselessEscapeInRegexConfiguration | null
  /**
   * Disallow unnecessary fragments
   */
  noUselessFragments?: NoUselessFragmentsConfiguration | null
  /**
   * Disallow unnecessary labels.
   */
  noUselessLabel?: NoUselessLabelConfiguration | null
  /**
   * Disallow unnecessary nested block statements.
   */
  noUselessLoneBlockStatements?: NoUselessLoneBlockStatementsConfiguration | null
  /**
   * Disallow renaming import, export, and destructured assignments to the same name.
   */
  noUselessRename?: NoUselessRenameConfiguration | null
  /**
   * Disallow unnecessary concatenation of string or template literals.
   */
  noUselessStringConcat?: NoUselessStringConcatConfiguration | null
  /**
   * Disallow unnecessary String.raw function in template string literals without any escape sequence.
   */
  noUselessStringRaw?: NoUselessStringRawConfiguration | null
  /**
   * Disallow useless case in switch statements.
   */
  noUselessSwitchCase?: NoUselessSwitchCaseConfiguration | null
  /**
   * Disallow ternary operators when simpler alternatives exist.
   */
  noUselessTernary?: NoUselessTernaryConfiguration | null
  /**
   * Disallow useless this aliasing.
   */
  noUselessThisAlias?: NoUselessThisAliasConfiguration | null
  /**
   * Disallow using any or unknown as type constraint.
   */
  noUselessTypeConstraint?: NoUselessTypeConstraintConfiguration | null
  /**
   * Disallow initializing variables to undefined.
   */
  noUselessUndefinedInitialization?: NoUselessUndefinedInitializationConfiguration | null
  /**
   * Disallow the use of void operators, which is not a familiar operator.
   */
  noVoid?: NoVoidConfiguration | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
  /**
   * Use arrow functions over function expressions.
   */
  useArrowFunction?: UseArrowFunctionConfiguration | null
  /**
   * Use Date.now() to get the number of milliseconds since the Unix Epoch.
   */
  useDateNow?: UseDateNowConfiguration | null
  /**
   * Promotes the use of .flatMap() when map().flat() are used together.
   */
  useFlatMap?: UseFlatMapConfiguration | null
  /**
   * Prefer Array#{indexOf,lastIndexOf}() over Array#{findIndex,findLastIndex}() when looking for the index of an item.
   */
  useIndexOf?: UseIndexOfConfiguration | null
  /**
   * Enforce the usage of a literal access to properties over computed property access.
   */
  useLiteralKeys?: UseLiteralKeysConfiguration | null
  /**
   * Disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals
   */
  useNumericLiterals?: UseNumericLiteralsConfiguration | null
  /**
   * Enforce using concise optional chain instead of chained logical expressions.
   */
  useOptionalChain?: UseOptionalChainConfiguration | null
  /**
   * Enforce the use of the regular expression literals instead of the RegExp constructor if possible.
   */
  useRegexLiterals?: UseRegexLiteralsConfiguration | null
  /**
   * Disallow number literal object member names which are not base 10 or use underscore as separator.
   */
  useSimpleNumberKeys?: UseSimpleNumberKeysConfiguration | null
  /**
   * Discard redundant terms from logical expressions.
   */
  useSimplifiedLogicExpression?: UseSimplifiedLogicExpressionConfiguration | null
  /**
   * Enforce the use of while loops instead of for loops when the initializer and update expressions are not needed.
   */
  useWhile?: UseWhileConfiguration | null
}
export interface RuleWithNoAdjacentSpacesInRegexOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoAdjacentSpacesInRegexOptions
}
export interface NoAdjacentSpacesInRegexOptions {}
export interface RuleWithNoArgumentsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoArgumentsOptions
}
export interface NoArgumentsOptions {}
export interface RuleWithNoBannedTypesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoBannedTypesOptions
}
export interface NoBannedTypesOptions {}
export interface RuleWithNoCommaOperatorOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoCommaOperatorOptions
}
export interface NoCommaOperatorOptions {}
export interface RuleWithNoEmptyTypeParametersOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoEmptyTypeParametersOptions
}
export interface NoEmptyTypeParametersOptions {}
export interface RuleWithNoExcessiveCognitiveComplexityOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoExcessiveCognitiveComplexityOptions
}
export interface NoExcessiveCognitiveComplexityOptions {
  /**
   * The maximum complexity score that we allow. Anything higher is considered excessive.
   */
  maxAllowedComplexity?: number
}
export interface RuleWithNoExcessiveLinesPerFunctionOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoExcessiveLinesPerFunctionOptions
}
export interface NoExcessiveLinesPerFunctionOptions {
  /**
   * The maximum number of lines allowed in a function body.
   */
  maxLines?: number
  /**
   * When this options is set to `true`, blank lines in the function body are not counted towards the maximum line limit.
   */
  skipBlankLines?: boolean
  /**
   * When this option is set to `true`, Immediately Invoked Function Expressions (IIFEs) are not checked for the maximum line limit.
   */
  skipIifes?: boolean
}
export interface RuleWithNoExcessiveNestedTestSuitesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoExcessiveNestedTestSuitesOptions
}
export interface NoExcessiveNestedTestSuitesOptions {}
export interface RuleWithNoExtraBooleanCastOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoExtraBooleanCastOptions
}
export interface NoExtraBooleanCastOptions {}
export interface RuleWithNoFlatMapIdentityOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoFlatMapIdentityOptions
}
export interface NoFlatMapIdentityOptions {}
export interface RuleWithNoForEachOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoForEachOptions
}
export interface NoForEachOptions {
  /**
   * A list of variable names allowed for `forEach` calls.
   */
  allowedIdentifiers?: string[]
}
export interface RuleWithNoImplicitCoercionsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoImplicitCoercionsOptions
}
export interface NoImplicitCoercionsOptions {}
export interface RuleWithNoImportantStylesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoImportantStylesOptions
}
export interface NoImportantStylesOptions {}
export interface RuleWithNoStaticOnlyClassOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoStaticOnlyClassOptions
}
export interface NoStaticOnlyClassOptions {}
export interface RuleWithNoThisInStaticOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoThisInStaticOptions
}
export interface NoThisInStaticOptions {}
export interface RuleWithNoUselessCatchOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessCatchOptions
}
export interface NoUselessCatchOptions {}
export interface RuleWithNoUselessConstructorOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessConstructorOptions
}
export interface NoUselessConstructorOptions {}
export interface RuleWithNoUselessContinueOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessContinueOptions
}
export interface NoUselessContinueOptions {}
export interface RuleWithNoUselessEmptyExportOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessEmptyExportOptions
}
export interface NoUselessEmptyExportOptions {}
export interface RuleWithNoUselessEscapeInRegexOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessEscapeInRegexOptions
}
export interface NoUselessEscapeInRegexOptions {}
export interface RuleWithNoUselessFragmentsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessFragmentsOptions
}
export interface NoUselessFragmentsOptions {}
export interface RuleWithNoUselessLabelOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessLabelOptions
}
export interface NoUselessLabelOptions {}
export interface RuleWithNoUselessLoneBlockStatementsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessLoneBlockStatementsOptions
}
export interface NoUselessLoneBlockStatementsOptions {}
export interface RuleWithNoUselessRenameOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessRenameOptions
}
export interface NoUselessRenameOptions {}
export interface RuleWithNoUselessStringConcatOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessStringConcatOptions
}
export interface NoUselessStringConcatOptions {}
export interface RuleWithNoUselessStringRawOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessStringRawOptions
}
export interface NoUselessStringRawOptions {}
export interface RuleWithNoUselessSwitchCaseOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessSwitchCaseOptions
}
export interface NoUselessSwitchCaseOptions {}
export interface RuleWithNoUselessTernaryOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessTernaryOptions
}
export interface NoUselessTernaryOptions {}
export interface RuleWithNoUselessThisAliasOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessThisAliasOptions
}
export interface NoUselessThisAliasOptions {}
export interface RuleWithNoUselessTypeConstraintOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessTypeConstraintOptions
}
export interface NoUselessTypeConstraintOptions {}
export interface RuleWithNoUselessUndefinedInitializationOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessUndefinedInitializationOptions
}
export interface NoUselessUndefinedInitializationOptions {}
export interface RuleWithNoVoidOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoVoidOptions
}
export interface NoVoidOptions {}
export interface RuleWithUseArrowFunctionOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseArrowFunctionOptions
}
export interface UseArrowFunctionOptions {}
export interface RuleWithUseDateNowOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseDateNowOptions
}
export interface UseDateNowOptions {}
export interface RuleWithUseFlatMapOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseFlatMapOptions
}
export interface UseFlatMapOptions {}
export interface RuleWithUseIndexOfOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseIndexOfOptions
}
export interface UseIndexOfOptions {}
export interface RuleWithUseLiteralKeysOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseLiteralKeysOptions
}
export interface UseLiteralKeysOptions {}
export interface RuleWithUseNumericLiteralsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseNumericLiteralsOptions
}
export interface UseNumericLiteralsOptions {}
export interface RuleWithUseOptionalChainOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseOptionalChainOptions
}
export interface UseOptionalChainOptions {}
export interface RuleWithUseRegexLiteralsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseRegexLiteralsOptions
}
export interface UseRegexLiteralsOptions {}
export interface RuleWithUseSimpleNumberKeysOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseSimpleNumberKeysOptions
}
export interface UseSimpleNumberKeysOptions {}
export interface RuleWithUseSimplifiedLogicExpressionOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseSimplifiedLogicExpressionOptions
}
export interface UseSimplifiedLogicExpressionOptions {}
export interface RuleWithUseWhileOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseWhileOptions
}
export interface UseWhileOptions {}
/**
 * A list of rules that belong to this group
 */
export interface Correctness {
  /**
   * Prevent passing of children as props.
   */
  noChildrenProp?: NoChildrenPropConfiguration | null
  /**
   * Prevents from having const variables being re-assigned.
   */
  noConstAssign?: NoConstAssignConfiguration | null
  /**
   * Disallow constant expressions in conditions
   */
  noConstantCondition?: NoConstantConditionConfiguration | null
  /**
   * Disallow the use of Math.min and Math.max to clamp a value where the result itself is constant.
   */
  noConstantMathMinMaxClamp?: NoConstantMathMinMaxClampConfiguration | null
  /**
   * Disallow returning a value from a constructor.
   */
  noConstructorReturn?: NoConstructorReturnConfiguration | null
  /**
   * Disallow empty character classes in regular expression literals.
   */
  noEmptyCharacterClassInRegex?: NoEmptyCharacterClassInRegexConfiguration | null
  /**
   * Disallows empty destructuring patterns.
   */
  noEmptyPattern?: NoEmptyPatternConfiguration | null
  /**
   * Disallow the use of __dirname and __filename in the global scope.
   */
  noGlobalDirnameFilename?: NoGlobalDirnameFilenameConfiguration | null
  /**
   * Disallow calling global object properties as functions
   */
  noGlobalObjectCalls?: NoGlobalObjectCallsConfiguration | null
  /**
   * Disallow function and var declarations that are accessible outside their block.
   */
  noInnerDeclarations?: NoInnerDeclarationsConfiguration | null
  /**
   * Ensure that builtins are correctly instantiated.
   */
  noInvalidBuiltinInstantiation?: NoInvalidBuiltinInstantiationConfiguration | null
  /**
   * Prevents the incorrect use of super() inside classes. It also checks whether a call super() is missing from classes that extends other constructors.
   */
  noInvalidConstructorSuper?: NoInvalidConstructorSuperConfiguration | null
  /**
   * Disallow non-standard direction values for linear gradient functions.
   */
  noInvalidDirectionInLinearGradient?: NoInvalidDirectionInLinearGradientConfiguration | null
  /**
   * Disallows invalid named grid areas in CSS Grid Layouts.
   */
  noInvalidGridAreas?: NoInvalidGridAreasConfiguration | null
  /**
   * Disallow the use of @import at-rules in invalid positions.
   */
  noInvalidPositionAtImportRule?: NoInvalidPositionAtImportRuleConfiguration | null
  /**
   * Disallow the use of variables and function parameters before their declaration
   */
  noInvalidUseBeforeDeclaration?: NoInvalidUseBeforeDeclarationConfiguration | null
  /**
   * Disallow missing var function for css variables.
   */
  noMissingVarFunction?: NoMissingVarFunctionConfiguration | null
  /**
   * Disallows defining React components inside other components.
   */
  noNestedComponentDefinitions?: NoNestedComponentDefinitionsConfiguration | null
  /**
   * Forbid the use of Node.js builtin modules.
   */
  noNodejsModules?: NoNodejsModulesConfiguration | null
  /**
   * Disallow \8 and \9 escape sequences in string literals.
   */
  noNonoctalDecimalEscape?: NoNonoctalDecimalEscapeConfiguration | null
  /**
   * Disallow literal numbers that lose precision
   */
  noPrecisionLoss?: NoPrecisionLossConfiguration | null
  /**
   * Restrict imports of private exports.
   */
  noPrivateImports?: NoPrivateImportsConfiguration | null
  /**
   * Disallow the use of process global.
   */
  noProcessGlobal?: NoProcessGlobalConfiguration | null
  /**
   * Disallow assigning to React component props.
   */
  noReactPropAssignments?: NoReactPropAssignmentsConfiguration | null
  /**
   * Prevent the usage of the return value of React.render.
   */
  noRenderReturnValue?: NoRenderReturnValueConfiguration | null
  /**
   * Disallow the use of configured elements.
   */
  noRestrictedElements?: NoRestrictedElementsConfiguration | null
  /**
   * Disallow assignments where both sides are exactly the same.
   */
  noSelfAssign?: NoSelfAssignConfiguration | null
  /**
   * Disallow returning a value from a setter
   */
  noSetterReturn?: NoSetterReturnConfiguration | null
  /**
   * Disallow destructuring props inside JSX components in Solid projects.
   */
  noSolidDestructuredProps?: NoSolidDestructuredPropsConfiguration | null
  /**
   * Disallow comparison of expressions modifying the string case with non-compliant value.
   */
  noStringCaseMismatch?: NoStringCaseMismatchConfiguration | null
  /**
   * Disallow lexical declarations in switch clauses.
   */
  noSwitchDeclarations?: NoSwitchDeclarationsConfiguration | null
  /**
   * Disallow the use of dependencies that aren't specified in the package.json.
   */
  noUndeclaredDependencies?: NoUndeclaredDependenciesConfiguration | null
  /**
   * Prevents the usage of variables that haven't been declared inside the document.
   */
  noUndeclaredVariables?: NoUndeclaredVariablesConfiguration | null
  /**
   * Disallow unknown CSS value functions.
   */
  noUnknownFunction?: NoUnknownFunctionConfiguration | null
  /**
   * Disallow unknown media feature names.
   */
  noUnknownMediaFeatureName?: NoUnknownMediaFeatureNameConfiguration | null
  /**
   * Disallow unknown properties.
   */
  noUnknownProperty?: NoUnknownPropertyConfiguration | null
  /**
   * Disallow unknown pseudo-class selectors.
   */
  noUnknownPseudoClass?: NoUnknownPseudoClassConfiguration | null
  /**
   * Disallow unknown pseudo-element selectors.
   */
  noUnknownPseudoElement?: NoUnknownPseudoElementConfiguration | null
  /**
   * Disallow unknown type selectors.
   */
  noUnknownTypeSelector?: NoUnknownTypeSelectorConfiguration | null
  /**
   * Disallow unknown CSS units.
   */
  noUnknownUnit?: NoUnknownUnitConfiguration | null
  /**
   * Disallow unmatchable An+B selectors.
   */
  noUnmatchableAnbSelector?: NoUnmatchableAnbSelectorConfiguration | null
  /**
   * Disallow unreachable code
   */
  noUnreachable?: NoUnreachableConfiguration | null
  /**
   * Ensures the super() constructor is called exactly once on every code  path in a class constructor before this is accessed if the class has a superclass
   */
  noUnreachableSuper?: NoUnreachableSuperConfiguration | null
  /**
   * Disallow control flow statements in finally blocks.
   */
  noUnsafeFinally?: NoUnsafeFinallyConfiguration | null
  /**
   * Disallow the use of optional chaining in contexts where the undefined value is not allowed.
   */
  noUnsafeOptionalChaining?: NoUnsafeOptionalChainingConfiguration | null
  /**
   * Disallow unused function parameters.
   */
  noUnusedFunctionParameters?: NoUnusedFunctionParametersConfiguration | null
  /**
   * Disallow unused imports.
   */
  noUnusedImports?: NoUnusedImportsConfiguration | null
  /**
   * Disallow unused labels.
   */
  noUnusedLabels?: NoUnusedLabelsConfiguration | null
  /**
   * Disallow unused private class members
   */
  noUnusedPrivateClassMembers?: NoUnusedPrivateClassMembersConfiguration | null
  /**
   * Disallow unused variables.
   */
  noUnusedVariables?: NoUnusedVariablesConfiguration | null
  /**
   * This rules prevents void elements (AKA self-closing elements) from having children.
   */
  noVoidElementsWithChildren?: NoVoidElementsWithChildrenConfiguration | null
  /**
   * Disallow returning a value from a function with the return type 'void'
   */
  noVoidTypeReturn?: NoVoidTypeReturnConfiguration | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
  /**
   * Enforce all dependencies are correctly specified in a React hook.
   */
  useExhaustiveDependencies?: UseExhaustiveDependenciesConfiguration | null
  /**
   * Enforce specifying the name of GraphQL operations.
   */
  useGraphqlNamedOperations?: UseGraphqlNamedOperationsConfiguration | null
  /**
   * Enforce that all React hooks are being called from the Top Level component functions.
   */
  useHookAtTopLevel?: UseHookAtTopLevelConfiguration | null
  /**
   * Enforce file extensions for relative imports.
   */
  useImportExtensions?: UseImportExtensionsConfiguration | null
  /**
   * Require calls to isNaN() when checking for NaN.
   */
  useIsNan?: UseIsNanConfiguration | null
  /**
   * Enforces the use of with { type: "json" } for JSON module imports.
   */
  useJsonImportAttributes?: UseJsonImportAttributesConfiguration | null
  /**
   * Disallow missing key props in iterators/collection literals.
   */
  useJsxKeyInIterable?: UseJsxKeyInIterableConfiguration | null
  /**
   * Enforce the consistent use of the radix argument when using parseInt().
   */
  useParseIntRadix?: UseParseIntRadixConfiguration | null
  /**
   * Enforce JSDoc comment lines to start with a single asterisk, except for the first one.
   */
  useSingleJsDocAsterisk?: UseSingleJsDocAsteriskConfiguration | null
  /**
   * Prevent the usage of static string literal id attribute on elements.
   */
  useUniqueElementIds?: UseUniqueElementIdsConfiguration | null
  /**
   * Enforce "for" loop update clause moving the counter in the right direction.
   */
  useValidForDirection?: UseValidForDirectionConfiguration | null
  /**
   * This rule checks that the result of a typeof expression is compared to a valid value.
   */
  useValidTypeof?: UseValidTypeofConfiguration | null
  /**
   * Require generator functions to contain yield.
   */
  useYield?: UseYieldConfiguration | null
}
export interface RuleWithNoChildrenPropOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoChildrenPropOptions
}
export interface NoChildrenPropOptions {}
export interface RuleWithNoConstAssignOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoConstAssignOptions
}
export interface NoConstAssignOptions {}
export interface RuleWithNoConstantConditionOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoConstantConditionOptions
}
export interface NoConstantConditionOptions {}
export interface RuleWithNoConstantMathMinMaxClampOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoConstantMathMinMaxClampOptions
}
export interface NoConstantMathMinMaxClampOptions {}
export interface RuleWithNoConstructorReturnOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoConstructorReturnOptions
}
export interface NoConstructorReturnOptions {}
export interface RuleWithNoEmptyCharacterClassInRegexOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoEmptyCharacterClassInRegexOptions
}
export interface NoEmptyCharacterClassInRegexOptions {}
export interface RuleWithNoEmptyPatternOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoEmptyPatternOptions
}
export interface NoEmptyPatternOptions {}
export interface RuleWithNoGlobalDirnameFilenameOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoGlobalDirnameFilenameOptions
}
export interface NoGlobalDirnameFilenameOptions {}
export interface RuleWithNoGlobalObjectCallsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoGlobalObjectCallsOptions
}
export interface NoGlobalObjectCallsOptions {}
export interface RuleWithNoInnerDeclarationsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoInnerDeclarationsOptions
}
export interface NoInnerDeclarationsOptions {}
export interface RuleWithNoInvalidBuiltinInstantiationOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoInvalidBuiltinInstantiationOptions
}
export interface NoInvalidBuiltinInstantiationOptions {}
export interface RuleWithNoInvalidConstructorSuperOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoInvalidConstructorSuperOptions
}
export interface NoInvalidConstructorSuperOptions {}
export interface RuleWithNoInvalidDirectionInLinearGradientOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoInvalidDirectionInLinearGradientOptions
}
export interface NoInvalidDirectionInLinearGradientOptions {}
export interface RuleWithNoInvalidGridAreasOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoInvalidGridAreasOptions
}
export interface NoInvalidGridAreasOptions {}
export interface RuleWithNoInvalidPositionAtImportRuleOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoInvalidPositionAtImportRuleOptions
}
export interface NoInvalidPositionAtImportRuleOptions {}
export interface RuleWithNoInvalidUseBeforeDeclarationOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoInvalidUseBeforeDeclarationOptions
}
export interface NoInvalidUseBeforeDeclarationOptions {}
export interface RuleWithNoMissingVarFunctionOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoMissingVarFunctionOptions
}
export interface NoMissingVarFunctionOptions {}
export interface RuleWithNoNestedComponentDefinitionsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoNestedComponentDefinitionsOptions
}
export interface NoNestedComponentDefinitionsOptions {}
export interface RuleWithNoNodejsModulesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoNodejsModulesOptions
}
export interface NoNodejsModulesOptions {}
export interface RuleWithNoNonoctalDecimalEscapeOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoNonoctalDecimalEscapeOptions
}
export interface NoNonoctalDecimalEscapeOptions {}
export interface RuleWithNoPrecisionLossOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoPrecisionLossOptions
}
export interface NoPrecisionLossOptions {}
export interface RuleWithNoPrivateImportsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoPrivateImportsOptions
}
export interface NoPrivateImportsOptions {
  /**
   * The default visibility to assume for symbols without visibility tag.
   *
   * Default: **public**.
   */
  defaultVisibility?: Visibility & string
}
export interface RuleWithNoProcessGlobalOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoProcessGlobalOptions
}
export interface NoProcessGlobalOptions {}
export interface RuleWithNoReactPropAssignmentsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoReactPropAssignmentsOptions
}
export interface NoReactPropAssignmentsOptions {}
export interface RuleWithNoRenderReturnValueOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoRenderReturnValueOptions
}
export interface NoRenderReturnValueOptions {}
export interface RuleWithNoRestrictedElementsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoRestrictedElementsOptions
}
export interface NoRestrictedElementsOptions {
  /**
   * Elements to restrict. Each key is the element name, and the value is the message to show when the element is used.
   */
  elements?: CustomRestrictedElements
}
export interface CustomRestrictedElements {
  [k: string]: string
}
export interface RuleWithNoSelfAssignOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoSelfAssignOptions
}
export interface NoSelfAssignOptions {}
export interface RuleWithNoSetterReturnOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoSetterReturnOptions
}
export interface NoSetterReturnOptions {}
export interface RuleWithNoSolidDestructuredPropsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoSolidDestructuredPropsOptions
}
export interface NoSolidDestructuredPropsOptions {}
export interface RuleWithNoStringCaseMismatchOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoStringCaseMismatchOptions
}
export interface NoStringCaseMismatchOptions {}
export interface RuleWithNoSwitchDeclarationsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoSwitchDeclarationsOptions
}
export interface NoSwitchDeclarationsOptions {}
export interface RuleWithNoUndeclaredDependenciesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUndeclaredDependenciesOptions
}
export interface NoUndeclaredDependenciesOptions {
  /**
   * If set to `false`, then the rule will show an error when `devDependencies` are imported. Defaults to `true`.
   */
  devDependencies?: DependencyAvailability & boolean
  /**
   * If set to `false`, then the rule will show an error when `optionalDependencies` are imported. Defaults to `true`.
   */
  optionalDependencies?: DependencyAvailability & boolean
  /**
   * If set to `false`, then the rule will show an error when `peerDependencies` are imported. Defaults to `true`.
   */
  peerDependencies?: DependencyAvailability & boolean
}
export interface RuleWithNoUndeclaredVariablesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUndeclaredVariablesOptions
}
export interface NoUndeclaredVariablesOptions {
  /**
   * Check undeclared types.
   */
  checkTypes?: boolean
}
export interface RuleWithNoUnknownFunctionOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnknownFunctionOptions
}
export interface NoUnknownFunctionOptions {}
export interface RuleWithNoUnknownMediaFeatureNameOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnknownMediaFeatureNameOptions
}
export interface NoUnknownMediaFeatureNameOptions {}
export interface RuleWithNoUnknownPropertyOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnknownPropertyOptions
}
export interface NoUnknownPropertyOptions {}
export interface RuleWithNoUnknownPseudoClassOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnknownPseudoClassOptions
}
export interface NoUnknownPseudoClassOptions {}
export interface RuleWithNoUnknownPseudoElementOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnknownPseudoElementOptions
}
export interface NoUnknownPseudoElementOptions {}
export interface RuleWithNoUnknownTypeSelectorOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnknownTypeSelectorOptions
}
export interface NoUnknownTypeSelectorOptions {}
export interface RuleWithNoUnknownUnitOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnknownUnitOptions
}
export interface NoUnknownUnitOptions {}
export interface RuleWithNoUnmatchableAnbSelectorOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnmatchableAnbSelectorOptions
}
export interface NoUnmatchableAnbSelectorOptions {}
export interface RuleWithNoUnreachableOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnreachableOptions
}
export interface NoUnreachableOptions {}
export interface RuleWithNoUnreachableSuperOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnreachableSuperOptions
}
export interface NoUnreachableSuperOptions {}
export interface RuleWithNoUnsafeFinallyOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnsafeFinallyOptions
}
export interface NoUnsafeFinallyOptions {}
export interface RuleWithNoUnsafeOptionalChainingOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnsafeOptionalChainingOptions
}
export interface NoUnsafeOptionalChainingOptions {}
export interface RuleWithNoUnusedFunctionParametersOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnusedFunctionParametersOptions
}
export interface NoUnusedFunctionParametersOptions {
  /**
   * Whether to ignore unused variables from an object destructuring with a spread.
   */
  ignoreRestSiblings?: boolean
}
export interface RuleWithNoUnusedImportsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnusedImportsOptions
}
export interface NoUnusedImportsOptions {}
export interface RuleWithNoUnusedLabelsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnusedLabelsOptions
}
export interface NoUnusedLabelsOptions {}
export interface RuleWithNoUnusedPrivateClassMembersOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnusedPrivateClassMembersOptions
}
export interface NoUnusedPrivateClassMembersOptions {}
export interface RuleWithNoUnusedVariablesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnusedVariablesOptions
}
export interface NoUnusedVariablesOptions {
  /**
   * Whether to ignore unused variables from an object destructuring with a spread.
   */
  ignoreRestSiblings?: boolean
}
export interface RuleWithNoVoidElementsWithChildrenOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoVoidElementsWithChildrenOptions
}
export interface NoVoidElementsWithChildrenOptions {}
export interface RuleWithNoVoidTypeReturnOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoVoidTypeReturnOptions
}
export interface NoVoidTypeReturnOptions {}
export interface RuleWithUseExhaustiveDependenciesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseExhaustiveDependenciesOptions
}
export interface UseExhaustiveDependenciesOptions {
  /**
   * List of hooks of which the dependencies should be validated.
   */
  hooks?: Hook[]
  /**
   * Whether to report an error when a hook has no dependencies array.
   */
  reportMissingDependenciesArray?: boolean
  /**
   * Whether to report an error when a dependency is listed in the dependencies array but isn't used. Defaults to true.
   */
  reportUnnecessaryDependencies?: boolean
}
export interface Hook {
  /**
   * The "position" of the closure function, starting from zero.
   *
   * For example, for React's `useEffect()` hook, the closure index is 0.
   */
  closureIndex?: number | null
  /**
   * The "position" of the array of dependencies, starting from zero.
   *
   * For example, for React's `useEffect()` hook, the dependencies index is 1.
   */
  dependenciesIndex?: number | null
  /**
   * The name of the hook.
   */
  name?: string
  /**
   * Whether the result of the hook is stable.
   *
   * Set to `true` to mark the identity of the hook's return value as stable, or use a number/an array of numbers to mark the "positions" in the return array as stable.
   *
   * For example, for React's `useRef()` hook the value would be `true`, while for `useState()` it would be `[1]`.
   */
  stableResult?: StableHookResult | null
}
export interface RuleWithUseGraphqlNamedOperationsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseGraphqlNamedOperationsOptions
}
export interface UseGraphqlNamedOperationsOptions {}
export interface RuleWithUseHookAtTopLevelOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseHookAtTopLevelOptions
}
export interface UseHookAtTopLevelOptions {}
export interface RuleWithUseImportExtensionsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseImportExtensionsOptions
}
export interface UseImportExtensionsOptions {
  /**
   * If `true`, the suggested extension is always `.js` regardless of what extension the source file has in your project.
   */
  forceJsExtensions?: boolean
}
export interface RuleWithUseIsNanOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseIsNanOptions
}
export interface UseIsNanOptions {}
export interface RuleWithUseJsonImportAttributesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseJsonImportAttributesOptions
}
export interface UseJsonImportAttributesOptions {}
export interface RuleWithUseJsxKeyInIterableOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseJsxKeyInIterableOptions
}
export interface UseJsxKeyInIterableOptions {
  /**
   * Set to `true` to check shorthand fragments (`<></>`)
   */
  checkShorthandFragments?: boolean
}
export interface RuleWithUseParseIntRadixOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseParseIntRadixOptions
}
export interface UseParseIntRadixOptions {}
export interface RuleWithUseSingleJsDocAsteriskOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseSingleJsDocAsteriskOptions
}
export interface UseSingleJsDocAsteriskOptions {}
export interface RuleWithUseUniqueElementIdsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseUniqueElementIdsOptions
}
export interface UseUniqueElementIdsOptions {
  /**
   * Component names that accept an `id` prop that does not translate to a DOM element id.
   */
  excludedComponents?: string[]
}
export interface RuleWithUseValidForDirectionOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseValidForDirectionOptions
}
export interface UseValidForDirectionOptions {}
export interface RuleWithUseValidTypeofOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseValidTypeofOptions
}
export interface UseValidTypeofOptions {}
export interface RuleWithUseYieldOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseYieldOptions
}
export interface UseYieldOptions {}
/**
 * A list of rules that belong to this group
 */
export interface Nursery {
  /**
   * Require Promise-like statements to be handled appropriately.
   */
  noFloatingPromises?: NoFloatingPromisesConfiguration | null
  /**
   * Prevent import cycles.
   */
  noImportCycles?: NoImportCyclesConfiguration | null
  /**
   * Disallow Promises to be used in places where they are almost certainly a mistake.
   */
  noMisusedPromises?: NoMisusedPromisesConfiguration | null
  /**
   * Prevent client components from being async functions.
   */
  noNextAsyncClientComponent?: NoNextAsyncClientComponentConfiguration | null
  /**
   * Disallow non-null assertions after optional chaining expressions.
   */
  noNonNullAssertedOptionalChain?: NoNonNullAssertedOptionalChainConfiguration | null
  /**
   * Disallow useVisibleTask$() functions in Qwik components.
   */
  noQwikUseVisibleTask?: NoQwikUseVisibleTaskConfiguration | null
  /**
   * Disallow usage of sensitive data such as API keys and tokens.
   */
  noSecrets?: NoSecretsConfiguration | null
  /**
   * Disallow variable declarations from shadowing variables declared in the outer scope.
   */
  noShadow?: NoShadowConfiguration | null
  /**
   * Disallow unnecessary type-based conditions that can be statically determined as redundant.
   */
  noUnnecessaryConditions?: NoUnnecessaryConditionsConfiguration | null
  /**
   * Warn when importing non-existing exports.
   */
  noUnresolvedImports?: NoUnresolvedImportsConfiguration | null
  /**
   * Disallow the use of useless undefined.
   */
  noUselessUndefined?: NoUselessUndefinedConfiguration | null
  /**
   * Enforce that Vue component data options are declared as functions.
   */
  noVueDataObjectDeclaration?: NoVueDataObjectDeclarationConfiguration | null
  /**
   * Disallow reserved keys in Vue component data and computed properties.
   */
  noVueReservedKeys?: NoVueReservedKeysConfiguration | null
  /**
   * Disallow reserved names to be used as props.
   */
  noVueReservedProps?: NoVueReservedPropsConfiguration | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
  /**
   * Enforces href attribute for \<a> elements.
   */
  useAnchorHref?: UseAnchorHrefConfiguration | null
  /**
   * Enforce type definitions to consistently use either interface or type.
   */
  useConsistentTypeDefinitions?: UseConsistentTypeDefinitionsConfiguration | null
  /**
   * Require switch-case statements to be exhaustive.
   */
  useExhaustiveSwitchCases?: UseExhaustiveSwitchCasesConfiguration | null
  /**
   * Enforce types in functions, methods, variables, and parameters.
   */
  useExplicitType?: UseExplicitTypeConfiguration | null
  /**
   * Enforces that \<img> elements have both width and height attributes.
   */
  useImageSize?: UseImageSizeConfiguration | null
  /**
   * Enforce a maximum number of parameters in function definitions.
   */
  useMaxParams?: UseMaxParamsConfiguration | null
  /**
   * Prefer using the class prop as a classlist over the classnames helper.
   */
  useQwikClasslist?: UseQwikClasslistConfiguration | null
  /**
   * Enforce that components are defined as functions and never as classes.
   */
  useReactFunctionComponents?: UseReactFunctionComponentsConfiguration | null
  /**
   * Enforce the sorting of CSS utility classes.
   */
  useSortedClasses?: UseSortedClassesConfiguration | null
}
export interface RuleWithNoFloatingPromisesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoFloatingPromisesOptions
}
export interface NoFloatingPromisesOptions {}
export interface RuleWithNoImportCyclesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoImportCyclesOptions
}
export interface NoImportCyclesOptions {
  /**
   * Ignores type-only imports when finding an import cycle. A type-only import (`import type`) will be removed by the compiler, so it cuts an import cycle at runtime. Note that named type imports (`import { type Foo }`) aren't considered as type-only because it's not removed by the compiler if the `verbatimModuleSyntax` option is enabled. Enabled by default.
   */
  ignoreTypes?: boolean
}
export interface RuleWithNoMisusedPromisesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoMisusedPromisesOptions
}
export interface NoMisusedPromisesOptions {}
export interface RuleWithNoNextAsyncClientComponentOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoNextAsyncClientComponentOptions
}
export interface NoNextAsyncClientComponentOptions {}
export interface RuleWithNoNonNullAssertedOptionalChainOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoNonNullAssertedOptionalChainOptions
}
export interface NoNonNullAssertedOptionalChainOptions {}
export interface RuleWithNoQwikUseVisibleTaskOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoQwikUseVisibleTaskOptions
}
export interface NoQwikUseVisibleTaskOptions {}
export interface RuleWithNoSecretsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoSecretsOptions
}
export interface NoSecretsOptions {
  /**
   * Set entropy threshold (default is 41).
   */
  entropyThreshold?: number | null
}
export interface RuleWithNoShadowOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoShadowOptions
}
export interface NoShadowOptions {}
export interface RuleWithNoUnnecessaryConditionsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnnecessaryConditionsOptions
}
export interface NoUnnecessaryConditionsOptions {}
export interface RuleWithNoUnresolvedImportsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnresolvedImportsOptions
}
export interface NoUnresolvedImportsOptions {}
export interface RuleWithNoUselessUndefinedOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessUndefinedOptions
}
export interface NoUselessUndefinedOptions {}
export interface RuleWithNoVueDataObjectDeclarationOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoVueDataObjectDeclarationOptions
}
export interface NoVueDataObjectDeclarationOptions {}
export interface RuleWithNoVueReservedKeysOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoVueReservedKeysOptions
}
export interface NoVueReservedKeysOptions {}
export interface RuleWithNoVueReservedPropsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoVueReservedPropsOptions
}
export interface NoVueReservedPropsOptions {}
export interface RuleWithUseAnchorHrefOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseAnchorHrefOptions
}
export interface RuleWithUseConsistentTypeDefinitionsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseConsistentTypeDefinitionsOptions
}
export interface UseConsistentTypeDefinitionsOptions {
  style?: ConsistentTypeDefinition & string
}
export interface RuleWithUseExhaustiveSwitchCasesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseExhaustiveSwitchCasesOptions
}
export interface UseExhaustiveSwitchCasesOptions {}
export interface RuleWithUseExplicitTypeOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseExplicitTypeOptions
}
export interface UseExplicitTypeOptions {}
export interface RuleWithUseImageSizeOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseImageSizeOptions
}
export interface RuleWithUseMaxParamsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseMaxParamsOptions
}
export interface UseMaxParamsOptions {
  /**
   * Maximum number of parameters allowed (default: 4)
   */
  max?: number
}
export interface RuleWithUseQwikClasslistOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseQwikClasslistOptions
}
export interface UseQwikClasslistOptions {}
export interface RuleWithUseReactFunctionComponentsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseReactFunctionComponentsOptions
}
export interface UseReactFunctionComponentsOptions {}
export interface RuleWithUseSortedClassesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseSortedClassesOptions
}
export interface UseSortedClassesOptions {
  /**
   * Additional attributes that will be sorted.
   */
  attributes?: string[] | null
  /**
   * Names of the functions or tagged templates that will be sorted.
   */
  functions?: string[] | null
}
/**
 * A list of rules that belong to this group
 */
export interface Performance {
  /**
   * Disallow the use of spread (...) syntax on accumulators.
   */
  noAccumulatingSpread?: NoAccumulatingSpreadConfiguration | null
  /**
   * Disallow await inside loops.
   */
  noAwaitInLoops?: NoAwaitInLoopsConfiguration | null
  /**
   * Disallow the use of barrel file.
   */
  noBarrelFile?: NoBarrelFileConfiguration | null
  /**
   * Disallow the use of the delete operator.
   */
  noDelete?: NoDeleteConfiguration | null
  /**
   * Disallow accessing namespace imports dynamically.
   */
  noDynamicNamespaceImportAccess?: NoDynamicNamespaceImportAccessConfiguration | null
  /**
   * Prevent usage of \<img> element in a Next.js project.
   */
  noImgElement?: NoImgElementConfiguration | null
  /**
   * Disallow the use of namespace imports.
   */
  noNamespaceImport?: NoNamespaceImportConfiguration | null
  /**
   * Avoid re-export all.
   */
  noReExportAll?: NoReExportAllConfiguration | null
  /**
   * Prevent duplicate polyfills from Polyfill.io.
   */
  noUnwantedPolyfillio?: NoUnwantedPolyfillioConfiguration | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
  /**
   * Ensure the preconnect attribute is used when using Google Fonts.
   */
  useGoogleFontPreconnect?: UseGoogleFontPreconnectConfiguration | null
  /**
   * Enforce using Solid's \<For /> component for mapping an array to JSX elements.
   */
  useSolidForComponent?: UseSolidForComponentConfiguration | null
  /**
   * Require regex literals to be declared at the top level.
   */
  useTopLevelRegex?: UseTopLevelRegexConfiguration | null
}
export interface RuleWithNoAccumulatingSpreadOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoAccumulatingSpreadOptions
}
export interface NoAccumulatingSpreadOptions {}
export interface RuleWithNoAwaitInLoopsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoAwaitInLoopsOptions
}
export interface NoAwaitInLoopsOptions {}
export interface RuleWithNoBarrelFileOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoBarrelFileOptions
}
export interface NoBarrelFileOptions {}
export interface RuleWithNoDeleteOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDeleteOptions
}
export interface NoDeleteOptions {}
export interface RuleWithNoDynamicNamespaceImportAccessOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDynamicNamespaceImportAccessOptions
}
export interface NoDynamicNamespaceImportAccessOptions {}
export interface RuleWithNoImgElementOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoImgElementOptions
}
export interface NoImgElementOptions {}
export interface RuleWithNoNamespaceImportOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoNamespaceImportOptions
}
export interface NoNamespaceImportOptions {}
export interface RuleWithNoReExportAllOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoReExportAllOptions
}
export interface NoReExportAllOptions {}
export interface RuleWithNoUnwantedPolyfillioOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnwantedPolyfillioOptions
}
export interface NoUnwantedPolyfillioOptions {}
export interface RuleWithUseGoogleFontPreconnectOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseGoogleFontPreconnectOptions
}
export interface UseGoogleFontPreconnectOptions {}
export interface RuleWithUseSolidForComponentOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseSolidForComponentOptions
}
export interface UseSolidForComponentOptions {}
export interface RuleWithUseTopLevelRegexOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseTopLevelRegexOptions
}
export interface UseTopLevelRegexOptions {}
/**
 * A list of rules that belong to this group
 */
export interface Security {
  /**
   * Disallow target="_blank" attribute without rel="noopener".
   */
  noBlankTarget?: NoBlankTargetConfiguration | null
  /**
   * Prevent the usage of dangerous JSX props
   */
  noDangerouslySetInnerHtml?: NoDangerouslySetInnerHtmlConfiguration | null
  /**
   * Report when a DOM element or a component uses both children and dangerouslySetInnerHTML prop.
   */
  noDangerouslySetInnerHtmlWithChildren?: NoDangerouslySetInnerHtmlWithChildrenConfiguration | null
  /**
   * Disallow the use of global eval().
   */
  noGlobalEval?: NoGlobalEvalConfiguration | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
}
export interface RuleWithNoBlankTargetOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoBlankTargetOptions
}
export interface NoBlankTargetOptions {
  /**
   * List of domains where `target="_blank"` is allowed without `rel="noopener"`.
   */
  allowDomains?: string[]
  /**
   * Whether `noreferrer` is allowed in addition to `noopener`.
   */
  allowNoReferrer?: boolean
}
export interface RuleWithNoDangerouslySetInnerHtmlOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDangerouslySetInnerHtmlOptions
}
export interface NoDangerouslySetInnerHtmlOptions {}
export interface RuleWithNoDangerouslySetInnerHtmlWithChildrenOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDangerouslySetInnerHtmlWithChildrenOptions
}
export interface NoDangerouslySetInnerHtmlWithChildrenOptions {}
export interface RuleWithNoGlobalEvalOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoGlobalEvalOptions
}
export interface NoGlobalEvalOptions {}
/**
 * A list of rules that belong to this group
 */
export interface Style {
  /**
   * Disallow use of CommonJs module system in favor of ESM style imports.
   */
  noCommonJs?: NoCommonJsConfiguration | null
  /**
   * Disallow default exports.
   */
  noDefaultExport?: NoDefaultExportConfiguration | null
  /**
   * Disallow a lower specificity selector from coming after a higher specificity selector.
   */
  noDescendingSpecificity?: NoDescendingSpecificityConfiguration | null
  /**
   * Disallow using a callback in asynchronous tests and hooks.
   */
  noDoneCallback?: NoDoneCallbackConfiguration | null
  /**
   * Disallow TypeScript enum.
   */
  noEnum?: NoEnumConfiguration | null
  /**
   * Disallow exporting an imported variable.
   */
  noExportedImports?: NoExportedImportsConfiguration | null
  /**
   * Prevent usage of \<head> element in a Next.js project.
   */
  noHeadElement?: NoHeadElementConfiguration | null
  /**
   * Disallow implicit true values on JSX boolean attributes
   */
  noImplicitBoolean?: NoImplicitBooleanConfiguration | null
  /**
   * Disallow type annotations for variables, parameters, and class properties initialized with a literal expression.
   */
  noInferrableTypes?: NoInferrableTypesConfiguration | null
  /**
   * Reports usage of "magic numbers" — numbers used directly instead of being assigned to named constants.
   */
  noMagicNumbers?: NoMagicNumbersConfiguration | null
  /**
   * Disallow the use of TypeScript's namespaces.
   */
  noNamespace?: NoNamespaceConfiguration | null
  /**
   * Disallow negation in the condition of an if statement if it has an else clause.
   */
  noNegationElse?: NoNegationElseConfiguration | null
  /**
   * Disallow nested ternary expressions.
   */
  noNestedTernary?: NoNestedTernaryConfiguration | null
  /**
   * Disallow non-null assertions using the ! postfix operator.
   */
  noNonNullAssertion?: NoNonNullAssertionConfiguration | null
  /**
   * Disallow reassigning function parameters.
   */
  noParameterAssign?: NoParameterAssignConfiguration | null
  /**
   * Disallow the use of parameter properties in class constructors.
   */
  noParameterProperties?: NoParameterPropertiesConfiguration | null
  /**
   * Disallow the use of process.env.
   */
  noProcessEnv?: NoProcessEnvConfiguration | null
  /**
   * This rule allows you to specify global variable names that you don’t want to use in your application.
   */
  noRestrictedGlobals?: NoRestrictedGlobalsConfiguration | null
  /**
   * Disallow specified modules when loaded by import or require.
   */
  noRestrictedImports?: NoRestrictedImportsConfiguration | null
  /**
   * Disallow user defined types.
   */
  noRestrictedTypes?: NoRestrictedTypesConfiguration | null
  /**
   * Disallow the use of constants which its value is the upper-case version of its name.
   */
  noShoutyConstants?: NoShoutyConstantsConfiguration | null
  /**
   * Enforce the use of String.slice() over String.substr() and String.substring().
   */
  noSubstr?: NoSubstrConfiguration | null
  /**
   * Disallow template literals if interpolation and special-character handling are not needed
   */
  noUnusedTemplateLiteral?: NoUnusedTemplateLiteralConfiguration | null
  /**
   * Disallow else block when the if block breaks early.
   */
  noUselessElse?: NoUselessElseConfiguration | null
  /**
   * Disallow use of @value rule in css modules.
   */
  noValueAtRule?: NoValueAtRuleConfiguration | null
  /**
   * Disallow the use of yoda expressions.
   */
  noYodaExpression?: NoYodaExpressionConfiguration | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
  /**
   * Disallow Array constructors.
   */
  useArrayLiterals?: UseArrayLiteralsConfiguration | null
  /**
   * Enforce the use of as const over literal type and type annotation.
   */
  useAsConstAssertion?: UseAsConstAssertionConfiguration | null
  /**
   * Use at() instead of integer index access.
   */
  useAtIndex?: UseAtIndexConfiguration | null
  /**
   * Requires following curly brace conventions.
   */
  useBlockStatements?: UseBlockStatementsConfiguration | null
  /**
   * Enforce using else if instead of nested if in else clauses.
   */
  useCollapsedElseIf?: UseCollapsedElseIfConfiguration | null
  /**
   * Enforce using single if instead of nested if clauses.
   */
  useCollapsedIf?: UseCollapsedIfConfiguration | null
  /**
   * Enforce declaring components only within modules that export React Components exclusively.
   */
  useComponentExportOnlyModules?: UseComponentExportOnlyModulesConfiguration | null
  /**
   * Require consistently using either T\[] or Array\<T>
   */
  useConsistentArrayType?: UseConsistentArrayTypeConfiguration | null
  /**
   * Enforce the use of new for all builtins, except String, Number and Boolean.
   */
  useConsistentBuiltinInstantiation?: UseConsistentBuiltinInstantiationConfiguration | null
  /**
   * This rule enforces consistent use of curly braces inside JSX attributes and JSX children.
   */
  useConsistentCurlyBraces?: UseConsistentCurlyBracesConfiguration | null
  /**
   * Require consistent accessibility modifiers on class properties and methods.
   */
  useConsistentMemberAccessibility?: UseConsistentMemberAccessibilityConfiguration | null
  /**
   * Require the consistent declaration of object literals. Defaults to explicit definitions.
   */
  useConsistentObjectDefinitions?: UseConsistentObjectDefinitionsConfiguration | null
  /**
   * Require const declarations for variables that are only assigned once.
   */
  useConst?: UseConstConfiguration | null
  /**
   * Enforce default function parameters and optional function parameters to be last.
   */
  useDefaultParameterLast?: UseDefaultParameterLastConfiguration | null
  /**
   * Require the default clause in switch statements.
   */
  useDefaultSwitchClause?: UseDefaultSwitchClauseConfiguration | null
  /**
   * Require specifying the reason argument when using @deprecated directive
   */
  useDeprecatedReason?: UseDeprecatedReasonConfiguration | null
  /**
   * Require that each enum member value be explicitly initialized.
   */
  useEnumInitializers?: UseEnumInitializersConfiguration | null
  /**
   * Enforce explicitly comparing the length, size, byteLength or byteOffset property of a value.
   */
  useExplicitLengthCheck?: UseExplicitLengthCheckConfiguration | null
  /**
   * Disallow the use of Math.pow in favor of the ** operator.
   */
  useExponentiationOperator?: UseExponentiationOperatorConfiguration | null
  /**
   * Promotes the use of export type for types.
   */
  useExportType?: UseExportTypeConfiguration | null
  /**
   * Require that all exports are declared after all non-export statements.
   */
  useExportsLast?: UseExportsLastConfiguration | null
  /**
   * Enforce naming conventions for JavaScript and TypeScript filenames.
   */
  useFilenamingConvention?: UseFilenamingConventionConfiguration | null
  /**
   * Prefer using for...of loops over standard for loops where possible.
   */
  useForOf?: UseForOfConfiguration | null
  /**
   * This rule enforces the use of \<>...\</> over \<Fragment>...\</Fragment>.
   */
  useFragmentSyntax?: UseFragmentSyntaxConfiguration | null
  /**
   * Validates that all enum values are capitalized.
   */
  useGraphqlNamingConvention?: UseGraphqlNamingConventionConfiguration | null
  /**
   * Enforce that getters and setters for the same property are adjacent in class and object definitions.
   */
  useGroupedAccessorPairs?: UseGroupedAccessorPairsConfiguration | null
  /**
   * Promotes the use of import type for types.
   */
  useImportType?: UseImportTypeConfiguration | null
  /**
   * Require all enum members to be literal values.
   */
  useLiteralEnumMembers?: UseLiteralEnumMembersConfiguration | null
  /**
   * Enforce naming conventions for everything across a codebase.
   */
  useNamingConvention?: UseNamingConventionConfiguration | null
  /**
   * Promotes the usage of node:assert/strict over node:assert.
   */
  useNodeAssertStrict?: UseNodeAssertStrictConfiguration | null
  /**
   * Enforces using the node: protocol for Node.js builtin modules.
   */
  useNodejsImportProtocol?: UseNodejsImportProtocolConfiguration | null
  /**
   * Use the Number properties instead of global ones.
   */
  useNumberNamespace?: UseNumberNamespaceConfiguration | null
  /**
   * Enforce the use of numeric separators in numeric literals.
   */
  useNumericSeparators?: UseNumericSeparatorsConfiguration | null
  /**
   * Prefer object spread over Object.assign() when constructing new objects.
   */
  useObjectSpread?: UseObjectSpreadConfiguration | null
  /**
   * Enforce marking members as readonly if they are never modified outside the constructor.
   */
  useReadonlyClassProperties?: UseReadonlyClassPropertiesConfiguration | null
  /**
   * Prevent extra closing tags for components without children.
   */
  useSelfClosingElements?: UseSelfClosingElementsConfiguration | null
  /**
   * Require assignment operator shorthand where possible.
   */
  useShorthandAssign?: UseShorthandAssignConfiguration | null
  /**
   * Enforce using function types instead of object type with call signatures.
   */
  useShorthandFunctionType?: UseShorthandFunctionTypeConfiguration | null
  /**
   * Disallow multiple variable declarations in the same variable statement
   */
  useSingleVarDeclarator?: UseSingleVarDeclaratorConfiguration | null
  /**
   * Require a description parameter for the Symbol().
   */
  useSymbolDescription?: UseSymbolDescriptionConfiguration | null
  /**
   * Prefer template literals over string concatenation.
   */
  useTemplate?: UseTemplateConfiguration | null
  /**
   * Require new when throwing an error.
   */
  useThrowNewError?: UseThrowNewErrorConfiguration | null
  /**
   * Disallow throwing non-Error values.
   */
  useThrowOnlyError?: UseThrowOnlyErrorConfiguration | null
  /**
   * Enforce the use of String.trimStart() and String.trimEnd() over String.trimLeft() and String.trimRight().
   */
  useTrimStartEnd?: UseTrimStartEndConfiguration | null
  /**
   * Disallow overload signatures that can be unified into a single signature.
   */
  useUnifiedTypeSignatures?: UseUnifiedTypeSignaturesConfiguration | null
}
export interface RuleWithNoCommonJsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoCommonJsOptions
}
export interface NoCommonJsOptions {}
export interface RuleWithNoDefaultExportOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDefaultExportOptions
}
export interface NoDefaultExportOptions {}
export interface RuleWithNoDescendingSpecificityOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDescendingSpecificityOptions
}
export interface NoDescendingSpecificityOptions {}
export interface RuleWithNoDoneCallbackOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDoneCallbackOptions
}
export interface NoDoneCallbackOptions {}
export interface RuleWithNoEnumOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoEnumOptions
}
export interface NoEnumOptions {}
export interface RuleWithNoExportedImportsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoExportedImportsOptions
}
export interface NoExportedImportsOptions {}
export interface RuleWithNoHeadElementOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoHeadElementOptions
}
export interface NoHeadElementOptions {}
export interface RuleWithNoImplicitBooleanOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoImplicitBooleanOptions
}
export interface NoImplicitBooleanOptions {}
export interface RuleWithNoInferrableTypesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoInferrableTypesOptions
}
export interface NoInferrableTypesOptions {}
export interface RuleWithNoMagicNumbersOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoMagicNumbersOptions
}
export interface NoMagicNumbersOptions {}
export interface RuleWithNoNamespaceOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoNamespaceOptions
}
export interface NoNamespaceOptions {}
export interface RuleWithNoNegationElseOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoNegationElseOptions
}
export interface NoNegationElseOptions {}
export interface RuleWithNoNestedTernaryOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoNestedTernaryOptions
}
export interface NoNestedTernaryOptions {}
export interface RuleWithNoNonNullAssertionOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoNonNullAssertionOptions
}
export interface NoNonNullAssertionOptions {}
export interface RuleWithNoParameterAssignOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoParameterAssignOptions
}
export interface NoParameterAssignOptions {
  /**
   * Whether to report an error when a dependency is listed in the dependencies array but isn't used. Defaults to `allow`.
   */
  propertyAssignment?: PropertyAssignmentMode & string
}
export interface RuleWithNoParameterPropertiesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoParameterPropertiesOptions
}
export interface NoParameterPropertiesOptions {}
export interface RuleWithNoProcessEnvOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoProcessEnvOptions
}
export interface NoProcessEnvOptions {}
export interface RuleWithNoRestrictedGlobalsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoRestrictedGlobalsOptions
}
export interface NoRestrictedGlobalsOptions {
  /**
   * A list of names that should trigger the rule
   */
  deniedGlobals?: {
    [k: string]: string
  }
}
export interface RuleWithNoRestrictedImportsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoRestrictedImportsOptions
}
export interface NoRestrictedImportsOptions {
  /**
   * A list of import paths that should trigger the rule.
   */
  paths?: {
    [k: string]: Paths
  }
  /**
   * gitignore-style patterns that should trigger the rule.
   */
  patterns?: Patterns[] | null
}
export interface PathOptions {
  /**
   * Names of the exported members that allowed to be not be used.
   */
  allowImportNames?: string[]
  /**
   * Names of the exported members that should not be used.
   */
  importNames?: string[]
  /**
   * The message to display when this module is imported.
   */
  message?: string
}
export interface PatternOptions {
  /**
   * An array of gitignore-style patterns.
   */
  group?: SourcesMatcher | null
  /**
   * A regex pattern for import names to forbid within the matched modules.
   */
  importNamePattern?: Regex | null
  /**
   * If true, the matched patterns in the importNamePattern will be allowed. Defaults to `false`.
   */
  invertImportNamePattern?: boolean
  /**
   * A custom message for diagnostics related to this pattern.
   */
  message?: string | null
}
export interface RuleWithNoRestrictedTypesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoRestrictedTypesOptions
}
export interface NoRestrictedTypesOptions {
  types?: {
    [k: string]: CustomRestrictedType
  }
}
export interface CustomRestrictedTypeOptions {
  message?: string
  use?: string | null
}
export interface RuleWithNoShoutyConstantsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoShoutyConstantsOptions
}
export interface NoShoutyConstantsOptions {}
export interface RuleWithNoSubstrOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoSubstrOptions
}
export interface NoSubstrOptions {}
export interface RuleWithNoUnusedTemplateLiteralOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnusedTemplateLiteralOptions
}
export interface NoUnusedTemplateLiteralOptions {}
export interface RuleWithNoUselessElseOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessElseOptions
}
export interface NoUselessElseOptions {}
export interface RuleWithNoValueAtRuleOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoValueAtRuleOptions
}
export interface NoValueAtRuleOptions {}
export interface RuleWithNoYodaExpressionOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoYodaExpressionOptions
}
export interface NoYodaExpressionOptions {}
export interface RuleWithUseArrayLiteralsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseArrayLiteralsOptions
}
export interface UseArrayLiteralsOptions {}
export interface RuleWithUseAsConstAssertionOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseAsConstAssertionOptions
}
export interface UseAsConstAssertionOptions {}
export interface RuleWithUseAtIndexOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseAtIndexOptions
}
export interface UseAtIndexOptions {}
export interface RuleWithUseBlockStatementsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseBlockStatementsOptions
}
export interface UseBlockStatementsOptions {}
export interface RuleWithUseCollapsedElseIfOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseCollapsedElseIfOptions
}
export interface UseCollapsedElseIfOptions {}
export interface RuleWithUseCollapsedIfOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseCollapsedIfOptions
}
export interface UseCollapsedIfOptions {}
export interface RuleWithUseComponentExportOnlyModulesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseComponentExportOnlyModulesOptions
}
export interface UseComponentExportOnlyModulesOptions {
  /**
   * Allows the export of constants. This option is for environments that support it, such as [Vite](https://vitejs.dev/)
   */
  allowConstantExport?: boolean
  /**
   * A list of names that can be additionally exported from the module This option is for exports that do not hinder [React Fast Refresh](https://github.com/facebook/react/tree/main/packages/react-refresh), such as [`meta` in Remix](https://remix.run/docs/en/main/route/meta)
   */
  allowExportNames?: string[]
}
export interface RuleWithUseConsistentArrayTypeOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseConsistentArrayTypeOptions
}
export interface UseConsistentArrayTypeOptions {
  syntax?: ConsistentArrayType & string
}
export interface RuleWithUseConsistentBuiltinInstantiationOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseConsistentBuiltinInstantiationOptions
}
export interface UseConsistentBuiltinInstantiationOptions {}
export interface RuleWithUseConsistentCurlyBracesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseConsistentCurlyBracesOptions
}
export interface UseConsistentCurlyBracesOptions {}
export interface RuleWithUseConsistentMemberAccessibilityOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseConsistentMemberAccessibilityOptions
}
export interface UseConsistentMemberAccessibilityOptions {
  /**
   * The kind of accessibility you want to enforce. Default to "noPublic"
   */
  accessibility?: Accessibility & string
}
export interface RuleWithUseConsistentObjectDefinitionsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseConsistentObjectDefinitionsOptions
}
export interface UseConsistentObjectDefinitionsOptions {
  /**
   * The preferred syntax to enforce.
   */
  syntax?: ObjectPropertySyntax & string
}
export interface RuleWithUseConstOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseConstOptions
}
export interface UseConstOptions {}
export interface RuleWithUseDefaultParameterLastOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseDefaultParameterLastOptions
}
export interface UseDefaultParameterLastOptions {}
export interface RuleWithUseDefaultSwitchClauseOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseDefaultSwitchClauseOptions
}
export interface UseDefaultSwitchClauseOptions {}
export interface RuleWithUseDeprecatedReasonOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseDeprecatedReasonOptions
}
export interface UseDeprecatedReasonOptions {}
export interface RuleWithUseEnumInitializersOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseEnumInitializersOptions
}
export interface UseEnumInitializersOptions {}
export interface RuleWithUseExplicitLengthCheckOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseExplicitLengthCheckOptions
}
export interface UseExplicitLengthCheckOptions {}
export interface RuleWithUseExponentiationOperatorOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseExponentiationOperatorOptions
}
export interface UseExponentiationOperatorOptions {}
export interface RuleWithUseExportTypeOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseExportTypeOptions
}
export interface UseExportTypeOptions {}
export interface RuleWithUseExportsLastOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseExportsLastOptions
}
export interface UseExportsLastOptions {}
export interface RuleWithUseFilenamingConventionOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseFilenamingConventionOptions
}
export interface UseFilenamingConventionOptions {
  /**
   * Allowed cases for file names.
   */
  filenameCases?: FilenameCases
  /**
   * Regular expression to enforce
   */
  match?: Regex | null
  /**
   * If `false`, then non-ASCII characters are allowed.
   */
  requireAscii?: boolean
  /**
   * If `false`, then consecutive uppercase are allowed in _camel_ and _pascal_ cases. This does not affect other [Case].
   */
  strictCase?: boolean
}
export interface RuleWithUseForOfOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseForOfOptions
}
export interface UseForOfOptions {}
export interface RuleWithUseFragmentSyntaxOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseFragmentSyntaxOptions
}
export interface UseFragmentSyntaxOptions {}
export interface RuleWithUseGraphqlNamingConventionOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseGraphqlNamingConventionOptions
}
export interface UseGraphqlNamingConventionOptions {}
export interface RuleWithUseGroupedAccessorPairsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseGroupedAccessorPairsOptions
}
export interface UseGroupedAccessorPairsOptions {}
export interface RuleWithUseImportTypeOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseImportTypeOptions
}
export interface UseImportTypeOptions {
  /**
   * The style to apply when import types. Default to "auto"
   */
  style?: Style2 & string
}
export interface RuleWithUseLiteralEnumMembersOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseLiteralEnumMembersOptions
}
export interface UseLiteralEnumMembersOptions {}
export interface RuleWithUseNamingConventionOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseNamingConventionOptions
}
/**
 * Rule's options.
 */
export interface UseNamingConventionOptions {
  /**
   * Custom conventions.
   */
  conventions?: Convention[]
  /**
   * If `false`, then non-ASCII characters are allowed.
   */
  requireAscii?: boolean
  /**
   * If `false`, then consecutive uppercase are allowed in _camel_ and _pascal_ cases. This does not affect other [Case].
   */
  strictCase?: boolean
}
export interface Convention {
  /**
   * String cases to enforce
   */
  formats?: Formats
  /**
   * Regular expression to enforce
   */
  match?: Regex | null
  /**
   * Declarations concerned by this convention
   */
  selector?: Selector
}
export interface Selector {
  /**
   * Declaration kind
   */
  kind?: Kind
  /**
   * Modifiers used on the declaration
   */
  modifiers?: Modifiers
  /**
   * Scope of the declaration
   */
  scope?: Scope
}
export interface RuleWithUseNodeAssertStrictOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseNodeAssertStrictOptions
}
export interface UseNodeAssertStrictOptions {}
export interface RuleWithUseNodejsImportProtocolOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseNodejsImportProtocolOptions
}
export interface UseNodejsImportProtocolOptions {}
export interface RuleWithUseNumberNamespaceOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseNumberNamespaceOptions
}
export interface UseNumberNamespaceOptions {}
export interface RuleWithUseNumericSeparatorsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseNumericSeparatorsOptions
}
export interface UseNumericSeparatorsOptions {}
export interface RuleWithUseObjectSpreadOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseObjectSpreadOptions
}
export interface UseObjectSpreadOptions {}
export interface RuleWithUseReadonlyClassPropertiesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseReadonlyClassPropertiesOptions
}
export interface UseReadonlyClassPropertiesOptions {
  /**
   * When `true`, the keywords `public`, `protected`, and `private` are analyzed by the rule.
   */
  checkAllProperties?: boolean
}
export interface RuleWithUseSelfClosingElementsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseSelfClosingElementsOptions
}
export interface UseSelfClosingElementsOptions {
  ignoreHtmlElements?: boolean
}
export interface RuleWithUseShorthandAssignOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseShorthandAssignOptions
}
export interface UseShorthandAssignOptions {}
export interface RuleWithUseShorthandFunctionTypeOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseShorthandFunctionTypeOptions
}
export interface UseShorthandFunctionTypeOptions {}
export interface RuleWithUseSingleVarDeclaratorOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseSingleVarDeclaratorOptions
}
export interface UseSingleVarDeclaratorOptions {}
export interface RuleWithUseSymbolDescriptionOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseSymbolDescriptionOptions
}
export interface UseSymbolDescriptionOptions {}
export interface RuleWithUseTemplateOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseTemplateOptions
}
export interface UseTemplateOptions {}
export interface RuleWithUseThrowNewErrorOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseThrowNewErrorOptions
}
export interface UseThrowNewErrorOptions {}
export interface RuleWithUseThrowOnlyErrorOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseThrowOnlyErrorOptions
}
export interface UseThrowOnlyErrorOptions {}
export interface RuleWithUseTrimStartEndOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseTrimStartEndOptions
}
export interface UseTrimStartEndOptions {}
export interface RuleWithUseUnifiedTypeSignaturesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseUnifiedTypeSignaturesOptions
}
export interface UseUnifiedTypeSignaturesOptions {}
/**
 * A list of rules that belong to this group
 */
export interface Suspicious {
  /**
   * Disallow the use of alert, confirm, and prompt.
   */
  noAlert?: NoAlertConfiguration | null
  /**
   * Use standard constants instead of approximated literals.
   */
  noApproximativeNumericConstant?: NoApproximativeNumericConstantConfiguration | null
  /**
   * Discourage the usage of Array index in keys.
   */
  noArrayIndexKey?: NoArrayIndexKeyConfiguration | null
  /**
   * Disallow assignments in expressions.
   */
  noAssignInExpressions?: NoAssignInExpressionsConfiguration | null
  /**
   * Disallows using an async function as a Promise executor.
   */
  noAsyncPromiseExecutor?: NoAsyncPromiseExecutorConfiguration | null
  /**
   * Prevents the use of the ! pattern in the first position of files.includes in the configuration file.
   */
  noBiomeFirstException?: NoBiomeFirstExceptionConfiguration | null
  /**
   * Disallow bitwise operators.
   */
  noBitwiseOperators?: NoBitwiseOperatorsConfiguration | null
  /**
   * Disallow reassigning exceptions in catch clauses.
   */
  noCatchAssign?: NoCatchAssignConfiguration | null
  /**
   * Disallow reassigning class members.
   */
  noClassAssign?: NoClassAssignConfiguration | null
  /**
   * Prevent comments from being inserted as text nodes
   */
  noCommentText?: NoCommentTextConfiguration | null
  /**
   * Disallow comparing against -0
   */
  noCompareNegZero?: NoCompareNegZeroConfiguration | null
  /**
   * Disallow labeled statements that are not loops.
   */
  noConfusingLabels?: NoConfusingLabelsConfiguration | null
  /**
   * Disallow void type outside of generic or return types.
   */
  noConfusingVoidType?: NoConfusingVoidTypeConfiguration | null
  /**
   * Disallow the use of console.
   */
  noConsole?: NoConsoleConfiguration | null
  /**
   * Disallow TypeScript const enum
   */
  noConstEnum?: NoConstEnumConfiguration | null
  /**
   * Disallow expressions where the operation doesn't affect the value
   */
  noConstantBinaryExpressions?: NoConstantBinaryExpressionsConfiguration | null
  /**
   * Prevents from having control characters and some escape sequences that match control characters in regular expression literals.
   */
  noControlCharactersInRegex?: NoControlCharactersInRegexConfiguration | null
  /**
   * Disallow the use of debugger
   */
  noDebugger?: NoDebuggerConfiguration | null
  /**
   * Disallow direct assignments to document.cookie.
   */
  noDocumentCookie?: NoDocumentCookieConfiguration | null
  /**
   * Prevents importing next/document outside of pages/_document.jsx in Next.js projects.
   */
  noDocumentImportInPage?: NoDocumentImportInPageConfiguration | null
  /**
   * Require the use of === and !==.
   */
  noDoubleEquals?: NoDoubleEqualsConfiguration | null
  /**
   * Disallow duplicate @import rules.
   */
  noDuplicateAtImportRules?: NoDuplicateAtImportRulesConfiguration | null
  /**
   * Disallow duplicate case labels.
   */
  noDuplicateCase?: NoDuplicateCaseConfiguration | null
  /**
   * Disallow duplicate class members.
   */
  noDuplicateClassMembers?: NoDuplicateClassMembersConfiguration | null
  /**
   * Disallow duplicate custom properties within declaration blocks.
   */
  noDuplicateCustomProperties?: NoDuplicateCustomPropertiesConfiguration | null
  /**
   * Disallow duplicate conditions in if-else-if chains
   */
  noDuplicateElseIf?: NoDuplicateElseIfConfiguration | null
  /**
   * No duplicated fields in GraphQL operations.
   */
  noDuplicateFields?: NoDuplicateFieldsConfiguration | null
  /**
   * Disallow duplicate names within font families.
   */
  noDuplicateFontNames?: NoDuplicateFontNamesConfiguration | null
  /**
   * Prevents JSX properties to be assigned multiple times.
   */
  noDuplicateJsxProps?: NoDuplicateJsxPropsConfiguration | null
  /**
   * Disallow two keys with the same name inside objects.
   */
  noDuplicateObjectKeys?: NoDuplicateObjectKeysConfiguration | null
  /**
   * Disallow duplicate function parameter name.
   */
  noDuplicateParameters?: NoDuplicateParametersConfiguration | null
  /**
   * Disallow duplicate properties within declaration blocks.
   */
  noDuplicateProperties?: NoDuplicatePropertiesConfiguration | null
  /**
   * Disallow duplicate selectors within keyframe blocks.
   */
  noDuplicateSelectorsKeyframeBlock?: NoDuplicateSelectorsKeyframeBlockConfiguration | null
  /**
   * A describe block should not contain duplicate hooks.
   */
  noDuplicateTestHooks?: NoDuplicateTestHooksConfiguration | null
  /**
   * Disallow CSS empty blocks.
   */
  noEmptyBlock?: NoEmptyBlockConfiguration | null
  /**
   * Disallow empty block statements and static blocks.
   */
  noEmptyBlockStatements?: NoEmptyBlockStatementsConfiguration | null
  /**
   * Disallow the declaration of empty interfaces.
   */
  noEmptyInterface?: NoEmptyInterfaceConfiguration | null
  /**
   * Disallow variables from evolving into any type through reassignments.
   */
  noEvolvingTypes?: NoEvolvingTypesConfiguration | null
  /**
   * Disallow the any type usage.
   */
  noExplicitAny?: NoExplicitAnyConfiguration | null
  /**
   * Disallow using export or module.exports in files containing tests
   */
  noExportsInTest?: NoExportsInTestConfiguration | null
  /**
   * Prevents the wrong usage of the non-null assertion operator (!) in TypeScript files.
   */
  noExtraNonNullAssertion?: NoExtraNonNullAssertionConfiguration | null
  /**
   * Disallow fallthrough of switch clauses.
   */
  noFallthroughSwitchClause?: NoFallthroughSwitchClauseConfiguration | null
  /**
   * Disallow focused tests.
   */
  noFocusedTests?: NoFocusedTestsConfiguration | null
  /**
   * Disallow reassigning function declarations.
   */
  noFunctionAssign?: NoFunctionAssignConfiguration | null
  /**
   * Disallow assignments to native objects and read-only global variables.
   */
  noGlobalAssign?: NoGlobalAssignConfiguration | null
  /**
   * Use Number.isFinite instead of global isFinite.
   */
  noGlobalIsFinite?: NoGlobalIsFiniteConfiguration | null
  /**
   * Use Number.isNaN instead of global isNaN.
   */
  noGlobalIsNan?: NoGlobalIsNanConfiguration | null
  /**
   * Prevent using the next/head module in pages/_document.js on Next.js projects.
   */
  noHeadImportInDocument?: NoHeadImportInDocumentConfiguration | null
  /**
   * Disallow use of implicit any type on variable declarations.
   */
  noImplicitAnyLet?: NoImplicitAnyLetConfiguration | null
  /**
   * Disallow assigning to imported bindings
   */
  noImportAssign?: NoImportAssignConfiguration | null
  /**
   * Disallow invalid !important within keyframe declarations
   */
  noImportantInKeyframe?: NoImportantInKeyframeConfiguration | null
  /**
   * Disallows the use of irregular whitespace characters.
   */
  noIrregularWhitespace?: NoIrregularWhitespaceConfiguration | null
  /**
   * Disallow labels that share a name with a variable
   */
  noLabelVar?: NoLabelVarConfiguration | null
  /**
   * Disallow characters made with multiple code points in character class syntax.
   */
  noMisleadingCharacterClass?: NoMisleadingCharacterClassConfiguration | null
  /**
   * Enforce proper usage of new and constructor.
   */
  noMisleadingInstantiator?: NoMisleadingInstantiatorConfiguration | null
  /**
   * Checks that the assertion function, for example expect, is placed inside an it() function call.
   */
  noMisplacedAssertion?: NoMisplacedAssertionConfiguration | null
  /**
   * Disallow shorthand assign when variable appears on both sides.
   */
  noMisrefactoredShorthandAssign?: NoMisrefactoredShorthandAssignConfiguration | null
  /**
   * Disallow octal escape sequences in string literals
   */
  noOctalEscape?: NoOctalEscapeConfiguration | null
  /**
   * Disallow direct use of Object.prototype builtins.
   */
  noPrototypeBuiltins?: NoPrototypeBuiltinsConfiguration | null
  /**
   * Disallow the use if quickfix.biome inside editor settings file.
   */
  noQuickfixBiome?: NoQuickfixBiomeConfiguration | null
  /**
   * Prevents React-specific JSX properties from being used.
   */
  noReactSpecificProps?: NoReactSpecificPropsConfiguration | null
  /**
   * Disallow variable, function, class, and type redeclarations in the same scope.
   */
  noRedeclare?: NoRedeclareConfiguration | null
  /**
   * Prevents from having redundant "use strict".
   */
  noRedundantUseStrict?: NoRedundantUseStrictConfiguration | null
  /**
   * Disallow comparisons where both sides are exactly the same.
   */
  noSelfCompare?: NoSelfCompareConfiguration | null
  /**
   * Disallow identifiers from shadowing restricted names.
   */
  noShadowRestrictedNames?: NoShadowRestrictedNamesConfiguration | null
  /**
   * Disallow shorthand properties that override related longhand properties.
   */
  noShorthandPropertyOverrides?: NoShorthandPropertyOverridesConfiguration | null
  /**
   * Disallow disabled tests.
   */
  noSkippedTests?: NoSkippedTestsConfiguration | null
  /**
   * Prevents the use of sparse arrays (arrays with holes).
   */
  noSparseArray?: NoSparseArrayConfiguration | null
  /**
   * It detects possible "wrong" semicolons inside JSX elements.
   */
  noSuspiciousSemicolonInJsx?: NoSuspiciousSemicolonInJsxConfiguration | null
  /**
   * Disallow template literal placeholder syntax in regular strings.
   */
  noTemplateCurlyInString?: NoTemplateCurlyInStringConfiguration | null
  /**
   * Disallow then property.
   */
  noThenProperty?: NoThenPropertyConfiguration | null
  /**
   * Prevents the use of the TypeScript directive @ts-ignore.
   */
  noTsIgnore?: NoTsIgnoreConfiguration | null
  /**
   * Disallow let or var variables that are read but never assigned.
   */
  noUnassignedVariables?: NoUnassignedVariablesConfiguration | null
  /**
   * Disallow unknown at-rules.
   */
  noUnknownAtRules?: NoUnknownAtRulesConfiguration | null
  /**
   * Disallow unsafe declaration merging between interfaces and classes.
   */
  noUnsafeDeclarationMerging?: NoUnsafeDeclarationMergingConfiguration | null
  /**
   * Disallow using unsafe negation.
   */
  noUnsafeNegation?: NoUnsafeNegationConfiguration | null
  /**
   * Disallow unnecessary escapes in string literals.
   */
  noUselessEscapeInString?: NoUselessEscapeInStringConfiguration | null
  /**
   * Disallow useless backreferences in regular expression literals that always match an empty string.
   */
  noUselessRegexBackrefs?: NoUselessRegexBackrefsConfiguration | null
  /**
   * Disallow the use of var
   */
  noVar?: NoVarConfiguration | null
  /**
   * Disallow with statements in non-strict contexts.
   */
  noWith?: NoWithConfiguration | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
  /**
   * Disallow the use of overload signatures that are not next to each other.
   */
  useAdjacentOverloadSignatures?: UseAdjacentOverloadSignaturesConfiguration | null
  /**
   * Ensure async functions utilize await.
   */
  useAwait?: UseAwaitConfiguration | null
  /**
   * Promotes the correct usage for ignoring folders in the configuration file.
   */
  useBiomeIgnoreFolder?: UseBiomeIgnoreFolderConfiguration | null
  /**
   * Enforce default clauses in switch statements to be last
   */
  useDefaultSwitchClauseLast?: UseDefaultSwitchClauseLastConfiguration | null
  /**
   * Enforce passing a message value when creating a built-in error.
   */
  useErrorMessage?: UseErrorMessageConfiguration | null
  /**
   * Enforce get methods to always return a value.
   */
  useGetterReturn?: UseGetterReturnConfiguration | null
  /**
   * Enforces the use of a recommended display strategy with Google Fonts.
   */
  useGoogleFontDisplay?: UseGoogleFontDisplayConfiguration | null
  /**
   * Require for-in loops to include an if statement.
   */
  useGuardForIn?: UseGuardForInConfiguration | null
  /**
   * Use Array.isArray() instead of instanceof Array.
   */
  useIsArray?: UseIsArrayConfiguration | null
  /**
   * Enforce consistent return values in iterable callbacks.
   */
  useIterableCallbackReturn?: UseIterableCallbackReturnConfiguration | null
  /**
   * Require using the namespace keyword over the module keyword to declare TypeScript namespaces.
   */
  useNamespaceKeyword?: UseNamespaceKeywordConfiguration | null
  /**
   * Enforce using the digits argument with Number#toFixed().
   */
  useNumberToFixedDigitsArgument?: UseNumberToFixedDigitsArgumentConfiguration | null
  /**
   * Use static Response methods instead of new Response() constructor when possible.
   */
  useStaticResponseMethods?: UseStaticResponseMethodsConfiguration | null
  /**
   * Enforce the use of the directive "use strict" in script files.
   */
  useStrictMode?: UseStrictModeConfiguration | null
}
export interface RuleWithNoAlertOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoAlertOptions
}
export interface NoAlertOptions {}
export interface RuleWithNoApproximativeNumericConstantOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoApproximativeNumericConstantOptions
}
export interface NoApproximativeNumericConstantOptions {}
export interface RuleWithNoArrayIndexKeyOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoArrayIndexKeyOptions
}
export interface NoArrayIndexKeyOptions {}
export interface RuleWithNoAssignInExpressionsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoAssignInExpressionsOptions
}
export interface NoAssignInExpressionsOptions {}
export interface RuleWithNoAsyncPromiseExecutorOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoAsyncPromiseExecutorOptions
}
export interface NoAsyncPromiseExecutorOptions {}
export interface RuleWithNoBiomeFirstExceptionOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoBiomeFirstExceptionOptions
}
export interface NoBiomeFirstExceptionOptions {}
export interface RuleWithNoBitwiseOperatorsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoBitwiseOperatorsOptions
}
export interface NoBitwiseOperatorsOptions {
  /**
   * Allows a list of bitwise operators to be used as exceptions.
   */
  allow?: string[]
}
export interface RuleWithNoCatchAssignOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoCatchAssignOptions
}
export interface NoCatchAssignOptions {}
export interface RuleWithNoClassAssignOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoClassAssignOptions
}
export interface NoClassAssignOptions {}
export interface RuleWithNoCommentTextOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoCommentTextOptions
}
export interface NoCommentTextOptions {}
export interface RuleWithNoCompareNegZeroOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoCompareNegZeroOptions
}
export interface NoCompareNegZeroOptions {}
export interface RuleWithNoConfusingLabelsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoConfusingLabelsOptions
}
export interface NoConfusingLabelsOptions {
  /**
   * A list of (non-confusing) labels that should be allowed
   */
  allowedLabels?: string[]
}
export interface RuleWithNoConfusingVoidTypeOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoConfusingVoidTypeOptions
}
export interface NoConfusingVoidTypeOptions {}
export interface RuleWithNoConsoleOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoConsoleOptions
}
export interface NoConsoleOptions {
  /**
   * Allowed calls on the console object.
   */
  allow?: string[]
}
export interface RuleWithNoConstEnumOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoConstEnumOptions
}
export interface NoConstEnumOptions {}
export interface RuleWithNoConstantBinaryExpressionsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoConstantBinaryExpressionsOptions
}
export interface NoConstantBinaryExpressionsOptions {}
export interface RuleWithNoControlCharactersInRegexOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoControlCharactersInRegexOptions
}
export interface NoControlCharactersInRegexOptions {}
export interface RuleWithNoDebuggerOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDebuggerOptions
}
export interface NoDebuggerOptions {}
export interface RuleWithNoDocumentCookieOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDocumentCookieOptions
}
export interface NoDocumentCookieOptions {}
export interface RuleWithNoDocumentImportInPageOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDocumentImportInPageOptions
}
export interface NoDocumentImportInPageOptions {}
export interface RuleWithNoDoubleEqualsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDoubleEqualsOptions
}
export interface NoDoubleEqualsOptions {
  /**
   * If `true`, an exception is made when comparing with `null`, as it's often relied on to check both for `null` or `undefined`.
   *
   * If `false`, no such exception will be made.
   */
  ignoreNull?: boolean
}
export interface RuleWithNoDuplicateAtImportRulesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDuplicateAtImportRulesOptions
}
export interface NoDuplicateAtImportRulesOptions {}
export interface RuleWithNoDuplicateCaseOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDuplicateCaseOptions
}
export interface NoDuplicateCaseOptions {}
export interface RuleWithNoDuplicateClassMembersOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDuplicateClassMembersOptions
}
export interface NoDuplicateClassMembersOptions {}
export interface RuleWithNoDuplicateCustomPropertiesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDuplicateCustomPropertiesOptions
}
export interface NoDuplicateCustomPropertiesOptions {}
export interface RuleWithNoDuplicateElseIfOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDuplicateElseIfOptions
}
export interface NoDuplicateElseIfOptions {}
export interface RuleWithNoDuplicateFieldsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDuplicateFieldsOptions
}
export interface NoDuplicateFieldsOptions {}
export interface RuleWithNoDuplicateFontNamesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDuplicateFontNamesOptions
}
export interface NoDuplicateFontNamesOptions {}
export interface RuleWithNoDuplicateJsxPropsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDuplicateJsxPropsOptions
}
export interface NoDuplicateJsxPropsOptions {}
export interface RuleWithNoDuplicateObjectKeysOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDuplicateObjectKeysOptions
}
export interface NoDuplicateObjectKeysOptions {}
export interface RuleWithNoDuplicateParametersOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDuplicateParametersOptions
}
export interface NoDuplicateParametersOptions {}
export interface RuleWithNoDuplicatePropertiesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDuplicatePropertiesOptions
}
export interface NoDuplicatePropertiesOptions {}
export interface RuleWithNoDuplicateSelectorsKeyframeBlockOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDuplicateSelectorsKeyframeBlockOptions
}
export interface NoDuplicateSelectorsKeyframeBlockOptions {}
export interface RuleWithNoDuplicateTestHooksOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDuplicateTestHooksOptions
}
export interface NoDuplicateTestHooksOptions {}
export interface RuleWithNoEmptyBlockOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoEmptyBlockOptions
}
export interface NoEmptyBlockOptions {}
export interface RuleWithNoEmptyBlockStatementsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoEmptyBlockStatementsOptions
}
export interface NoEmptyBlockStatementsOptions {}
export interface RuleWithNoEmptyInterfaceOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoEmptyInterfaceOptions
}
export interface NoEmptyInterfaceOptions {}
export interface RuleWithNoEvolvingTypesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoEvolvingTypesOptions
}
export interface NoEvolvingTypesOptions {}
export interface RuleWithNoExplicitAnyOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoExplicitAnyOptions
}
export interface NoExplicitAnyOptions {}
export interface RuleWithNoExportsInTestOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoExportsInTestOptions
}
export interface NoExportsInTestOptions {}
export interface RuleWithNoExtraNonNullAssertionOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoExtraNonNullAssertionOptions
}
export interface NoExtraNonNullAssertionOptions {}
export interface RuleWithNoFallthroughSwitchClauseOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoFallthroughSwitchClauseOptions
}
export interface NoFallthroughSwitchClauseOptions {}
export interface RuleWithNoFocusedTestsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoFocusedTestsOptions
}
export interface NoFocusedTestsOptions {}
export interface RuleWithNoFunctionAssignOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoFunctionAssignOptions
}
export interface NoFunctionAssignOptions {}
export interface RuleWithNoGlobalAssignOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoGlobalAssignOptions
}
export interface NoGlobalAssignOptions {}
export interface RuleWithNoGlobalIsFiniteOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoGlobalIsFiniteOptions
}
export interface NoGlobalIsFiniteOptions {}
export interface RuleWithNoGlobalIsNanOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoGlobalIsNanOptions
}
export interface NoGlobalIsNanOptions {}
export interface RuleWithNoHeadImportInDocumentOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoHeadImportInDocumentOptions
}
export interface NoHeadImportInDocumentOptions {}
export interface RuleWithNoImplicitAnyLetOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoImplicitAnyLetOptions
}
export interface NoImplicitAnyLetOptions {}
export interface RuleWithNoImportAssignOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoImportAssignOptions
}
export interface NoImportAssignOptions {}
export interface RuleWithNoImportantInKeyframeOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoImportantInKeyframeOptions
}
export interface NoImportantInKeyframeOptions {}
export interface RuleWithNoIrregularWhitespaceOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoIrregularWhitespaceOptions
}
export interface NoIrregularWhitespaceOptions {}
export interface RuleWithNoLabelVarOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoLabelVarOptions
}
export interface NoLabelVarOptions {}
export interface RuleWithNoMisleadingCharacterClassOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoMisleadingCharacterClassOptions
}
export interface NoMisleadingCharacterClassOptions {}
export interface RuleWithNoMisleadingInstantiatorOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoMisleadingInstantiatorOptions
}
export interface NoMisleadingInstantiatorOptions {}
export interface RuleWithNoMisplacedAssertionOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoMisplacedAssertionOptions
}
export interface NoMisplacedAssertionOptions {}
export interface RuleWithNoMisrefactoredShorthandAssignOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoMisrefactoredShorthandAssignOptions
}
export interface NoMisrefactoredShorthandAssignOptions {}
export interface RuleWithNoOctalEscapeOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoOctalEscapeOptions
}
export interface NoOctalEscapeOptions {}
export interface RuleWithNoPrototypeBuiltinsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoPrototypeBuiltinsOptions
}
export interface NoPrototypeBuiltinsOptions {}
export interface RuleWithNoQuickfixBiomeOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoQuickfixBiomeOptions
}
export interface NoQuickfixBiomeOptions {
  /**
   * A list of additional JSON files that should be checked.
   */
  additionalPaths?: string[]
}
export interface RuleWithNoReactSpecificPropsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoReactSpecificPropsOptions
}
export interface NoReactSpecificPropsOptions {}
export interface RuleWithNoRedeclareOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoRedeclareOptions
}
export interface NoRedeclareOptions {}
export interface RuleWithNoRedundantUseStrictOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoRedundantUseStrictOptions
}
export interface NoRedundantUseStrictOptions {}
export interface RuleWithNoSelfCompareOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoSelfCompareOptions
}
export interface NoSelfCompareOptions {}
export interface RuleWithNoShadowRestrictedNamesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoShadowRestrictedNamesOptions
}
export interface NoShadowRestrictedNamesOptions {}
export interface RuleWithNoShorthandPropertyOverridesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoShorthandPropertyOverridesOptions
}
export interface NoShorthandPropertyOverridesOptions {}
export interface RuleWithNoSkippedTestsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoSkippedTestsOptions
}
export interface NoSkippedTestsOptions {}
export interface RuleWithNoSparseArrayOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoSparseArrayOptions
}
export interface NoSparseArrayOptions {}
export interface RuleWithNoSuspiciousSemicolonInJsxOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoSuspiciousSemicolonInJsxOptions
}
export interface NoSuspiciousSemicolonInJsxOptions {}
export interface RuleWithNoTemplateCurlyInStringOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoTemplateCurlyInStringOptions
}
export interface NoTemplateCurlyInStringOptions {}
export interface RuleWithNoThenPropertyOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoThenPropertyOptions
}
export interface NoThenPropertyOptions {}
export interface RuleWithNoTsIgnoreOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoTsIgnoreOptions
}
export interface NoTsIgnoreOptions {}
export interface RuleWithNoUnassignedVariablesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnassignedVariablesOptions
}
export interface NoUnassignedVariablesOptions {}
export interface RuleWithNoUnknownAtRulesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnknownAtRulesOptions
}
export interface NoUnknownAtRulesOptions {}
export interface RuleWithNoUnsafeDeclarationMergingOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnsafeDeclarationMergingOptions
}
export interface NoUnsafeDeclarationMergingOptions {}
export interface RuleWithNoUnsafeNegationOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnsafeNegationOptions
}
export interface NoUnsafeNegationOptions {}
export interface RuleWithNoUselessEscapeInStringOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessEscapeInStringOptions
}
export interface NoUselessEscapeInStringOptions {}
export interface RuleWithNoUselessRegexBackrefsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUselessRegexBackrefsOptions
}
export interface NoUselessRegexBackrefsOptions {}
export interface RuleWithNoVarOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoVarOptions
}
export interface NoVarOptions {}
export interface RuleWithNoWithOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoWithOptions
}
export interface NoWithOptions {}
export interface RuleWithUseAdjacentOverloadSignaturesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseAdjacentOverloadSignaturesOptions
}
export interface UseAdjacentOverloadSignaturesOptions {}
export interface RuleWithUseAwaitOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseAwaitOptions
}
export interface UseAwaitOptions {}
export interface RuleWithUseBiomeIgnoreFolderOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseBiomeIgnoreFolderOptions
}
export interface UseBiomeIgnoreFolderOptions {}
export interface RuleWithUseDefaultSwitchClauseLastOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseDefaultSwitchClauseLastOptions
}
export interface UseDefaultSwitchClauseLastOptions {}
export interface RuleWithUseErrorMessageOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseErrorMessageOptions
}
export interface UseErrorMessageOptions {}
export interface RuleWithUseGetterReturnOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseGetterReturnOptions
}
export interface UseGetterReturnOptions {}
export interface RuleWithUseGoogleFontDisplayOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseGoogleFontDisplayOptions
}
export interface UseGoogleFontDisplayOptions {}
export interface RuleWithUseGuardForInOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseGuardForInOptions
}
export interface UseGuardForInOptions {}
export interface RuleWithUseIsArrayOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseIsArrayOptions
}
export interface UseIsArrayOptions {}
export interface RuleWithUseIterableCallbackReturnOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseIterableCallbackReturnOptions
}
export interface UseIterableCallbackReturnOptions {}
export interface RuleWithUseNamespaceKeywordOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseNamespaceKeywordOptions
}
export interface UseNamespaceKeywordOptions {}
export interface RuleWithUseNumberToFixedDigitsArgumentOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseNumberToFixedDigitsArgumentOptions
}
export interface UseNumberToFixedDigitsArgumentOptions {}
export interface RuleWithUseStaticResponseMethodsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseStaticResponseMethodsOptions
}
export interface UseStaticResponseMethodsOptions {}
export interface RuleWithUseStrictModeOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseStrictModeOptions
}
export interface UseStrictModeOptions {}
export interface OverridePattern {
  /**
   * Specific configuration for the Json language
   */
  assist?: OverrideAssistConfiguration | null
  /**
   * Specific configuration for the CSS language
   */
  css?: CssConfiguration | null
  /**
   * Specific configuration for the filesystem
   */
  files?: OverrideFilesConfiguration | null
  /**
   * Specific configuration for the Json language
   */
  formatter?: OverrideFormatterConfiguration | null
  /**
   * Specific configuration for the Graphql language
   */
  graphql?: GraphqlConfiguration | null
  /**
   * Specific configuration for the GritQL language
   */
  grit?: GritConfiguration | null
  /**
   * Specific configuration for the GritQL language
   */
  html?: HtmlConfiguration | null
  /**
   * A list of glob patterns. Biome will include files/folders that will match these patterns.
   */
  includes?: OverrideGlobs | null
  /**
   * Specific configuration for the JavaScript language
   */
  javascript?: JsConfiguration | null
  /**
   * Specific configuration for the Json language
   */
  json?: JsonConfiguration | null
  /**
   * Specific configuration for the Json language
   */
  linter?: OverrideLinterConfiguration | null
  /**
   * Specific configuration for additional plugins
   */
  plugins?: Plugins | null
}
export interface OverrideAssistConfiguration {
  /**
   * List of actions
   */
  actions?: Actions | null
  /**
   * if `false`, it disables the feature and the assist won't be executed. `true` by default
   */
  enabled?: Bool | null
}
export interface OverrideFilesConfiguration {
  /**
   * File size limit in bytes
   */
  maxSize?: MaxSize | null
}
export interface OverrideFormatterConfiguration {
  /**
   * The attribute position style.
   */
  attributePosition?: AttributePosition | null
  /**
   * Put the `>` of a multi-line HTML or JSX element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
   */
  bracketSameLine?: BracketSameLine | null
  /**
   * Whether to insert spaces around brackets in object literals. Defaults to true.
   */
  bracketSpacing?: BracketSpacing | null
  enabled?: Bool | null
  /**
   * Whether to expand arrays and objects on multiple lines. When set to `auto`, object literals are formatted on multiple lines if the first property has a newline, and array literals are formatted on a single line if it fits in the line. When set to `always`, these literals are formatted on multiple lines, regardless of length of the list. When set to `never`, these literals are formatted on a single line if it fits in the line. When formatting `package.json`, Biome will use `always` unless configured otherwise. Defaults to "auto".
   */
  expand?: Expand | null
  /**
   * Stores whether formatting should be allowed to proceed if a given file has syntax errors
   */
  formatWithErrors?: Bool | null
  /**
   * The size of the indentation, 2 by default (deprecated, use `indent-width`)
   */
  indentSize?: IndentWidth | null
  /**
   * The indent style.
   */
  indentStyle?: IndentStyle | null
  /**
   * The size of the indentation, 2 by default
   */
  indentWidth?: IndentWidth | null
  /**
   * The type of line ending.
   */
  lineEnding?: LineEnding | null
  /**
   * What's the max width of a line. Defaults to 80.
   */
  lineWidth?: LineWidth | null
}
export interface OverrideLinterConfiguration {
  /**
   * List of rules
   */
  domains?: RuleDomains | null
  /**
   * if `false`, it disables the feature and the linter won't be executed. `true` by default
   */
  enabled?: Bool | null
  /**
   * List of rules
   */
  rules?: Rules | null
}
/**
 * Set of properties to integrate Biome with a VCS software.
 */
export interface VcsConfiguration {
  /**
   * The kind of client.
   */
  clientKind?: VcsClientKind | null
  /**
   * The main branch of the project
   */
  defaultBranch?: string | null
  /**
   * Whether Biome should integrate itself with the VCS client
   */
  enabled?: Bool | null
  /**
   * The folder where Biome should check for VCS files. By default, Biome will use the same folder where `biome.json` was found.
   *
   * If Biome can't find the configuration, it will attempt to use the current working directory. If no current working directory can't be found, Biome won't use the VCS integration, and a diagnostic will be emitted
   */
  root?: string | null
  /**
   * Whether Biome should use the VCS ignore file. When [true], Biome will ignore the files specified in the ignore file.
   */
  useIgnoreFile?: Bool | null
}
