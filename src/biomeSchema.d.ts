/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Schema = string
export type RuleAssistConfigurationFor_Options = RuleAssistPlainConfiguration | RuleAssistWithOptionsFor_Options
export type RuleAssistPlainConfiguration = 'off' | 'on'
export type ImportGroup = null | GroupMatcher | GroupMatcher[]
export type GroupMatcher = ImportMatcher | SourceMatcher
export type SourcesMatcher = SourceMatcher | SourceMatcher[]
export type SourceMatcher = PredefinedGroupMatcher | ImportSourceGlob
export type PredefinedGroupMatcher = string
/**
 * Glob to match against import sources.
 */
export type ImportSourceGlob = Glob
export type Glob = string
export type ImportGroups = ImportGroup[]
export type RuleAssistConfigurationFor_Null = RuleAssistPlainConfiguration | RuleAssistWithOptionsFor_Null
export type Bool = boolean
/**
 * Normalized Biome glob pattern that strips `./` from the pattern.
 */
export type NormalizedGlob = Glob
export type IndentStyle = 'tab' | 'space'
export type IndentWidth = number
export type LineEnding = 'lf' | 'crlf' | 'cr'
/**
 * Validated value for the `line_width` formatter options
 *
 * The allowed range of values is 1..=320
 */
export type LineWidth = number
export type QuoteStyle = 'double' | 'single'
export type MaxSize = number
export type AttributePosition = 'auto' | 'multiline'
/**
 * Put the `>` of a multi-line HTML or JSX element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
 */
export type BracketSameLine = boolean
export type BracketSpacing = boolean
export type Expand = 'auto' | 'always' | 'never'
/**
 * Whether to indent the content of `<script>` and `<style>` tags for HTML-ish templating languages (Vue, Svelte, etc.).
 *
 * When true, the content of `<script>` and `<style>` tags will be indented one level.
 */
export type IndentScriptAndStyle = boolean
/**
 * Controls whether void-elements should be self closed
 */
export type SelfCloseVoidElements = 'never' | 'always'
/**
 * Whitespace sensitivity for HTML formatting.
 *
 * The following two cases won't produce the same output:
 *
 * |                |      html      |    output    | | -------------- | :------------: | :----------: | | with spaces    | `1<b> 2 </b>3` | 1<b> 2 </b>3 | | without spaces |  `1<b>2</b>3`  |  1<b>2</b>3  |
 *
 * This happens because whitespace is significant in inline elements.
 *
 * As a consequence of this, the formatter must format blocks that look like this (assume a small line width, <20): ```html <span>really long content</span> ``` as this, where the content hugs the tags: ```html <span >really long content</span > ```
 *
 * Note that this is only necessary for inline elements. Block elements do not have this restriction.
 */
export type WhitespaceSensitivity = 'css' | 'strict' | 'ignore'
/**
 * Options that changes how the HTML parser behaves
 */
export type HtmlParserConfiguration = null
export type ArrowParentheses = 'always' | 'asNeeded'
export type QuoteProperties = 'asNeeded' | 'preserve'
export type Semicolons = 'always' | 'asNeeded'
/**
 * Print trailing commas wherever possible in multi-line comma-separated syntactic structures.
 */
export type TrailingCommas = 'all' | 'es5' | 'none'
/**
 * Indicates the type of runtime or transformation used for interpreting JSX.
 */
export type JsxRuntime = 'transparent' | 'reactClassic'
export type TrailingCommas2 = 'none' | 'all'
export type RuleDomainValue = 'all' | 'none' | 'recommended'
export type SeverityOrGroupFor_A11Y = GroupPlainConfiguration | A11Y
export type GroupPlainConfiguration = 'off' | 'on' | 'info' | 'warn' | 'error'
export type RuleFixConfiguration = RulePlainConfiguration | RuleWithFixNoOptions
export type RulePlainConfiguration = 'off' | 'on' | 'info' | 'warn' | 'error'
/**
 * Used to identify the kind of code action emitted by a rule
 */
export type FixKind = 'none' | 'safe' | 'unsafe'
export type NoLabelWithoutControlConfiguration = RulePlainConfiguration | RuleWithNoLabelWithoutControlOptions
export type RuleConfiguration = RulePlainConfiguration | RuleWithNoOptions
export type ValidAriaRoleConfiguration = RulePlainConfiguration | RuleWithValidAriaRoleOptions
export type SeverityOrGroupFor_Complexity = GroupPlainConfiguration | Complexity
export type ComplexityConfiguration = RulePlainConfiguration | RuleWithComplexityOptions
export type NoForEachConfiguration = RulePlainConfiguration | RuleWithNoForEachOptions
export type SeverityOrGroupFor_Correctness = GroupPlainConfiguration | Correctness
export type NoPrivateImportsConfiguration = RulePlainConfiguration | RuleWithNoPrivateImportsOptions
export type Visibility = 'public' | 'package' | 'private'
export type NoUndeclaredDependenciesConfiguration = RulePlainConfiguration | RuleWithNoUndeclaredDependenciesOptions
export type DependencyAvailability = boolean | string[]
export type UndeclaredVariablesConfiguration = RulePlainConfiguration | RuleWithUndeclaredVariablesOptions
export type NoUnusedVariablesConfiguration = RulePlainConfiguration | RuleWithNoUnusedVariablesOptions
export type UseExhaustiveDependenciesConfiguration = RulePlainConfiguration | RuleWithUseExhaustiveDependenciesOptions
export type StableHookResult = boolean | number[]
export type DeprecatedHooksConfiguration = RulePlainConfiguration | RuleWithDeprecatedHooksOptions
export type UseImportExtensionsConfiguration = RulePlainConfiguration | RuleWithUseImportExtensionsOptions
export type SeverityOrGroupFor_Nursery = GroupPlainConfiguration | Nursery
export type NoBitwiseOperatorsConfiguration = RulePlainConfiguration | RuleWithNoBitwiseOperatorsOptions
export type NoRestrictedElementsConfiguration = RulePlainConfiguration | RuleWithNoRestrictedElementsOptions
export type RestrictedImportsConfiguration = RulePlainConfiguration | RuleWithRestrictedImportsOptions
export type CustomRestrictedImport = string | CustomRestrictedImportOptions
export type NoRestrictedTypesConfiguration = RulePlainConfiguration | RuleWithNoRestrictedTypesOptions
export type CustomRestrictedType = string | CustomRestrictedTypeOptions
export type NoSecretsConfiguration = RulePlainConfiguration | RuleWithNoSecretsOptions
export type UseComponentExportOnlyModulesConfiguration =
  | RulePlainConfiguration
  | RuleWithUseComponentExportOnlyModulesOptions
export type ConsistentMemberAccessibilityConfiguration =
  | RulePlainConfiguration
  | RuleWithConsistentMemberAccessibilityOptions
export type Accessibility = 'noPublic' | 'explicit' | 'none'
export type UseConsistentObjectDefinitionConfiguration =
  | RulePlainConfiguration
  | RuleWithUseConsistentObjectDefinitionOptions
export type ObjectPropertySyntax = 'explicit' | 'shorthand'
export type UtilityClassSortingConfiguration = RulePlainConfiguration | RuleWithUtilityClassSortingOptions
export type UseValidAutocompleteConfiguration = RulePlainConfiguration | RuleWithUseValidAutocompleteOptions
export type SeverityOrGroupFor_Performance = GroupPlainConfiguration | Performance
export type SeverityOrGroupFor_Security = GroupPlainConfiguration | Security
export type NoBlankTargetConfiguration = RulePlainConfiguration | RuleWithNoBlankTargetOptions
export type SeverityOrGroupFor_Style = GroupPlainConfiguration | Style
export type RestrictedGlobalsConfiguration = RulePlainConfiguration | RuleWithRestrictedGlobalsOptions
export type ConsistentArrayTypeConfiguration = RulePlainConfiguration | RuleWithConsistentArrayTypeOptions
export type ConsistentArrayType = 'shorthand' | 'generic'
export type FilenamingConventionConfiguration = RulePlainConfiguration | RuleWithFilenamingConventionOptions
/**
 * Supported cases for file names.
 */
export type FilenameCase = 'camelCase' | 'export' | 'kebab-case' | 'PascalCase' | 'snake_case'
export type FilenameCases = FilenameCase[]
export type Regex = string
export type ImportTypeConfiguration = RulePlainConfiguration | RuleWithImportTypeOptions
/**
 * Rule's options.
 */
export type Style2 = 'auto' | 'inlineType' | 'separatedType'
export type NamingConventionConfiguration = RulePlainConfiguration | RuleWithNamingConventionOptions
/**
 * Supported cases.
 */
export type Format = 'camelCase' | 'CONSTANT_CASE' | 'PascalCase' | 'snake_case'
export type Formats = Format[]
export type Kind =
  | (
      | 'class'
      | 'enum'
      | 'interface'
      | 'enumMember'
      | 'importNamespace'
      | 'exportNamespace'
      | 'variable'
      | 'const'
      | 'let'
      | 'using'
      | 'var'
      | 'catchParameter'
      | 'indexParameter'
      | 'exportAlias'
      | 'importAlias'
      | 'classGetter'
      | 'classSetter'
      | 'classMethod'
      | 'objectLiteralProperty'
      | 'objectLiteralGetter'
      | 'objectLiteralSetter'
      | 'objectLiteralMethod'
      | 'typeAlias'
    )
  | 'any'
  | 'typeLike'
  | 'function'
  | 'namespaceLike'
  | 'namespace'
  | 'functionParameter'
  | 'typeParameter'
  | 'classMember'
  | 'classProperty'
  | 'objectLiteralMember'
  | 'typeMember'
  | 'typeGetter'
  | 'typeProperty'
  | 'typeSetter'
  | 'typeMethod'
export type RestrictedModifier = 'abstract' | 'private' | 'protected' | 'readonly' | 'static'
export type Modifiers = RestrictedModifier[]
export type Scope = 'any' | 'global'
export type UseSelfClosingElementsConfiguration = RulePlainConfiguration | RuleWithUseSelfClosingElementsOptions
export type SeverityOrGroupFor_Suspicious = GroupPlainConfiguration | Suspicious
export type NoConfusingLabelsConfiguration = RulePlainConfiguration | RuleWithNoConfusingLabelsOptions
export type NoConsoleConfiguration = RulePlainConfiguration | RuleWithNoConsoleOptions
export type NoDoubleEqualsConfiguration = RulePlainConfiguration | RuleWithNoDoubleEqualsOptions
export type OverrideGlobs = Glob[]
export type Overrides = OverridePattern[]
export type PluginConfiguration = string
export type Plugins = PluginConfiguration[]
export type VcsClientKind = 'git'

/**
 * The configuration that is contained inside the file `biome.json`
 */
export interface Configuration {
  /**
   * A field for the [JSON schema](https://json-schema.org/) specification
   */
  $schema?: Schema | null
  /**
   * Specific configuration for assists
   */
  assist?: AssistConfiguration | null
  /**
   * Specific configuration for the Css language
   */
  css?: CssConfiguration | null
  /**
   * A list of paths to other JSON files, used to extends the current configuration.
   */
  extends?: string[] | null
  /**
   * The configuration of the filesystem
   */
  files?: FilesConfiguration | null
  /**
   * The configuration of the formatter
   */
  formatter?: FormatterConfiguration | null
  /**
   * Specific configuration for the GraphQL language
   */
  graphql?: GraphqlConfiguration | null
  /**
   * Specific configuration for the GraphQL language
   */
  grit?: GritConfiguration | null
  /**
   * Specific configuration for the HTML language
   */
  html?: HtmlConfiguration | null
  /**
   * Specific configuration for the JavaScript language
   */
  javascript?: JsConfiguration | null
  /**
   * Specific configuration for the Json language
   */
  json?: JsonConfiguration | null
  /**
   * The configuration for the linter
   */
  linter?: LinterConfiguration | null
  /**
   * A list of granular patterns that should be applied only to a sub set of files
   */
  overrides?: Overrides | null
  /**
   * List of plugins to load.
   */
  plugins?: Plugins | null
  /**
   * Indicates whether this configuration file is at the root of a Biome project. By default, this is `true`.
   */
  root?: Bool | null
  /**
   * The configuration of the VCS integration
   */
  vcs?: VcsConfiguration | null
}
export interface AssistConfiguration {
  /**
   * Whether Biome should fail in CLI if the assist were not applied to the code.
   */
  actions?: Actions | null
  /**
   * Whether Biome should enable assist via LSP and CLI.
   */
  enabled?: Bool | null
  /**
   * A list of glob patterns. Biome will include files/folders that will match these patterns.
   */
  includes?: NormalizedGlob[] | null
}
export interface Actions {
  /**
   * It enables the assist actions recommended by Biome. `true` by default.
   */
  recommended?: boolean | null
  source?: Source | null
}
/**
 * A list of rules that belong to this group
 */
export interface Source {
  /**
   * Provides a code action to sort the imports and exports in the file using a built-in or custom order.
   */
  organizeImports?: RuleAssistConfigurationFor_Options | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
  /**
   * Enforce attribute sorting in JSX elements.
   */
  useSortedAttributes?: RuleAssistConfigurationFor_Null | null
  /**
   * Sorts the keys of a JSON object in natural order
   */
  useSortedKeys?: RuleAssistConfigurationFor_Null | null
  /**
   * Enforce ordering of CSS properties and nested rules.
   */
  useSortedProperties?: RuleAssistConfigurationFor_Null | null
}
export interface RuleAssistWithOptionsFor_Options {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RuleAssistPlainConfiguration
  /**
   * Rule's options
   */
  options: Options
}
export interface Options {
  groups?: ImportGroups
}
export interface ImportMatcher {
  source?: SourcesMatcher | null
  type?: boolean | null
  [k: string]: unknown
}
export interface RuleAssistWithOptionsFor_Null {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RuleAssistPlainConfiguration
  /**
   * Rule's options
   */
  options: null
}
/**
 * Options applied to CSS files
 */
export interface CssConfiguration {
  /**
   * CSS assist options
   */
  assist?: CssAssistConfiguration | null
  /**
   * CSS formatter options
   */
  formatter?: CssFormatterConfiguration | null
  /**
   * CSS globals
   */
  globals?: string[] | null
  /**
   * CSS linter options
   */
  linter?: CssLinterConfiguration | null
  /**
   * CSS parsing options
   */
  parser?: CssParserConfiguration | null
}
/**
 * Options that changes how the CSS assist behaves
 */
export interface CssAssistConfiguration {
  /**
   * Control the assist for CSS files.
   */
  enabled?: Bool | null
}
/**
 * Options that changes how the CSS formatter behaves
 */
export interface CssFormatterConfiguration {
  /**
   * Control the formatter for CSS (and its super languages) files.
   */
  enabled?: Bool | null
  /**
   * The indent style applied to CSS (and its super languages) files.
   */
  indentStyle?: IndentStyle | null
  /**
   * The size of the indentation applied to CSS (and its super languages) files. Default to 2.
   */
  indentWidth?: IndentWidth | null
  /**
   * The type of line ending applied to CSS (and its super languages) files.
   */
  lineEnding?: LineEnding | null
  /**
   * What's the max width of a line applied to CSS (and its super languages) files. Defaults to 80.
   */
  lineWidth?: LineWidth | null
  /**
   * The type of quotes used in CSS code. Defaults to double.
   */
  quoteStyle?: QuoteStyle | null
}
/**
 * Options that changes how the CSS linter behaves
 */
export interface CssLinterConfiguration {
  /**
   * Control the linter for CSS files.
   */
  enabled?: Bool | null
}
/**
 * Options that changes how the CSS parser behaves
 */
export interface CssParserConfiguration {
  /**
   * Allow comments to appear on incorrect lines in `.css` files
   */
  allowWrongLineComments?: Bool | null
  /**
   * Enables parsing of CSS Modules specific features.
   */
  cssModules?: Bool | null
}
/**
 * The configuration of the filesystem
 */
export interface FilesConfiguration {
  /**
   * Tells Biome to not emit diagnostics when handling files that doesn't know
   */
  ignoreUnknown?: Bool | null
  /**
   * A list of glob patterns. Biome will handle only those files/folders that will match these patterns.
   */
  includes?: NormalizedGlob[] | null
  /**
   * The maximum allowed size for source code files in bytes. Files above this limit will be ignored for performance reasons. Defaults to 1 MiB
   */
  maxSize?: MaxSize | null
}
/**
 * Generic options applied to all files
 */
export interface FormatterConfiguration {
  /**
   * The attribute position style in HTML-ish languages. Defaults to auto.
   */
  attributePosition?: AttributePosition | null
  /**
   * Put the `>` of a multi-line HTML or JSX element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
   */
  bracketSameLine?: BracketSameLine | null
  /**
   * Whether to insert spaces around brackets in object literals. Defaults to true.
   */
  bracketSpacing?: BracketSpacing | null
  enabled?: Bool | null
  /**
   * Whether to expand arrays and objects on multiple lines. When set to `auto`, object literals are formatted on multiple lines if the first property has a newline, and array literals are formatted on a single line if it fits in the line. When set to `always`, these literals are formatted on multiple lines, regardless of length of the list. When set to `never`, these literals are formatted on a single line if it fits in the line. When formatting `package.json`, Biome will use `always` unless configured otherwise. Defaults to "auto".
   */
  expand?: Expand | null
  /**
   * Stores whether formatting should be allowed to proceed if a given file has syntax errors
   */
  formatWithErrors?: Bool | null
  /**
   * A list of glob patterns. The formatter will include files/folders that will match these patterns.
   */
  includes?: NormalizedGlob[] | null
  /**
   * The indent style.
   */
  indentStyle?: IndentStyle | null
  /**
   * The size of the indentation, 2 by default
   */
  indentWidth?: IndentWidth | null
  /**
   * The type of line ending.
   */
  lineEnding?: LineEnding | null
  /**
   * What's the max width of a line. Defaults to 80.
   */
  lineWidth?: LineWidth | null
  /**
   * Use any `.editorconfig` files to configure the formatter. Configuration in `biome.json` will override `.editorconfig` configuration.
   *
   * Default: `true`.
   */
  useEditorconfig?: Bool | null
}
/**
 * Options applied to GraphQL files
 */
export interface GraphqlConfiguration {
  /**
   * Assist options
   */
  assist?: GraphqlAssistConfiguration | null
  /**
   * GraphQL formatter options
   */
  formatter?: GraphqlFormatterConfiguration | null
  linter?: GraphqlLinterConfiguration | null
}
/**
 * Options that changes how the GraphQL linter behaves
 */
export interface GraphqlAssistConfiguration {
  /**
   * Control the formatter for GraphQL files.
   */
  enabled?: Bool | null
}
/**
 * Options that changes how the GraphQL formatter behaves
 */
export interface GraphqlFormatterConfiguration {
  /**
   * Whether to insert spaces around brackets in object literals. Defaults to true.
   */
  bracketSpacing?: BracketSpacing | null
  /**
   * Control the formatter for GraphQL files.
   */
  enabled?: Bool | null
  /**
   * The indent style applied to GraphQL files.
   */
  indentStyle?: IndentStyle | null
  /**
   * The size of the indentation applied to GraphQL files. Default to 2.
   */
  indentWidth?: IndentWidth | null
  /**
   * The type of line ending applied to GraphQL files.
   */
  lineEnding?: LineEnding | null
  /**
   * What's the max width of a line applied to GraphQL files. Defaults to 80.
   */
  lineWidth?: LineWidth | null
  /**
   * The type of quotes used in GraphQL code. Defaults to double.
   */
  quoteStyle?: QuoteStyle | null
}
/**
 * Options that change how the GraphQL linter behaves.
 */
export interface GraphqlLinterConfiguration {
  /**
   * Control the formatter for GraphQL files.
   */
  enabled?: Bool | null
}
/**
 * Options applied to GritQL files
 */
export interface GritConfiguration {
  /**
   * Assist options
   */
  assist?: GritAssistConfiguration | null
  /**
   * Formatting options
   */
  formatter?: GritFormatterConfiguration | null
  /**
   * Formatting options
   */
  linter?: GritLinterConfiguration | null
}
export interface GritAssistConfiguration {
  /**
   * Control the assist functionality for Grit files.
   */
  enabled?: Bool | null
}
export interface GritFormatterConfiguration {
  /**
   * Control the formatter for Grit files.
   */
  enabled?: Bool | null
  /**
   * The indent style applied to Grit files.
   */
  indentStyle?: IndentStyle | null
  /**
   * The size of the indentation applied to Grit files. Default to 2.
   */
  indentWidth?: IndentWidth | null
  /**
   * The type of line ending applied to Grit files.
   */
  lineEnding?: LineEnding | null
  /**
   * What's the max width of a line applied to Grit files. Defaults to 80.
   */
  lineWidth?: LineWidth | null
}
export interface GritLinterConfiguration {
  /**
   * Control the linter for Grit files.
   */
  enabled?: Bool | null
}
/**
 * Options applied to HTML files
 */
export interface HtmlConfiguration {
  /**
   * HTML formatter options
   */
  formatter?: HtmlFormatterConfiguration | null
  /**
   * HTML parsing options
   */
  parser?: HtmlParserConfiguration
}
/**
 * Options that changes how the HTML formatter behaves
 */
export interface HtmlFormatterConfiguration {
  /**
   * The attribute position style in HTML elements. Defaults to auto.
   */
  attributePosition?: AttributePosition | null
  /**
   * Whether to hug the closing bracket of multiline HTML tags to the end of the last line, rather than being alone on the following line. Defaults to false.
   */
  bracketSameLine?: BracketSameLine | null
  /**
   * Control the formatter for HTML (and its super languages) files.
   */
  enabled?: Bool | null
  /**
   * Whether to indent the `<script>` and `<style>` tags for HTML (and its super languages). Defaults to false.
   */
  indentScriptAndStyle?: IndentScriptAndStyle | null
  /**
   * The indent style applied to HTML (and its super languages) files.
   */
  indentStyle?: IndentStyle | null
  /**
   * The size of the indentation applied to HTML (and its super languages) files. Default to 2.
   */
  indentWidth?: IndentWidth | null
  /**
   * The type of line ending applied to HTML (and its super languages) files.
   */
  lineEnding?: LineEnding | null
  /**
   * What's the max width of a line applied to HTML (and its super languages) files. Defaults to 80.
   */
  lineWidth?: LineWidth | null
  /**
   * Whether void elements should be self-closed. Defaults to never.
   */
  selfCloseVoidElements?: SelfCloseVoidElements | null
  /**
   * Whether to account for whitespace sensitivity when formatting HTML (and its super languages). Defaults to "css".
   */
  whitespaceSensitivity?: WhitespaceSensitivity | null
}
/**
 * A set of options applied to the JavaScript files
 */
export interface JsConfiguration {
  /**
   * Assist options
   */
  assist?: JsAssistConfiguration | null
  /**
   * Formatting options
   */
  formatter?: JsFormatterConfiguration | null
  /**
   * A list of global bindings that should be ignored by the analyzers
   *
   * If defined here, they should not emit diagnostics.
   */
  globals?: string[] | null
  /**
   * Indicates the type of runtime or transformation used for interpreting JSX.
   */
  jsxRuntime?: JsxRuntime | null
  /**
   * Linter options
   */
  linter?: JsLinterConfiguration | null
  /**
   * Parsing options
   */
  parser?: JsParserConfiguration | null
}
/**
 * Assist options specific to the JavaScript assist
 */
export interface JsAssistConfiguration {
  /**
   * Control the assist for JavaScript (and its super languages) files.
   */
  enabled?: Bool | null
}
/**
 * Formatting options specific to the JavaScript files
 */
export interface JsFormatterConfiguration {
  /**
   * Whether to add non-necessary parentheses to arrow functions. Defaults to "always".
   */
  arrowParentheses?: ArrowParentheses | null
  /**
   * The attribute position style in JSX elements. Defaults to auto.
   */
  attributePosition?: AttributePosition | null
  /**
   * Whether to hug the closing bracket of multiline HTML/JSX tags to the end of the last line, rather than being alone on the following line. Defaults to false.
   */
  bracketSameLine?: BracketSameLine | null
  /**
   * Whether to insert spaces around brackets in object literals. Defaults to true.
   */
  bracketSpacing?: BracketSpacing | null
  /**
   * Control the formatter for JavaScript (and its super languages) files.
   */
  enabled?: Bool | null
  /**
   * Whether to expand arrays and objects on multiple lines. When set to `auto`, object literals are formatted on multiple lines if the first property has a newline, and array literals are formatted on a single line if it fits in the line. When set to `always`, these literals are formatted on multiple lines, regardless of length of the list. When set to `never`, these literals are formatted on a single line if it fits in the line. When formatting `package.json`, Biome will use `always` unless configured otherwise. Defaults to "auto".
   */
  expand?: Expand | null
  /**
   * The indent style applied to JavaScript (and its super languages) files.
   */
  indentStyle?: IndentStyle | null
  /**
   * The size of the indentation applied to JavaScript (and its super languages) files. Default to 2.
   */
  indentWidth?: IndentWidth | null
  /**
   * The type of quotes used in JSX. Defaults to double.
   */
  jsxQuoteStyle?: QuoteStyle | null
  /**
   * The type of line ending applied to JavaScript (and its super languages) files.
   */
  lineEnding?: LineEnding | null
  /**
   * What's the max width of a line applied to JavaScript (and its super languages) files. Defaults to 80.
   */
  lineWidth?: LineWidth | null
  /**
   * When properties in objects are quoted. Defaults to asNeeded.
   */
  quoteProperties?: QuoteProperties | null
  /**
   * The type of quotes used in JavaScript code. Defaults to double.
   */
  quoteStyle?: QuoteStyle | null
  /**
   * Whether the formatter prints semicolons for all statements or only in for statements where it is necessary because of ASI.
   */
  semicolons?: Semicolons | null
  /**
   * Print trailing commas wherever possible in multi-line comma-separated syntactic structures. Defaults to "all".
   */
  trailingCommas?: TrailingCommas | null
}
/**
 * Linter options specific to the JavaScript linter
 */
export interface JsLinterConfiguration {
  /**
   * Control the linter for JavaScript (and its super languages) files.
   */
  enabled?: Bool | null
}
/**
 * Options that changes how the JavaScript parser behaves
 */
export interface JsParserConfiguration {
  /**
   * Enables parsing of Grit metavariables. Defaults to `false`.
   */
  gritMetavariables?: Bool | null
  /**
   * When enabled, files like `.js`/`.mjs`/`.cjs` may contain JSX syntax.
   *
   * Defaults to `true`.
   */
  jsxEverywhere?: Bool | null
  /**
   * It enables the experimental and unsafe parsing of parameter decorators
   *
   * These decorators belong to an old proposal, and they are subject to change.
   */
  unsafeParameterDecoratorsEnabled?: Bool | null
}
/**
 * Options applied to JSON files
 */
export interface JsonConfiguration {
  /**
   * Assist options
   */
  assist?: JsonAssistConfiguration | null
  /**
   * Formatting options
   */
  formatter?: JsonFormatterConfiguration | null
  /**
   * Linting options
   */
  linter?: JsonLinterConfiguration | null
  /**
   * Parsing options
   */
  parser?: JsonParserConfiguration | null
}
/**
 * Linter options specific to the JSON linter
 */
export interface JsonAssistConfiguration {
  /**
   * Control the assist for JSON (and its super languages) files.
   */
  enabled?: Bool | null
}
export interface JsonFormatterConfiguration {
  /**
   * Whether to insert spaces around brackets in object literals. Defaults to true.
   */
  bracketSpacing?: BracketSpacing | null
  /**
   * Control the formatter for JSON (and its super languages) files.
   */
  enabled?: Bool | null
  /**
   * Whether to expand arrays and objects on multiple lines. When set to `auto`, object literals are formatted on multiple lines if the first property has a newline, and array literals are formatted on a single line if it fits in the line. When set to `always`, these literals are formatted on multiple lines, regardless of length of the list. When set to `never`, these literals are formatted on a single line if it fits in the line. When formatting `package.json`, Biome will use `always` unless configured otherwise. Defaults to "auto".
   */
  expand?: Expand | null
  /**
   * The indent style applied to JSON (and its super languages) files.
   */
  indentStyle?: IndentStyle | null
  /**
   * The size of the indentation applied to JSON (and its super languages) files. Default to 2.
   */
  indentWidth?: IndentWidth | null
  /**
   * The type of line ending applied to JSON (and its super languages) files.
   */
  lineEnding?: LineEnding | null
  /**
   * What's the max width of a line applied to JSON (and its super languages) files. Defaults to 80.
   */
  lineWidth?: LineWidth | null
  /**
   * Print trailing commas wherever possible in multi-line comma-separated syntactic structures. Defaults to "none".
   */
  trailingCommas?: TrailingCommas2 | null
}
/**
 * Linter options specific to the JSON linter
 */
export interface JsonLinterConfiguration {
  /**
   * Control the linter for JSON (and its super languages) files.
   */
  enabled?: Bool | null
}
/**
 * Options that changes how the JSON parser behaves
 */
export interface JsonParserConfiguration {
  /**
   * Allow parsing comments in `.json` files
   */
  allowComments?: Bool | null
  /**
   * Allow parsing trailing commas in `.json` files
   */
  allowTrailingCommas?: Bool | null
}
export interface LinterConfiguration {
  /**
   * An object where the keys are the names of the domains, and the values are `all`, `recommended`, or `none`.
   */
  domains?: RuleDomains | null
  /**
   * if `false`, it disables the feature and the linter won't be executed. `true` by default
   */
  enabled?: Bool | null
  /**
   * A list of glob patterns. The analyzer will handle only those files/folders that will match these patterns.
   */
  includes?: NormalizedGlob[] | null
  /**
   * List of rules
   */
  rules?: Rules | null
}
export interface RuleDomains {
  [k: string]: RuleDomainValue
}
export interface Rules {
  a11y?: SeverityOrGroupFor_A11Y | null
  complexity?: SeverityOrGroupFor_Complexity | null
  correctness?: SeverityOrGroupFor_Correctness | null
  nursery?: SeverityOrGroupFor_Nursery | null
  performance?: SeverityOrGroupFor_Performance | null
  /**
   * It enables the lint rules recommended by Biome. `true` by default.
   */
  recommended?: boolean | null
  security?: SeverityOrGroupFor_Security | null
  style?: SeverityOrGroupFor_Style | null
  suspicious?: SeverityOrGroupFor_Suspicious | null
}
/**
 * A list of rules that belong to this group
 */
export interface A11Y {
  /**
   * Enforce that the accessKey attribute is not used on any HTML element.
   */
  noAccessKey?: RuleFixConfiguration | null
  /**
   * Enforce that aria-hidden="true" is not set on focusable elements.
   */
  noAriaHiddenOnFocusable?: RuleFixConfiguration | null
  /**
   * Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.
   */
  noAriaUnsupportedElements?: RuleFixConfiguration | null
  /**
   * Enforce that autoFocus prop is not used on elements.
   */
  noAutofocus?: RuleFixConfiguration | null
  /**
   * Enforces that no distracting elements are used.
   */
  noDistractingElements?: RuleFixConfiguration | null
  /**
   * The scope prop should be used only on \<th> elements.
   */
  noHeaderScope?: RuleFixConfiguration | null
  /**
   * Enforce that non-interactive ARIA roles are not assigned to interactive HTML elements.
   */
  noInteractiveElementToNoninteractiveRole?: RuleFixConfiguration | null
  /**
   * Enforce that a label element or component has a text label and an associated input.
   */
  noLabelWithoutControl?: NoLabelWithoutControlConfiguration | null
  /**
   * Enforce that interactive ARIA roles are not assigned to non-interactive HTML elements.
   */
  noNoninteractiveElementToInteractiveRole?: RuleFixConfiguration | null
  /**
   * Enforce that tabIndex is not assigned to non-interactive HTML elements.
   */
  noNoninteractiveTabindex?: RuleFixConfiguration | null
  /**
   * Prevent the usage of positive integers on tabIndex property
   */
  noPositiveTabindex?: RuleFixConfiguration | null
  /**
   * Enforce img alt prop does not contain the word "image", "picture", or "photo".
   */
  noRedundantAlt?: RuleConfiguration | null
  /**
   * Enforce explicit role property is not the same as implicit/default role property on an element.
   */
  noRedundantRoles?: RuleFixConfiguration | null
  /**
   * Enforces the usage of the title element for the svg element.
   */
  noSvgWithoutTitle?: RuleConfiguration | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
  /**
   * Enforce that all elements that require alternative text have meaningful information to relay back to the end user.
   */
  useAltText?: RuleConfiguration | null
  /**
   * Enforce that anchors have content and that the content is accessible to screen readers.
   */
  useAnchorContent?: RuleFixConfiguration | null
  /**
   * Enforce that tabIndex is assigned to non-interactive HTML elements with aria-activedescendant.
   */
  useAriaActivedescendantWithTabindex?: RuleFixConfiguration | null
  /**
   * Enforce that elements with ARIA roles must have all required ARIA attributes for that role.
   */
  useAriaPropsForRole?: RuleConfiguration | null
  /**
   * Enforces the usage of the attribute type for the element button
   */
  useButtonType?: RuleConfiguration | null
  /**
   * Elements with an interactive role and interaction handlers must be focusable.
   */
  useFocusableInteractive?: RuleConfiguration | null
  /**
   * Disallow a missing generic family keyword within font families.
   */
  useGenericFontNames?: RuleConfiguration | null
  /**
   * Enforce that heading elements (h1, h2, etc.) have content and that the content is accessible to screen readers. Accessible means that it is not hidden using the aria-hidden prop.
   */
  useHeadingContent?: RuleConfiguration | null
  /**
   * Enforce that html element has lang attribute.
   */
  useHtmlLang?: RuleConfiguration | null
  /**
   * Enforces the usage of the attribute title for the element iframe.
   */
  useIframeTitle?: RuleConfiguration | null
  /**
   * Enforce onClick is accompanied by at least one of the following: onKeyUp, onKeyDown, onKeyPress.
   */
  useKeyWithClickEvents?: RuleConfiguration | null
  /**
   * Enforce onMouseOver / onMouseOut are accompanied by onFocus / onBlur.
   */
  useKeyWithMouseEvents?: RuleConfiguration | null
  /**
   * Enforces that audio and video elements must have a track for captions.
   */
  useMediaCaption?: RuleConfiguration | null
  /**
   * It detects the use of role attributes in JSX elements and suggests using semantic elements instead.
   */
  useSemanticElements?: RuleConfiguration | null
  /**
   * Enforce that all anchors are valid, and they are navigable elements.
   */
  useValidAnchor?: RuleConfiguration | null
  /**
   * Ensures that ARIA properties aria-* are all valid.
   */
  useValidAriaProps?: RuleFixConfiguration | null
  /**
   * Elements with ARIA roles must use a valid, non-abstract ARIA role.
   */
  useValidAriaRole?: ValidAriaRoleConfiguration | null
  /**
   * Enforce that ARIA state and property values are valid.
   */
  useValidAriaValues?: RuleConfiguration | null
  /**
   * Ensure that the attribute passed to the lang attribute is a correct ISO language and/or country.
   */
  useValidLang?: RuleConfiguration | null
}
export interface RuleWithFixNoOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
}
export interface RuleWithNoLabelWithoutControlOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoLabelWithoutControlOptions
}
export interface NoLabelWithoutControlOptions {
  /**
   * Array of component names that should be considered the same as an `input` element.
   */
  inputComponents?: string[]
  /**
   * Array of attributes that should be treated as the `label` accessible text content.
   */
  labelAttributes?: string[]
  /**
   * Array of component names that should be considered the same as a `label` element.
   */
  labelComponents?: string[]
}
export interface RuleWithNoOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
}
export interface RuleWithValidAriaRoleOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: ValidAriaRoleOptions
}
export interface ValidAriaRoleOptions {
  allowInvalidRoles?: string[]
  ignoreNonDom?: boolean
}
/**
 * A list of rules that belong to this group
 */
export interface Complexity {
  /**
   * Disallow unclear usage of consecutive space characters in regular expression literals
   */
  noAdjacentSpacesInRegex?: RuleFixConfiguration | null
  /**
   * Disallow primitive type aliases and misleading types.
   */
  noBannedTypes?: RuleFixConfiguration | null
  /**
   * Disallow empty type parameters in type aliases and interfaces.
   */
  noEmptyTypeParameters?: RuleConfiguration | null
  /**
   * Disallow functions that exceed a given Cognitive Complexity score.
   */
  noExcessiveCognitiveComplexity?: ComplexityConfiguration | null
  /**
   * This rule enforces a maximum depth to nested describe() in test files.
   */
  noExcessiveNestedTestSuites?: RuleConfiguration | null
  /**
   * Disallow unnecessary boolean casts
   */
  noExtraBooleanCast?: RuleFixConfiguration | null
  /**
   * Prefer for...of statement instead of Array.forEach.
   */
  noForEach?: NoForEachConfiguration | null
  /**
   * This rule reports when a class has no non-static members, such as for a class used exclusively as a static namespace.
   */
  noStaticOnlyClass?: RuleConfiguration | null
  /**
   * Disallow this and super in static contexts.
   */
  noThisInStatic?: RuleFixConfiguration | null
  /**
   * Disallow unnecessary catch clauses.
   */
  noUselessCatch?: RuleFixConfiguration | null
  /**
   * Disallow unnecessary constructors.
   */
  noUselessConstructor?: RuleFixConfiguration | null
  /**
   * Disallow empty exports that don't change anything in a module file.
   */
  noUselessEmptyExport?: RuleFixConfiguration | null
  /**
   * Disallow unnecessary fragments
   */
  noUselessFragments?: RuleFixConfiguration | null
  /**
   * Disallow unnecessary labels.
   */
  noUselessLabel?: RuleFixConfiguration | null
  /**
   * Disallow unnecessary nested block statements.
   */
  noUselessLoneBlockStatements?: RuleFixConfiguration | null
  /**
   * Disallow renaming import, export, and destructured assignments to the same name.
   */
  noUselessRename?: RuleFixConfiguration | null
  /**
   * Disallow unnecessary concatenation of string or template literals.
   */
  noUselessStringConcat?: RuleFixConfiguration | null
  /**
   * Disallow useless case in switch statements.
   */
  noUselessSwitchCase?: RuleFixConfiguration | null
  /**
   * Disallow ternary operators when simpler alternatives exist.
   */
  noUselessTernary?: RuleFixConfiguration | null
  /**
   * Disallow useless this aliasing.
   */
  noUselessThisAlias?: RuleFixConfiguration | null
  /**
   * Disallow using any or unknown as type constraint.
   */
  noUselessTypeConstraint?: RuleFixConfiguration | null
  /**
   * Disallow initializing variables to undefined.
   */
  noUselessUndefinedInitialization?: RuleFixConfiguration | null
  /**
   * Disallow the use of void operators, which is not a familiar operator.
   */
  noVoid?: RuleConfiguration | null
  /**
   * Disallow with statements in non-strict contexts.
   */
  noWith?: RuleConfiguration | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
  /**
   * Use arrow functions over function expressions.
   */
  useArrowFunction?: RuleFixConfiguration | null
  /**
   * Use Date.now() to get the number of milliseconds since the Unix Epoch.
   */
  useDateNow?: RuleFixConfiguration | null
  /**
   * Promotes the use of .flatMap() when map().flat() are used together.
   */
  useFlatMap?: RuleFixConfiguration | null
  /**
   * Enforce the usage of a literal access to properties over computed property access.
   */
  useLiteralKeys?: RuleFixConfiguration | null
  /**
   * Enforce using concise optional chain instead of chained logical expressions.
   */
  useOptionalChain?: RuleFixConfiguration | null
  /**
   * Enforce the use of the regular expression literals instead of the RegExp constructor if possible.
   */
  useRegexLiterals?: RuleFixConfiguration | null
  /**
   * Disallow number literal object member names which are not base10 or uses underscore as separator
   */
  useSimpleNumberKeys?: RuleFixConfiguration | null
  /**
   * Discard redundant terms from logical expressions.
   */
  useSimplifiedLogicExpression?: RuleFixConfiguration | null
  /**
   * Enforce the use of while loops instead of for loops when the initializer and update expressions are not needed.
   */
  useWhile?: RuleFixConfiguration | null
}
export interface RuleWithComplexityOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: ComplexityOptions
}
/**
 * Options for the rule `noExcessiveCognitiveComplexity`.
 */
export interface ComplexityOptions {
  /**
   * The maximum complexity score that we allow. Anything higher is considered excessive.
   */
  maxAllowedComplexity?: number
}
export interface RuleWithNoForEachOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoForEachOptions
}
export interface NoForEachOptions {
  /**
   * A list of variable names allowed for `forEach` calls.
   */
  allowedIdentifiers?: string[]
}
/**
 * A list of rules that belong to this group
 */
export interface Correctness {
  /**
   * Prevent passing of children as props.
   */
  noChildrenProp?: RuleConfiguration | null
  /**
   * Prevents from having const variables being re-assigned.
   */
  noConstAssign?: RuleFixConfiguration | null
  /**
   * Disallow constant expressions in conditions
   */
  noConstantCondition?: RuleConfiguration | null
  /**
   * Disallow the use of Math.min and Math.max to clamp a value where the result itself is constant.
   */
  noConstantMathMinMaxClamp?: RuleFixConfiguration | null
  /**
   * Disallow returning a value from a constructor.
   */
  noConstructorReturn?: RuleConfiguration | null
  /**
   * Disallow empty character classes in regular expression literals.
   */
  noEmptyCharacterClassInRegex?: RuleConfiguration | null
  /**
   * Disallows empty destructuring patterns.
   */
  noEmptyPattern?: RuleConfiguration | null
  /**
   * Disallow to use unnecessary callback on flatMap.
   */
  noFlatMapIdentity?: RuleFixConfiguration | null
  /**
   * Disallow calling global object properties as functions
   */
  noGlobalObjectCalls?: RuleConfiguration | null
  /**
   * Disallow function and var declarations that are accessible outside their block.
   */
  noInnerDeclarations?: RuleConfiguration | null
  /**
   * Ensure that builtins are correctly instantiated.
   */
  noInvalidBuiltinInstantiation?: RuleFixConfiguration | null
  /**
   * Prevents the incorrect use of super() inside classes. It also checks whether a call super() is missing from classes that extends other constructors.
   */
  noInvalidConstructorSuper?: RuleConfiguration | null
  /**
   * Disallow non-standard direction values for linear gradient functions.
   */
  noInvalidDirectionInLinearGradient?: RuleConfiguration | null
  /**
   * Disallows invalid named grid areas in CSS Grid Layouts.
   */
  noInvalidGridAreas?: RuleConfiguration | null
  /**
   * Disallow new operators with global non-constructor functions.
   */
  noInvalidNewBuiltin?: RuleFixConfiguration | null
  /**
   * Disallow the use of @import at-rules in invalid positions.
   */
  noInvalidPositionAtImportRule?: RuleConfiguration | null
  /**
   * Disallow the use of variables and function parameters before their declaration
   */
  noInvalidUseBeforeDeclaration?: RuleConfiguration | null
  /**
   * Disallow new operators with the Symbol object.
   */
  noNewSymbol?: RuleFixConfiguration | null
  /**
   * Forbid the use of Node.js builtin modules.
   */
  noNodejsModules?: RuleConfiguration | null
  /**
   * Disallow \8 and \9 escape sequences in string literals.
   */
  noNonoctalDecimalEscape?: RuleFixConfiguration | null
  /**
   * Disallow literal numbers that lose precision
   */
  noPrecisionLoss?: RuleConfiguration | null
  /**
   * Restrict imports of private exports.
   */
  noPrivateImports?: NoPrivateImportsConfiguration | null
  /**
   * Prevent the usage of the return value of React.render.
   */
  noRenderReturnValue?: RuleConfiguration | null
  /**
   * Disallow assignments where both sides are exactly the same.
   */
  noSelfAssign?: RuleConfiguration | null
  /**
   * Disallow returning a value from a setter
   */
  noSetterReturn?: RuleConfiguration | null
  /**
   * Disallow comparison of expressions modifying the string case with non-compliant value.
   */
  noStringCaseMismatch?: RuleFixConfiguration | null
  /**
   * Disallow lexical declarations in switch clauses.
   */
  noSwitchDeclarations?: RuleFixConfiguration | null
  /**
   * Disallow the use of dependencies that aren't specified in the package.json.
   */
  noUndeclaredDependencies?: NoUndeclaredDependenciesConfiguration | null
  /**
   * Prevents the usage of variables that haven't been declared inside the document.
   */
  noUndeclaredVariables?: UndeclaredVariablesConfiguration | null
  /**
   * Disallow unknown CSS value functions.
   */
  noUnknownFunction?: RuleConfiguration | null
  /**
   * Disallow unknown media feature names.
   */
  noUnknownMediaFeatureName?: RuleConfiguration | null
  /**
   * Disallow unknown properties.
   */
  noUnknownProperty?: RuleConfiguration | null
  /**
   * Disallow unknown CSS units.
   */
  noUnknownUnit?: RuleConfiguration | null
  /**
   * Disallow unmatchable An+B selectors.
   */
  noUnmatchableAnbSelector?: RuleConfiguration | null
  /**
   * Disallow unreachable code
   */
  noUnreachable?: RuleConfiguration | null
  /**
   * Ensures the super() constructor is called exactly once on every code  path in a class constructor before this is accessed if the class has a superclass
   */
  noUnreachableSuper?: RuleConfiguration | null
  /**
   * Disallow control flow statements in finally blocks.
   */
  noUnsafeFinally?: RuleConfiguration | null
  /**
   * Disallow the use of optional chaining in contexts where the undefined value is not allowed.
   */
  noUnsafeOptionalChaining?: RuleConfiguration | null
  /**
   * Disallow unused function parameters.
   */
  noUnusedFunctionParameters?: RuleFixConfiguration | null
  /**
   * Disallow unused imports.
   */
  noUnusedImports?: RuleFixConfiguration | null
  /**
   * Disallow unused labels.
   */
  noUnusedLabels?: RuleFixConfiguration | null
  /**
   * Disallow unused private class members
   */
  noUnusedPrivateClassMembers?: RuleFixConfiguration | null
  /**
   * Disallow unused variables.
   */
  noUnusedVariables?: NoUnusedVariablesConfiguration | null
  /**
   * Avoid using unnecessary continue.
   */
  noUselessContinue?: RuleFixConfiguration | null
  /**
   * This rules prevents void elements (AKA self-closing elements) from having children.
   */
  noVoidElementsWithChildren?: RuleFixConfiguration | null
  /**
   * Disallow returning a value from a function with the return type 'void'
   */
  noVoidTypeReturn?: RuleConfiguration | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
  /**
   * Disallow Array constructors.
   */
  useArrayLiterals?: RuleFixConfiguration | null
  /**
   * Enforce all dependencies are correctly specified in a React hook.
   */
  useExhaustiveDependencies?: UseExhaustiveDependenciesConfiguration | null
  /**
   * Enforce that all React hooks are being called from the Top Level component functions.
   */
  useHookAtTopLevel?: DeprecatedHooksConfiguration | null
  /**
   * Enforce file extensions for relative imports.
   */
  useImportExtensions?: UseImportExtensionsConfiguration | null
  /**
   * Require calls to isNaN() when checking for NaN.
   */
  useIsNan?: RuleFixConfiguration | null
  /**
   * Disallow missing key props in iterators/collection literals.
   */
  useJsxKeyInIterable?: RuleConfiguration | null
  /**
   * Enforce "for" loop update clause moving the counter in the right direction.
   */
  useValidForDirection?: RuleConfiguration | null
  /**
   * Require generator functions to contain yield.
   */
  useYield?: RuleConfiguration | null
}
export interface RuleWithNoPrivateImportsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoPrivateImportsOptions
}
/**
 * Options for the rule `noPrivateImports`.
 */
export interface NoPrivateImportsOptions {
  /**
   * The default visibility to assume for symbols without visibility tag.
   *
   * Default: **public**.
   */
  defaultVisibility?: Visibility & string
}
export interface RuleWithNoUndeclaredDependenciesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUndeclaredDependenciesOptions
}
/**
 * Rule's options
 */
export interface NoUndeclaredDependenciesOptions {
  /**
   * If set to `false`, then the rule will show an error when `devDependencies` are imported. Defaults to `true`.
   */
  devDependencies?: DependencyAvailability & boolean
  /**
   * If set to `false`, then the rule will show an error when `optionalDependencies` are imported. Defaults to `true`.
   */
  optionalDependencies?: DependencyAvailability & boolean
  /**
   * If set to `false`, then the rule will show an error when `peerDependencies` are imported. Defaults to `true`.
   */
  peerDependencies?: DependencyAvailability & boolean
}
export interface RuleWithUndeclaredVariablesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UndeclaredVariablesOptions
}
export interface UndeclaredVariablesOptions {
  /**
   * Check undeclared types.
   */
  checkTypes?: boolean
  [k: string]: unknown
}
export interface RuleWithNoUnusedVariablesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoUnusedVariablesOptions
}
export interface NoUnusedVariablesOptions {
  /**
   * Whether to ignore unused variables from an object destructuring with a spread (i.e.: whether `a` and `b` in `const { a, b, ...rest } = obj` should be ignored by this rule).
   */
  ignoreRestSiblings?: boolean
}
export interface RuleWithUseExhaustiveDependenciesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseExhaustiveDependenciesOptions
}
/**
 * Options for the rule `useExhaustiveDependencies`
 */
export interface UseExhaustiveDependenciesOptions {
  /**
   * List of hooks of which the dependencies should be validated.
   */
  hooks?: Hook[]
  /**
   * Whether to report an error when a hook has no dependencies array.
   */
  reportMissingDependenciesArray?: boolean
  /**
   * Whether to report an error when a dependency is listed in the dependencies array but isn't used. Defaults to true.
   */
  reportUnnecessaryDependencies?: boolean
}
export interface Hook {
  /**
   * The "position" of the closure function, starting from zero.
   *
   * For example, for React's `useEffect()` hook, the closure index is 0.
   */
  closureIndex?: number | null
  /**
   * The "position" of the array of dependencies, starting from zero.
   *
   * For example, for React's `useEffect()` hook, the dependencies index is 1.
   */
  dependenciesIndex?: number | null
  /**
   * The name of the hook.
   */
  name?: string
  /**
   * Whether the result of the hook is stable.
   *
   * Set to `true` to mark the identity of the hook's return value as stable, or use a number/an array of numbers to mark the "positions" in the return array as stable.
   *
   * For example, for React's `useRef()` hook the value would be `true`, while for `useState()` it would be `[1]`.
   */
  stableResult?: StableHookResult | null
}
export interface RuleWithDeprecatedHooksOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: DeprecatedHooksOptions
}
/**
 * Options for the `useHookAtTopLevel` rule have been deprecated, since we now use the React hook naming convention to determine whether a function is a hook.
 */
export interface DeprecatedHooksOptions {}
export interface RuleWithUseImportExtensionsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseImportExtensionsOptions
}
export interface UseImportExtensionsOptions {
  /**
   * If `true`, the suggested extension is always `.js` regardless of what extension the source file has in your project.
   */
  forceJsExtensions?: boolean
}
/**
 * A list of rules that belong to this group
 */
export interface Nursery {
  /**
   * Disallow await inside loops.
   */
  noAwaitInLoop?: RuleConfiguration | null
  /**
   * Disallow bitwise operators.
   */
  noBitwiseOperators?: NoBitwiseOperatorsConfiguration | null
  /**
   * Disallow use of CommonJs module system in favor of ESM style imports.
   */
  noCommonJs?: RuleConfiguration | null
  /**
   * Disallow expressions where the operation doesn't affect the value
   */
  noConstantBinaryExpression?: RuleConfiguration | null
  /**
   * Disallow a lower specificity selector from coming after a higher specificity selector.
   */
  noDescendingSpecificity?: RuleConfiguration | null
  /**
   * Disallow destructuring props inside JSX components in Solid projects.
   */
  noDestructuredProps?: RuleConfiguration | null
  /**
   * Disallow direct assignments to document.cookie.
   */
  noDocumentCookie?: RuleConfiguration | null
  /**
   * Prevents importing next/document outside of pages/_document.jsx in Next.js projects.
   */
  noDocumentImportInPage?: RuleConfiguration | null
  /**
   * Disallow duplicate custom properties within declaration blocks.
   */
  noDuplicateCustomProperties?: RuleConfiguration | null
  /**
   * Disallow duplicate conditions in if-else-if chains
   */
  noDuplicateElseIf?: RuleConfiguration | null
  /**
   * No duplicated fields in GraphQL operations.
   */
  noDuplicateFields?: RuleConfiguration | null
  /**
   * Disallow duplicate properties within declaration blocks.
   */
  noDuplicateProperties?: RuleConfiguration | null
  /**
   * Disallow accessing namespace imports dynamically.
   */
  noDynamicNamespaceImportAccess?: RuleConfiguration | null
  /**
   * Disallow TypeScript enum.
   */
  noEnum?: RuleConfiguration | null
  /**
   * Disallow exporting an imported variable.
   */
  noExportedImports?: RuleConfiguration | null
  /**
   * Require Promise-like statements to be handled appropriately.
   */
  noFloatingPromises?: RuleFixConfiguration | null
  /**
   * Disallow the use of __dirname and __filename in the global scope.
   */
  noGlobalDirnameFilename?: RuleFixConfiguration | null
  /**
   * Prevent usage of \<head> element in a Next.js project.
   */
  noHeadElement?: RuleConfiguration | null
  /**
   * Prevent using the next/head module in pages/_document.js on Next.js projects.
   */
  noHeadImportInDocument?: RuleConfiguration | null
  /**
   * Prevent usage of \<img> element in a Next.js project.
   */
  noImgElement?: RuleConfiguration | null
  /**
   * Prevent import cycles.
   */
  noImportCycles?: RuleConfiguration | null
  /**
   * Disallow the use of the !important style.
   */
  noImportantStyles?: RuleFixConfiguration | null
  /**
   * Disallows the use of irregular whitespace characters.
   */
  noIrregularWhitespace?: RuleConfiguration | null
  /**
   * Disallow missing var function for css variables.
   */
  noMissingVarFunction?: RuleConfiguration | null
  /**
   * Disallow nested ternary expressions.
   */
  noNestedTernary?: RuleConfiguration | null
  /**
   * Disallow use event handlers on non-interactive elements.
   */
  noNoninteractiveElementInteractions?: RuleConfiguration | null
  /**
   * Disallow octal escape sequences in string literals
   */
  noOctalEscape?: RuleFixConfiguration | null
  /**
   * Disallow the use of process.env.
   */
  noProcessEnv?: RuleConfiguration | null
  /**
   * Disallow the use of process global.
   */
  noProcessGlobal?: RuleFixConfiguration | null
  /**
   * Disallow the use of configured elements.
   */
  noRestrictedElements?: NoRestrictedElementsConfiguration | null
  /**
   * Disallow specified modules when loaded by import or require.
   */
  noRestrictedImports?: RestrictedImportsConfiguration | null
  /**
   * Disallow user defined types.
   */
  noRestrictedTypes?: NoRestrictedTypesConfiguration | null
  /**
   * Disallow usage of sensitive data such as API keys and tokens.
   */
  noSecrets?: NoSecretsConfiguration | null
  /**
   * Enforce that static, visible elements (such as \<div>) that have click handlers use the valid role attribute.
   */
  noStaticElementInteractions?: RuleConfiguration | null
  /**
   * Enforce the use of String.slice() over String.substr() and String.substring().
   */
  noSubstr?: RuleFixConfiguration | null
  /**
   * Disallow template literal placeholder syntax in regular strings.
   */
  noTemplateCurlyInString?: RuleConfiguration | null
  /**
   * Prevents the use of the TypeScript directive @ts-ignore.
   */
  noTsIgnore?: RuleFixConfiguration | null
  /**
   * Disallow unknown at-rules.
   */
  noUnknownAtRule?: RuleConfiguration | null
  /**
   * Disallow unknown pseudo-class selectors.
   */
  noUnknownPseudoClass?: RuleConfiguration | null
  /**
   * Disallow unknown pseudo-element selectors.
   */
  noUnknownPseudoElement?: RuleConfiguration | null
  /**
   * Disallow unknown type selectors.
   */
  noUnknownTypeSelector?: RuleConfiguration | null
  /**
   * Warn when importing non-existing exports.
   */
  noUnresolvedImports?: RuleConfiguration | null
  /**
   * Prevent duplicate polyfills from Polyfill.io.
   */
  noUnwantedPolyfillio?: RuleConfiguration | null
  /**
   * Disallow unnecessary escape sequence in regular expression literals.
   */
  noUselessEscapeInRegex?: RuleFixConfiguration | null
  /**
   * Disallow unnecessary escapes in string literals.
   */
  noUselessEscapeInString?: RuleFixConfiguration | null
  /**
   * Disallow unnecessary String.raw function in template string literals without any escape sequence.
   */
  noUselessStringRaw?: RuleConfiguration | null
  /**
   * Disallow the use of useless undefined.
   */
  noUselessUndefined?: RuleFixConfiguration | null
  /**
   * Disallow use of @value rule in css modules.
   */
  noValueAtRule?: RuleConfiguration | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
  /**
   * Disallow the use of overload signatures that are not next to each other.
   */
  useAdjacentOverloadSignatures?: RuleConfiguration | null
  /**
   * Enforce that ARIA properties are valid for the roles that are supported by the element.
   */
  useAriaPropsSupportedByRole?: RuleConfiguration | null
  /**
   * Use at() instead of integer index access.
   */
  useAtIndex?: RuleFixConfiguration | null
  /**
   * Enforce using single if instead of nested if clauses.
   */
  useCollapsedIf?: RuleFixConfiguration | null
  /**
   * Enforce declaring components only within modules that export React Components exclusively.
   */
  useComponentExportOnlyModules?: UseComponentExportOnlyModulesConfiguration | null
  /**
   * This rule enforces consistent use of curly braces inside JSX attributes and JSX children.
   */
  useConsistentCurlyBraces?: RuleFixConfiguration | null
  /**
   * Require consistent accessibility modifiers on class properties and methods.
   */
  useConsistentMemberAccessibility?: ConsistentMemberAccessibilityConfiguration | null
  /**
   * Require the consistent declaration of object literals. Defaults to explicit definitions.
   */
  useConsistentObjectDefinition?: UseConsistentObjectDefinitionConfiguration | null
  /**
   * Require specifying the reason argument when using @deprecated directive
   */
  useDeprecatedReason?: RuleConfiguration | null
  /**
   * Enforce types in functions, methods, variables, and parameters.
   */
  useExplicitType?: RuleConfiguration | null
  /**
   * Require that all exports are declared after all non-export statements.
   */
  useExportsLast?: RuleConfiguration | null
  /**
   * Enforce using Solid's \<For /> component for mapping an array to JSX elements.
   */
  useForComponent?: RuleConfiguration | null
  /**
   * Enforces the use of a recommended display strategy with Google Fonts.
   */
  useGoogleFontDisplay?: RuleConfiguration | null
  /**
   * Ensure the preconnect attribute is used when using Google Fonts.
   */
  useGoogleFontPreconnect?: RuleFixConfiguration | null
  /**
   * Require for-in loops to include an if statement.
   */
  useGuardForIn?: RuleConfiguration | null
  /**
   * Enforce consistent return values in iterable callbacks.
   */
  useIterableCallbackReturn?: RuleConfiguration | null
  /**
   * Enforce specifying the name of GraphQL operations.
   */
  useNamedOperation?: RuleFixConfiguration | null
  /**
   * Validates that all enum values are capitalized.
   */
  useNamingConvention?: RuleConfiguration | null
  /**
   * Enforce the use of numeric separators in numeric literals.
   */
  useNumericSeparators?: RuleFixConfiguration | null
  /**
   * Enforce the consistent use of the radix argument when using parseInt().
   */
  useParseIntRadix?: RuleFixConfiguration | null
  /**
   * Enforce the sorting of CSS utility classes.
   */
  useSortedClasses?: UtilityClassSortingConfiguration | null
  /**
   * Enforce the use of the directive "use strict" in script files.
   */
  useStrictMode?: RuleFixConfiguration | null
  /**
   * Require a description parameter for the Symbol().
   */
  useSymbolDescription?: RuleConfiguration | null
  /**
   * Enforce the use of String.trimStart() and String.trimEnd() over String.trimLeft() and String.trimRight().
   */
  useTrimStartEnd?: RuleFixConfiguration | null
  /**
   * Use valid values for the autocomplete attribute on input elements.
   */
  useValidAutocomplete?: UseValidAutocompleteConfiguration | null
}
export interface RuleWithNoBitwiseOperatorsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoBitwiseOperatorsOptions
}
/**
 * Rule's options
 */
export interface NoBitwiseOperatorsOptions {
  /**
   * Allows a list of bitwise operators to be used as exceptions.
   */
  allow?: string[]
}
export interface RuleWithNoRestrictedElementsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoRestrictedElementsOptions
}
export interface NoRestrictedElementsOptions {
  /**
   * Elements to restrict. Each key is the element name, and the value is the message to show when the element is used.
   */
  elements?: CustomRestrictedElements
}
export interface CustomRestrictedElements {
  [k: string]: string
}
export interface RuleWithRestrictedImportsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: RestrictedImportsOptions
}
/**
 * Options for the rule `noRestrictedImports`.
 */
export interface RestrictedImportsOptions {
  /**
   * A list of import paths that should trigger the rule.
   */
  paths?: {
    [k: string]: CustomRestrictedImport
  }
}
export interface CustomRestrictedImportOptions {
  /**
   * Names of the exported members that allowed to be not be used.
   */
  allowImportNames?: string[]
  /**
   * Names of the exported members that should not be used.
   */
  importNames?: string[]
  /**
   * The message to display when this module is imported.
   */
  message?: string
}
export interface RuleWithNoRestrictedTypesOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoRestrictedTypesOptions
}
export interface NoRestrictedTypesOptions {
  types?: {
    [k: string]: CustomRestrictedType
  }
}
export interface CustomRestrictedTypeOptions {
  message?: string
  use?: string | null
}
export interface RuleWithNoSecretsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoSecretsOptions
}
export interface NoSecretsOptions {
  /**
   * Set entropy threshold (default is 41).
   */
  entropyThreshold?: number | null
}
export interface RuleWithUseComponentExportOnlyModulesOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseComponentExportOnlyModulesOptions
}
export interface UseComponentExportOnlyModulesOptions {
  /**
   * Allows the export of constants. This option is for environments that support it, such as [Vite](https://vitejs.dev/)
   */
  allowConstantExport?: boolean
  /**
   * A list of names that can be additionally exported from the module This option is for exports that do not hinder [React Fast Refresh](https://github.com/facebook/react/tree/main/packages/react-refresh), such as [`meta` in Remix](https://remix.run/docs/en/main/route/meta)
   */
  allowExportNames?: string[]
}
export interface RuleWithConsistentMemberAccessibilityOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: ConsistentMemberAccessibilityOptions
}
export interface ConsistentMemberAccessibilityOptions {
  accessibility?: Accessibility & string
}
export interface RuleWithUseConsistentObjectDefinitionOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseConsistentObjectDefinitionOptions
}
export interface UseConsistentObjectDefinitionOptions {
  /**
   * The preferred syntax to enforce.
   */
  syntax?: ObjectPropertySyntax & string
}
export interface RuleWithUtilityClassSortingOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UtilityClassSortingOptions
}
export interface UtilityClassSortingOptions {
  /**
   * Additional attributes that will be sorted.
   */
  attributes?: string[] | null
  /**
   * Names of the functions or tagged templates that will be sorted.
   */
  functions?: string[] | null
}
export interface RuleWithUseValidAutocompleteOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseValidAutocompleteOptions
}
export interface UseValidAutocompleteOptions {
  /**
   * `input` like custom components that should be checked.
   */
  inputComponents?: string[]
}
/**
 * A list of rules that belong to this group
 */
export interface Performance {
  /**
   * Disallow the use of spread (...) syntax on accumulators.
   */
  noAccumulatingSpread?: RuleConfiguration | null
  /**
   * Disallow the use of barrel file.
   */
  noBarrelFile?: RuleConfiguration | null
  /**
   * Disallow the use of the delete operator.
   */
  noDelete?: RuleFixConfiguration | null
  /**
   * Avoid re-export all.
   */
  noReExportAll?: RuleConfiguration | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
  /**
   * Require regex literals to be declared at the top level.
   */
  useTopLevelRegex?: RuleConfiguration | null
}
/**
 * A list of rules that belong to this group
 */
export interface Security {
  /**
   * Disallow target="_blank" attribute without rel="noopener".
   */
  noBlankTarget?: NoBlankTargetConfiguration | null
  /**
   * Prevent the usage of dangerous JSX props
   */
  noDangerouslySetInnerHtml?: RuleConfiguration | null
  /**
   * Report when a DOM element or a component uses both children and dangerouslySetInnerHTML prop.
   */
  noDangerouslySetInnerHtmlWithChildren?: RuleConfiguration | null
  /**
   * Disallow the use of global eval().
   */
  noGlobalEval?: RuleConfiguration | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
}
export interface RuleWithNoBlankTargetOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoBlankTargetOptions
}
export interface NoBlankTargetOptions {
  /**
   * List of domains where `target="_blank"` is allowed without `rel="noopener"`.
   */
  allowDomains?: string[]
  /**
   * Whether `noreferrer` is allowed in addition to `noopener`.
   */
  allowNoReferrer?: boolean
}
/**
 * A list of rules that belong to this group
 */
export interface Style {
  /**
   * Disallow the use of arguments.
   */
  noArguments?: RuleConfiguration | null
  /**
   * Disallow comma operator.
   */
  noCommaOperator?: RuleConfiguration | null
  /**
   * Disallow default exports.
   */
  noDefaultExport?: RuleConfiguration | null
  /**
   * Disallow using a callback in asynchronous tests and hooks.
   */
  noDoneCallback?: RuleConfiguration | null
  /**
   * Disallow implicit true values on JSX boolean attributes
   */
  noImplicitBoolean?: RuleFixConfiguration | null
  /**
   * Disallow type annotations for variables, parameters, and class properties initialized with a literal expression.
   */
  noInferrableTypes?: RuleFixConfiguration | null
  /**
   * Disallow the use of TypeScript's namespaces.
   */
  noNamespace?: RuleConfiguration | null
  /**
   * Disallow the use of namespace imports.
   */
  noNamespaceImport?: RuleConfiguration | null
  /**
   * Disallow negation in the condition of an if statement if it has an else clause.
   */
  noNegationElse?: RuleFixConfiguration | null
  /**
   * Disallow non-null assertions using the ! postfix operator.
   */
  noNonNullAssertion?: RuleFixConfiguration | null
  /**
   * Disallow reassigning function parameters.
   */
  noParameterAssign?: RuleConfiguration | null
  /**
   * Disallow the use of parameter properties in class constructors.
   */
  noParameterProperties?: RuleConfiguration | null
  /**
   * This rule allows you to specify global variable names that you don’t want to use in your application.
   */
  noRestrictedGlobals?: RestrictedGlobalsConfiguration | null
  /**
   * Disallow the use of constants which its value is the upper-case version of its name.
   */
  noShoutyConstants?: RuleFixConfiguration | null
  /**
   * Disallow template literals if interpolation and special-character handling are not needed
   */
  noUnusedTemplateLiteral?: RuleFixConfiguration | null
  /**
   * Disallow else block when the if block breaks early.
   */
  noUselessElse?: RuleFixConfiguration | null
  /**
   * Disallow the use of yoda expressions.
   */
  noYodaExpression?: RuleFixConfiguration | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
  /**
   * Enforce the use of as const over literal type and type annotation.
   */
  useAsConstAssertion?: RuleFixConfiguration | null
  /**
   * Requires following curly brace conventions.
   */
  useBlockStatements?: RuleFixConfiguration | null
  /**
   * Enforce using else if instead of nested if in else clauses.
   */
  useCollapsedElseIf?: RuleFixConfiguration | null
  /**
   * Require consistently using either T\[] or Array\<T>
   */
  useConsistentArrayType?: ConsistentArrayTypeConfiguration | null
  /**
   * Enforce the use of new for all builtins, except String, Number and Boolean.
   */
  useConsistentBuiltinInstantiation?: RuleFixConfiguration | null
  /**
   * Require const declarations for variables that are only assigned once.
   */
  useConst?: RuleFixConfiguration | null
  /**
   * Enforce default function parameters and optional function parameters to be last.
   */
  useDefaultParameterLast?: RuleFixConfiguration | null
  /**
   * Require the default clause in switch statements.
   */
  useDefaultSwitchClause?: RuleConfiguration | null
  /**
   * Require that each enum member value be explicitly initialized.
   */
  useEnumInitializers?: RuleFixConfiguration | null
  /**
   * Enforce explicitly comparing the length, size, byteLength or byteOffset property of a value.
   */
  useExplicitLengthCheck?: RuleFixConfiguration | null
  /**
   * Disallow the use of Math.pow in favor of the ** operator.
   */
  useExponentiationOperator?: RuleFixConfiguration | null
  /**
   * Promotes the use of export type for types.
   */
  useExportType?: RuleFixConfiguration | null
  /**
   * Enforce naming conventions for JavaScript and TypeScript filenames.
   */
  useFilenamingConvention?: FilenamingConventionConfiguration | null
  /**
   * This rule recommends a for-of loop when in a for loop, the index used to extract an item from the iterated array.
   */
  useForOf?: RuleConfiguration | null
  /**
   * This rule enforces the use of \<>...\</> over \<Fragment>...\</Fragment>.
   */
  useFragmentSyntax?: RuleFixConfiguration | null
  /**
   * Promotes the use of import type for types.
   */
  useImportType?: ImportTypeConfiguration | null
  /**
   * Require all enum members to be literal values.
   */
  useLiteralEnumMembers?: RuleConfiguration | null
  /**
   * Enforce naming conventions for everything across a codebase.
   */
  useNamingConvention?: NamingConventionConfiguration | null
  /**
   * Promotes the usage of node:assert/strict over node:assert.
   */
  useNodeAssertStrict?: RuleFixConfiguration | null
  /**
   * Enforces using the node: protocol for Node.js builtin modules.
   */
  useNodejsImportProtocol?: RuleFixConfiguration | null
  /**
   * Use the Number properties instead of global ones.
   */
  useNumberNamespace?: RuleFixConfiguration | null
  /**
   * Disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals
   */
  useNumericLiterals?: RuleFixConfiguration | null
  /**
   * Prevent extra closing tags for components without children
   */
  useSelfClosingElements?: UseSelfClosingElementsConfiguration | null
  /**
   * When expressing array types, this rule promotes the usage of T\[] shorthand instead of Array\<T>.
   */
  useShorthandArrayType?: RuleFixConfiguration | null
  /**
   * Require assignment operator shorthand where possible.
   */
  useShorthandAssign?: RuleFixConfiguration | null
  /**
   * Enforce using function types instead of object type with call signatures.
   */
  useShorthandFunctionType?: RuleFixConfiguration | null
  /**
   * Enforces switch clauses have a single statement, emits a quick fix wrapping the statements in a block.
   */
  useSingleCaseStatement?: RuleFixConfiguration | null
  /**
   * Disallow multiple variable declarations in the same variable statement
   */
  useSingleVarDeclarator?: RuleFixConfiguration | null
  /**
   * Prefer template literals over string concatenation.
   */
  useTemplate?: RuleFixConfiguration | null
  /**
   * Require new when throwing an error.
   */
  useThrowNewError?: RuleFixConfiguration | null
  /**
   * Disallow throwing non-Error values.
   */
  useThrowOnlyError?: RuleConfiguration | null
}
export interface RuleWithRestrictedGlobalsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: RestrictedGlobalsOptions
}
/**
 * Options for the rule `noRestrictedGlobals`.
 */
export interface RestrictedGlobalsOptions {
  /**
   * A list of names that should trigger the rule
   */
  deniedGlobals?: {
    [k: string]: string
  }
}
export interface RuleWithConsistentArrayTypeOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: ConsistentArrayTypeOptions
}
export interface ConsistentArrayTypeOptions {
  syntax?: ConsistentArrayType & string
}
export interface RuleWithFilenamingConventionOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: FilenamingConventionOptions
}
/**
 * Rule's options.
 */
export interface FilenamingConventionOptions {
  /**
   * Allowed cases for file names.
   */
  filenameCases?: FilenameCases
  /**
   * Regular expression to enforce
   */
  match?: Regex | null
  /**
   * If `false`, then non-ASCII characters are allowed.
   */
  requireAscii?: boolean
  /**
   * If `false`, then consecutive uppercase are allowed in _camel_ and _pascal_ cases. This does not affect other [Case].
   */
  strictCase?: boolean
}
export interface RuleWithImportTypeOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: ImportTypeOptions
}
/**
 * Rule's options.
 */
export interface ImportTypeOptions {
  style: Style2
}
export interface RuleWithNamingConventionOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NamingConventionOptions
}
/**
 * Rule's options.
 */
export interface NamingConventionOptions {
  /**
   * Custom conventions.
   */
  conventions?: Convention[]
  /**
   * If `false`, then non-ASCII characters are allowed.
   */
  requireAscii?: boolean
  /**
   * If `false`, then consecutive uppercase are allowed in _camel_ and _pascal_ cases. This does not affect other [Case].
   */
  strictCase?: boolean
}
export interface Convention {
  /**
   * String cases to enforce
   */
  formats?: Formats
  /**
   * Regular expression to enforce
   */
  match?: Regex | null
  /**
   * Declarations concerned by this convention
   */
  selector?: Selector
}
export interface Selector {
  /**
   * Declaration kind
   */
  kind?: Kind
  /**
   * Modifiers used on the declaration
   */
  modifiers?: Modifiers
  /**
   * Scope of the declaration
   */
  scope?: Scope
}
export interface RuleWithUseSelfClosingElementsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: UseSelfClosingElementsOptions
}
/**
 * Options for the `useSelfClosingElements` rule.
 */
export interface UseSelfClosingElementsOptions {
  ignoreHtmlElements?: boolean
}
/**
 * A list of rules that belong to this group
 */
export interface Suspicious {
  /**
   * Use standard constants instead of approximated literals.
   */
  noApproximativeNumericConstant?: RuleFixConfiguration | null
  /**
   * Discourage the usage of Array index in keys.
   */
  noArrayIndexKey?: RuleConfiguration | null
  /**
   * Disallow assignments in expressions.
   */
  noAssignInExpressions?: RuleConfiguration | null
  /**
   * Disallows using an async function as a Promise executor.
   */
  noAsyncPromiseExecutor?: RuleConfiguration | null
  /**
   * Disallow reassigning exceptions in catch clauses.
   */
  noCatchAssign?: RuleConfiguration | null
  /**
   * Disallow reassigning class members.
   */
  noClassAssign?: RuleConfiguration | null
  /**
   * Prevent comments from being inserted as text nodes
   */
  noCommentText?: RuleFixConfiguration | null
  /**
   * Disallow comparing against -0
   */
  noCompareNegZero?: RuleFixConfiguration | null
  /**
   * Disallow labeled statements that are not loops.
   */
  noConfusingLabels?: NoConfusingLabelsConfiguration | null
  /**
   * Disallow void type outside of generic or return types.
   */
  noConfusingVoidType?: RuleFixConfiguration | null
  /**
   * Disallow the use of console.
   */
  noConsole?: NoConsoleConfiguration | null
  /**
   * Disallow TypeScript const enum
   */
  noConstEnum?: RuleFixConfiguration | null
  /**
   * Prevents from having control characters and some escape sequences that match control characters in regular expression literals.
   */
  noControlCharactersInRegex?: RuleConfiguration | null
  /**
   * Disallow the use of debugger
   */
  noDebugger?: RuleFixConfiguration | null
  /**
   * Require the use of === and !==.
   */
  noDoubleEquals?: NoDoubleEqualsConfiguration | null
  /**
   * Disallow duplicate @import rules.
   */
  noDuplicateAtImportRules?: RuleConfiguration | null
  /**
   * Disallow duplicate case labels.
   */
  noDuplicateCase?: RuleConfiguration | null
  /**
   * Disallow duplicate class members.
   */
  noDuplicateClassMembers?: RuleConfiguration | null
  /**
   * Disallow duplicate names within font families.
   */
  noDuplicateFontNames?: RuleConfiguration | null
  /**
   * Prevents JSX properties to be assigned multiple times.
   */
  noDuplicateJsxProps?: RuleConfiguration | null
  /**
   * Disallow two keys with the same name inside objects.
   */
  noDuplicateObjectKeys?: RuleConfiguration | null
  /**
   * Disallow duplicate function parameter name.
   */
  noDuplicateParameters?: RuleConfiguration | null
  /**
   * Disallow duplicate selectors within keyframe blocks.
   */
  noDuplicateSelectorsKeyframeBlock?: RuleConfiguration | null
  /**
   * A describe block should not contain duplicate hooks.
   */
  noDuplicateTestHooks?: RuleConfiguration | null
  /**
   * Disallow CSS empty blocks.
   */
  noEmptyBlock?: RuleConfiguration | null
  /**
   * Disallow empty block statements and static blocks.
   */
  noEmptyBlockStatements?: RuleConfiguration | null
  /**
   * Disallow the declaration of empty interfaces.
   */
  noEmptyInterface?: RuleFixConfiguration | null
  /**
   * Disallow variables from evolving into any type through reassignments.
   */
  noEvolvingTypes?: RuleConfiguration | null
  /**
   * Disallow the any type usage.
   */
  noExplicitAny?: RuleConfiguration | null
  /**
   * Disallow using export or module.exports in files containing tests
   */
  noExportsInTest?: RuleConfiguration | null
  /**
   * Prevents the wrong usage of the non-null assertion operator (!) in TypeScript files.
   */
  noExtraNonNullAssertion?: RuleFixConfiguration | null
  /**
   * Disallow fallthrough of switch clauses.
   */
  noFallthroughSwitchClause?: RuleConfiguration | null
  /**
   * Disallow focused tests.
   */
  noFocusedTests?: RuleFixConfiguration | null
  /**
   * Disallow reassigning function declarations.
   */
  noFunctionAssign?: RuleConfiguration | null
  /**
   * Disallow assignments to native objects and read-only global variables.
   */
  noGlobalAssign?: RuleConfiguration | null
  /**
   * Use Number.isFinite instead of global isFinite.
   */
  noGlobalIsFinite?: RuleFixConfiguration | null
  /**
   * Use Number.isNaN instead of global isNaN.
   */
  noGlobalIsNan?: RuleFixConfiguration | null
  /**
   * Disallow use of implicit any type on variable declarations.
   */
  noImplicitAnyLet?: RuleConfiguration | null
  /**
   * Disallow assigning to imported bindings
   */
  noImportAssign?: RuleConfiguration | null
  /**
   * Disallow invalid !important within keyframe declarations
   */
  noImportantInKeyframe?: RuleConfiguration | null
  /**
   * Disallow labels that share a name with a variable
   */
  noLabelVar?: RuleConfiguration | null
  /**
   * Disallow characters made with multiple code points in character class syntax.
   */
  noMisleadingCharacterClass?: RuleFixConfiguration | null
  /**
   * Enforce proper usage of new and constructor.
   */
  noMisleadingInstantiator?: RuleConfiguration | null
  /**
   * Checks that the assertion function, for example expect, is placed inside an it() function call.
   */
  noMisplacedAssertion?: RuleConfiguration | null
  /**
   * Disallow shorthand assign when variable appears on both sides.
   */
  noMisrefactoredShorthandAssign?: RuleFixConfiguration | null
  /**
   * Disallow direct use of Object.prototype builtins.
   */
  noPrototypeBuiltins?: RuleFixConfiguration | null
  /**
   * Prevents React-specific JSX properties from being used.
   */
  noReactSpecificProps?: RuleFixConfiguration | null
  /**
   * Disallow variable, function, class, and type redeclarations in the same scope.
   */
  noRedeclare?: RuleConfiguration | null
  /**
   * Prevents from having redundant "use strict".
   */
  noRedundantUseStrict?: RuleFixConfiguration | null
  /**
   * Disallow comparisons where both sides are exactly the same.
   */
  noSelfCompare?: RuleConfiguration | null
  /**
   * Disallow identifiers from shadowing restricted names.
   */
  noShadowRestrictedNames?: RuleConfiguration | null
  /**
   * Disallow shorthand properties that override related longhand properties.
   */
  noShorthandPropertyOverrides?: RuleConfiguration | null
  /**
   * Disallow disabled tests.
   */
  noSkippedTests?: RuleFixConfiguration | null
  /**
   * Prevents the use of sparse arrays (arrays with holes).
   */
  noSparseArray?: RuleFixConfiguration | null
  /**
   * It detects possible "wrong" semicolons inside JSX elements.
   */
  noSuspiciousSemicolonInJsx?: RuleConfiguration | null
  /**
   * Disallow then property.
   */
  noThenProperty?: RuleConfiguration | null
  /**
   * Disallow unsafe declaration merging between interfaces and classes.
   */
  noUnsafeDeclarationMerging?: RuleConfiguration | null
  /**
   * Disallow using unsafe negation.
   */
  noUnsafeNegation?: RuleFixConfiguration | null
  /**
   * Disallow the use of var
   */
  noVar?: RuleFixConfiguration | null
  /**
   * It enables the recommended rules for this group
   */
  recommended?: boolean | null
  /**
   * Ensure async functions utilize await.
   */
  useAwait?: RuleConfiguration | null
  /**
   * Enforce default clauses in switch statements to be last
   */
  useDefaultSwitchClauseLast?: RuleConfiguration | null
  /**
   * Enforce passing a message value when creating a built-in error.
   */
  useErrorMessage?: RuleConfiguration | null
  /**
   * Enforce get methods to always return a value.
   */
  useGetterReturn?: RuleConfiguration | null
  /**
   * Use Array.isArray() instead of instanceof Array.
   */
  useIsArray?: RuleFixConfiguration | null
  /**
   * Require using the namespace keyword over the module keyword to declare TypeScript namespaces.
   */
  useNamespaceKeyword?: RuleFixConfiguration | null
  /**
   * Enforce using the digits argument with Number#toFixed().
   */
  useNumberToFixedDigitsArgument?: RuleFixConfiguration | null
  /**
   * This rule checks that the result of a typeof expression is compared to a valid value.
   */
  useValidTypeof?: RuleFixConfiguration | null
}
export interface RuleWithNoConfusingLabelsOptions {
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoConfusingLabelsOptions
}
/**
 * Options for the rule `noConfusingLabels`
 */
export interface NoConfusingLabelsOptions {
  /**
   * A list of (non-confusing) labels that should be allowed
   */
  allowedLabels?: string[]
}
export interface RuleWithNoConsoleOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoConsoleOptions
}
export interface NoConsoleOptions {
  /**
   * Allowed calls on the console object.
   */
  allow: string[]
}
export interface RuleWithNoDoubleEqualsOptions {
  /**
   * The kind of the code actions emitted by the rule
   */
  fix?: FixKind | null
  /**
   * The severity of the emitted diagnostics by the rule
   */
  level: RulePlainConfiguration
  /**
   * Rule's options
   */
  options?: NoDoubleEqualsOptions
}
/**
 * Rule's options
 */
export interface NoDoubleEqualsOptions {
  /**
   * If `true`, an exception is made when comparing with `null`, as it's often relied on to check both for `null` or `undefined`.
   *
   * If `false`, no such exception will be made.
   */
  ignoreNull?: boolean
}
export interface OverridePattern {
  /**
   * Specific configuration for the Json language
   */
  assist?: OverrideAssistConfiguration | null
  /**
   * Specific configuration for the CSS language
   */
  css?: CssConfiguration | null
  /**
   * Specific configuration for the Json language
   */
  formatter?: OverrideFormatterConfiguration | null
  /**
   * Specific configuration for the Graphql language
   */
  graphql?: GraphqlConfiguration | null
  /**
   * Specific configuration for the GritQL language
   */
  grit?: GritConfiguration | null
  /**
   * Specific configuration for the GritQL language
   */
  html?: HtmlConfiguration | null
  /**
   * A list of glob patterns. Biome will include files/folders that will match these patterns.
   */
  includes?: OverrideGlobs | null
  /**
   * Specific configuration for the JavaScript language
   */
  javascript?: JsConfiguration | null
  /**
   * Specific configuration for the Json language
   */
  json?: JsonConfiguration | null
  /**
   * Specific configuration for the Json language
   */
  linter?: OverrideLinterConfiguration | null
}
export interface OverrideAssistConfiguration {
  /**
   * List of actions
   */
  actions?: Actions | null
  /**
   * if `false`, it disables the feature and the assist won't be executed. `true` by default
   */
  enabled?: Bool | null
}
export interface OverrideFormatterConfiguration {
  /**
   * The attribute position style.
   */
  attributePosition?: AttributePosition | null
  /**
   * Put the `>` of a multi-line HTML or JSX element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
   */
  bracketSameLine?: BracketSameLine | null
  /**
   * Whether to insert spaces around brackets in object literals. Defaults to true.
   */
  bracketSpacing?: BracketSpacing | null
  enabled?: Bool | null
  /**
   * Whether to expand arrays and objects on multiple lines. When set to `auto`, object literals are formatted on multiple lines if the first property has a newline, and array literals are formatted on a single line if it fits in the line. When set to `always`, these literals are formatted on multiple lines, regardless of length of the list. When set to `never`, these literals are formatted on a single line if it fits in the line. When formatting `package.json`, Biome will use `always` unless configured otherwise. Defaults to "auto".
   */
  expand?: Expand | null
  /**
   * Stores whether formatting should be allowed to proceed if a given file has syntax errors
   */
  formatWithErrors?: Bool | null
  /**
   * The size of the indentation, 2 by default (deprecated, use `indent-width`)
   */
  indentSize?: IndentWidth | null
  /**
   * The indent style.
   */
  indentStyle?: IndentStyle | null
  /**
   * The size of the indentation, 2 by default
   */
  indentWidth?: IndentWidth | null
  /**
   * The type of line ending.
   */
  lineEnding?: LineEnding | null
  /**
   * What's the max width of a line. Defaults to 80.
   */
  lineWidth?: LineWidth | null
}
export interface OverrideLinterConfiguration {
  /**
   * List of rules
   */
  domains?: RuleDomains | null
  /**
   * if `false`, it disables the feature and the linter won't be executed. `true` by default
   */
  enabled?: Bool | null
  /**
   * List of rules
   */
  rules?: Rules | null
}
/**
 * Set of properties to integrate Biome with a VCS software.
 */
export interface VcsConfiguration {
  /**
   * The kind of client.
   */
  clientKind?: VcsClientKind | null
  /**
   * The main branch of the project
   */
  defaultBranch?: string | null
  /**
   * Whether Biome should integrate itself with the VCS client
   */
  enabled?: Bool | null
  /**
   * The folder where Biome should check for VCS files. By default, Biome will use the same folder where `biome.json` was found.
   *
   * If Biome can't find the configuration, it will attempt to use the current working directory. If no current working directory can't be found, Biome won't use the VCS integration, and a diagnostic will be emitted
   */
  root?: string | null
  /**
   * Whether Biome should use the VCS ignore file. When [true], Biome will ignore the files specified in the ignore file.
   */
  useIgnoreFile?: Bool | null
}
